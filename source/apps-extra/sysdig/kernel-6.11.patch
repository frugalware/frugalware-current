From 2641e573befa17f68007710dd0746366fd6d989e Mon Sep 17 00:00:00 2001
From: Federico Di Pierro <nierro92@gmail.com>
Date: Tue, 20 Aug 2024 10:12:16 +0200
Subject: [PATCH] fix(driver): fixed build against linux 6.11.

Signed-off-by: Federico Di Pierro <nierro92@gmail.com>
---
 driver/bpf/fillers.h                          | 20 +++++++++++++----
 .../modern_bpf/definitions/struct_flavors.h   |  7 ++++++
 .../attached/events/sched_process_exec.bpf.c  | 22 +++++++++++++++++--
 .../syscall_dispatched_events/execve.bpf.c    | 22 +++++++++++++++++--
 .../syscall_dispatched_events/execveat.bpf.c  | 22 +++++++++++++++++--
 5 files changed, 83 insertions(+), 10 deletions(-)

diff --git a/driver/bpf/fillers.h b/driver/bpf/fillers.h
index 803edd37ef..d6f56250d6 100644
--- a/driver/bpf/fillers.h
+++ b/driver/bpf/fillers.h
@@ -2899,7 +2899,10 @@ FILLER(execve_extra_tail_1, true)
 	struct timespec64 time = {0};
 
 	/* Parameter 25: exe_file ctime (last status change time, epoch value in nanoseconds) (type: PT_ABSTIME) */
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 6, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 11, 0)
+	time.tv_sec = _READ(inode->i_ctime_sec);
+	time.tv_nsec = _READ(inode->i_ctime_nsec);
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(6, 6, 0)
 	time = _READ(inode->__i_ctime);
 #else
 	time = _READ(inode->i_ctime);
@@ -2908,7 +2911,10 @@ FILLER(execve_extra_tail_1, true)
 	CHECK_RES(res);
 
 	/* Parameter 26: exe_file mtime (last modification time, epoch value in nanoseconds) (type: PT_ABSTIME) */
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 7, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 11, 0)
+	time.tv_sec = _READ(inode->i_mtime_sec);
+	time.tv_nsec = _READ(inode->i_mtime_nsec);
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(6, 7, 0)
 	time = _READ(inode->__i_mtime);
 #else
 	time = _READ(inode->i_mtime);
@@ -6863,7 +6869,10 @@ FILLER(sched_prog_exec_4, false)
 	struct timespec64 time = {0};
 
 	/* Parameter 25: exe_file ctime (last status change time, epoch value in nanoseconds) (type: PT_ABSTIME) */
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 6, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 11, 0)
+	time.tv_sec = _READ(inode->i_ctime_sec);
+	time.tv_nsec = _READ((inode->i_ctime_nsec);
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(6, 6, 0)
 	time = _READ(inode->__i_ctime);
 #else
 	time = _READ(inode->i_ctime);
@@ -6872,7 +6881,10 @@ FILLER(sched_prog_exec_4, false)
 	CHECK_RES(res);
 
 	/* Parameter 26: exe_file mtime (last modification time, epoch value in nanoseconds) (type: PT_ABSTIME) */
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 7, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 11, 0)
+	time.tv_sec = _READ(inode->i_mtime_sec);
+	time.tv_nsec = _READ(inode->i_mtime_nsec);
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(6, 7, 0)
 	time = _READ(inode->__i_mtime);
 #else
 	time = _READ(inode->i_mtime);
diff --git a/driver/modern_bpf/definitions/struct_flavors.h b/driver/modern_bpf/definitions/struct_flavors.h
index b7a9508fb9..3510720020 100644
--- a/driver/modern_bpf/definitions/struct_flavors.h
+++ b/driver/modern_bpf/definitions/struct_flavors.h
@@ -52,6 +52,13 @@ struct inode___v6_7 {
 	struct timespec64 __i_mtime;
 };
 
+struct inode___v6_11 {
+	int64_t	i_mtime_sec;
+	int64_t	i_ctime_sec;
+	uint32_t i_mtime_nsec;
+	uint32_t i_ctime_nsec;
+};
+
 #ifndef BPF_NO_PRESERVE_ACCESS_INDEX
 #pragma clang attribute pop
 #endif
diff --git a/driver/modern_bpf/programs/attached/events/sched_process_exec.bpf.c b/driver/modern_bpf/programs/attached/events/sched_process_exec.bpf.c
index aa4745f880..5fc1d98a5a 100644
--- a/driver/modern_bpf/programs/attached/events/sched_process_exec.bpf.c
+++ b/driver/modern_bpf/programs/attached/events/sched_process_exec.bpf.c
@@ -212,7 +212,16 @@ int BPF_PROG(t1_sched_p_exec,
 	else
 	{
 		struct inode___v6_6 *exe_inode_v6_6 = (void *)exe_inode;
-		BPF_CORE_READ_INTO(&time, exe_inode_v6_6, __i_ctime);
+		if(bpf_core_field_exists(exe_inode_v6_6->__i_ctime))
+		{
+			BPF_CORE_READ_INTO(&time, exe_inode_v6_6, __i_ctime);
+		}
+		else
+		{
+			struct inode___v6_11 *exe_inode_v6_11 = (void *)exe_inode;
+			BPF_CORE_READ_INTO(&time.tv_sec, exe_inode_v6_11, i_ctime_sec);
+			BPF_CORE_READ_INTO(&time.tv_nsec, exe_inode_v6_11, i_ctime_nsec);
+		}
 	}
 	auxmap__store_u64_param(auxmap, extract__epoch_ns_from_time(time));
 
@@ -224,7 +233,16 @@ int BPF_PROG(t1_sched_p_exec,
 	else
 	{
 		struct inode___v6_7 *exe_inode_v6_7 = (void *)exe_inode;
-		BPF_CORE_READ_INTO(&time, exe_inode_v6_7, __i_mtime);
+		if(bpf_core_field_exists(exe_inode_v6_7->__i_mtime))
+		{
+			BPF_CORE_READ_INTO(&time, exe_inode_v6_7, __i_mtime);
+		}
+		else
+		{
+			struct inode___v6_11 *exe_inode_v6_11 = (void *)exe_inode;
+			BPF_CORE_READ_INTO(&time.tv_sec, exe_inode_v6_11, i_mtime_sec);
+			BPF_CORE_READ_INTO(&time.tv_nsec, exe_inode_v6_11, i_mtime_nsec);
+		}
 	}
 	auxmap__store_u64_param(auxmap, extract__epoch_ns_from_time(time));
 
diff --git a/driver/modern_bpf/programs/tail_called/events/syscall_dispatched_events/execve.bpf.c b/driver/modern_bpf/programs/tail_called/events/syscall_dispatched_events/execve.bpf.c
index 5997df139c..671376409f 100644
--- a/driver/modern_bpf/programs/tail_called/events/syscall_dispatched_events/execve.bpf.c
+++ b/driver/modern_bpf/programs/tail_called/events/syscall_dispatched_events/execve.bpf.c
@@ -272,7 +272,16 @@ int BPF_PROG(t1_execve_x,
 	else
 	{
 		struct inode___v6_6 *exe_inode_v6_6 = (void *)exe_inode;
-		BPF_CORE_READ_INTO(&time, exe_inode_v6_6, __i_ctime);
+		if(bpf_core_field_exists(exe_inode_v6_6->__i_ctime))
+		{
+			BPF_CORE_READ_INTO(&time, exe_inode_v6_6, __i_ctime);
+		}
+		else
+		{
+			struct inode___v6_11 *exe_inode_v6_11 = (void *)exe_inode;
+			BPF_CORE_READ_INTO(&time.tv_sec, exe_inode_v6_11, i_ctime_sec);
+			BPF_CORE_READ_INTO(&time.tv_nsec, exe_inode_v6_11, i_ctime_nsec);
+		}
 	}
 	auxmap__store_u64_param(auxmap, extract__epoch_ns_from_time(time));
 
@@ -284,7 +293,16 @@ int BPF_PROG(t1_execve_x,
 	else
 	{
 		struct inode___v6_7 *exe_inode_v6_7 = (void *)exe_inode;
-		BPF_CORE_READ_INTO(&time, exe_inode_v6_7, __i_mtime);
+		if(bpf_core_field_exists(exe_inode_v6_7->__i_mtime))
+		{
+			BPF_CORE_READ_INTO(&time, exe_inode_v6_7, __i_mtime);
+		}
+		else
+		{
+			struct inode___v6_11 *exe_inode_v6_11 = (void *)exe_inode;
+			BPF_CORE_READ_INTO(&time.tv_sec, exe_inode_v6_11, i_mtime_sec);
+			BPF_CORE_READ_INTO(&time.tv_nsec, exe_inode_v6_11, i_mtime_nsec);
+		}
 	}
 	auxmap__store_u64_param(auxmap, extract__epoch_ns_from_time(time));
 
diff --git a/driver/modern_bpf/programs/tail_called/events/syscall_dispatched_events/execveat.bpf.c b/driver/modern_bpf/programs/tail_called/events/syscall_dispatched_events/execveat.bpf.c
index 7bfa1215f8..19fdc766b7 100644
--- a/driver/modern_bpf/programs/tail_called/events/syscall_dispatched_events/execveat.bpf.c
+++ b/driver/modern_bpf/programs/tail_called/events/syscall_dispatched_events/execveat.bpf.c
@@ -285,7 +285,16 @@ int BPF_PROG(t1_execveat_x,
 	else
 	{
 		struct inode___v6_6 *exe_inode_v6_6 = (void *)exe_inode;
-		BPF_CORE_READ_INTO(&time, exe_inode_v6_6, __i_ctime);
+		if(bpf_core_field_exists(exe_inode_v6_6->__i_ctime))
+		{
+			BPF_CORE_READ_INTO(&time, exe_inode_v6_6, __i_ctime);
+		}
+		else
+		{
+			struct inode___v6_11 *exe_inode_v6_11 = (void *)exe_inode;
+			BPF_CORE_READ_INTO(&time.tv_sec, exe_inode_v6_11, i_ctime_sec);
+			BPF_CORE_READ_INTO(&time.tv_nsec, exe_inode_v6_11, i_ctime_nsec);
+		}
 	}
 	auxmap__store_u64_param(auxmap, extract__epoch_ns_from_time(time));
 
@@ -297,7 +306,16 @@ int BPF_PROG(t1_execveat_x,
 	else
 	{
 		struct inode___v6_7 *exe_inode_v6_7 = (void *)exe_inode;
-		BPF_CORE_READ_INTO(&time, exe_inode_v6_7, __i_mtime);
+		if(bpf_core_field_exists(exe_inode_v6_7->__i_mtime))
+		{
+			BPF_CORE_READ_INTO(&time, exe_inode_v6_7, __i_mtime);
+		}
+		else
+		{
+			struct inode___v6_11 *exe_inode_v6_11 = (void *)exe_inode;
+			BPF_CORE_READ_INTO(&time.tv_sec, exe_inode_v6_11, i_mtime_sec);
+			BPF_CORE_READ_INTO(&time.tv_nsec, exe_inode_v6_11, i_mtime_nsec);
+		}
 	}
 	auxmap__store_u64_param(auxmap, extract__epoch_ns_from_time(time));
 
