--- driver/src/main.c	2022-07-07 11:38:22.366686430 +0200
+++ driver.new/src/main.c	2022-07-07 11:39:56.535329723 +0200
@@ -70,8 +70,9 @@
     #define TRACEPOINT_PROBE(probe, args...) static void probe(void *__data, args)
 #endif
 
-#ifndef pgprot_encrypted
-#define pgprot_encrypted(x) (x)
+// Allow build even on arch where PAGE_ENC is not implemented
+#ifndef _PAGE_ENC
+#define _PAGE_ENC 0
 #endif
 
 struct ppm_device {
@@ -1217,8 +1218,9 @@
 
 			pfn = vmalloc_to_pfn(vmalloc_area_ptr);
 
+			pgprot_val(vma->vm_page_prot) = pgprot_val(PAGE_SHARED) | _PAGE_ENC;
 			ret = remap_pfn_range(vma, useraddr, pfn,
-					      PAGE_SIZE, pgprot_encrypted(PAGE_SHARED));
+					      PAGE_SIZE, vma->vm_page_prot);
 			if (ret < 0) {
 				pr_err("remap_pfn_range failed (1)\n");
 				goto cleanup_mmap;
@@ -1255,8 +1257,9 @@
 			while (mlength > 0) {
 				pfn = vmalloc_to_pfn(vmalloc_area_ptr);
 
+				pgprot_val(vma->vm_page_prot) = pgprot_val(PAGE_SHARED) | _PAGE_ENC;
 				ret = remap_pfn_range(vma, useraddr, pfn,
-						      PAGE_SIZE, pgprot_encrypted(PAGE_SHARED));
+						      PAGE_SIZE, vma->vm_page_prot);
 				if (ret < 0) {
 					pr_err("remap_pfn_range failed (1)\n");
 					goto cleanup_mmap;
@@ -1277,8 +1280,9 @@
 			while (mlength > 0) {
 				pfn = vmalloc_to_pfn(vmalloc_area_ptr);
 
+				pgprot_val(vma->vm_page_prot) = pgprot_val(PAGE_SHARED) | _PAGE_ENC;
 				ret = remap_pfn_range(vma, useraddr, pfn,
-						      PAGE_SIZE, pgprot_encrypted(PAGE_SHARED));
+						      PAGE_SIZE, vma->vm_page_prot);
 				if (ret < 0) {
 					pr_err("remap_pfn_range failed (1)\n");
 					goto cleanup_mmap;
