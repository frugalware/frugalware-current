# Compiling Time: 46.76 SBU
# Maintainer: James Buren <ryuo@frugalware.org>
# Contributor: Miklos Vajna <vmiklos@frugalware.org>

### NOTE: check btrfs-progs to match the kernel

Finclude kernel

## check in >=4.16.x , is being working on
## DO NOT enable CONFIG_SP5100_TCO until
## https://bugzilla.kernel.org/show_bug.cgi?id=114201 is *really* resolved
## it kills lots AMD based systems off

## DO NOT enable any CONFIG_GOLDFISH , CONFIG_*_GOLDFISH the driver is broken
## once a decision is made upstream we may re-enbale but for now just don't

## check in >=4.15.x - some fixes in tip/*
## DO NOT enable any X86_5LEVEL CONFIG .. this is a feature Intel CPUs
## will have sometime BUT if you enable such a kernel won't boot on any other BOX!

## DO NOT enable CONFIG_MQ_IOSCHED_KYBER , on my EPYC box it corrupts
## any FS in about seconds on NVMe's , need to investigate -- crazy --


## ENABLE in 14.15 ..

## BPF speculation prevention ( spectre v2 part ) -> CONFIG_BPF_JIT_ALWAYS_ON

url="https://www.kernel.org"
depends=('kmod' 'sed')
[[ -z "$_F_kernel_name" ]] && makedepends+=('unifdef')
groups=('base')
archs=('x86_64')
## Do NOT remove noccache here
options+=('nodocs' 'genscriptlet' 'noccache')
_F_archive_grepv="rc"
up2date="Flasttar $url"

_F_kernel_patches=(
                   enable_alx_wol.patch
                   0001-Revert-ath10k-activate-user-space-firmware-loading-a.patch
                   # mute PPS error shit .. buggy in 4.14.x
                   mute-pps_state_mismatch.patch
		   # don't tell folks howto break a working box
		   # also that msg is wrong , ancient and means for very old boxes
		   # however after refactoring in 4.15 it bugs everyone
		   drop_ancient-and-wrong-msg.patch
		   # nvidia
		   0001-Revert-swiotlb-remove-various-exports.patch
		   nouveau-pascal-backlight.patch
		   # AMD EPYC
		   0001-Revert-x86-ACPI-cstate-Allow-ACPI-C1-FFH-MWAIT-use-o.patch
		   ## amdgpu and radeon
		   0001-Make-it-possible-to-disable-SWIOTLB-code-on-admgpu-a.patch
		   ## https://cgit.freedesktop.org/~agd5f/linux/commit/?h=amd-staging-drm-next&id=fc0644eddd2d5f77aac44ad2ab5a3edae08d11c2
                   )

for ppatch in "${_F_kernel_patches[@]}"
do
	source+=("$ppatch")
	signatures+=('')
done

source+=("https://www.kernel.org/pub/linux/kernel/v4.x/$_F_archive_name-$pkgver.tar.xz" 'config.x86_64')
signatures+=("https://www.kernel.org/pub/linux/kernel/v4.x/$_F_archive_name-$pkgver.tar.sign" '')


subpkgs=('cpupower')
subdescs=('Kernel cpu powersaving tool')
subrodepends=("kernel=$_F_kernelver_ver")
subdepends=('pciutils')
subgroups=('apps-extra')
subarchs=('x86_64')
subbackup=('etc/sysconfig/cpupower')
subconflicts=('cpufrequtils')
subprovides=('cpufrequtils')
subreplaces=('cpufrequtils')
suboptions=('')
subinstall=('')
source+=("cpupower" "cpupower.sh" "cpupower.service")
signatures+=('' '' '')

subpkgs+=('x86_energy_perf_policy')
subdescs+=('Kernel tool for setting MSR energy policies')
subrodepends+=("kernel=$_F_kernelver_ver")
subdepends+=('pciutils')
subgroups+=('apps-extra')
subarchs+=('x86_64')
subbackup+=('')
subconflicts+=('')
subprovides+=('')
subreplaces+=('')
suboptions+=('')
subinstall+=('')

subpkgs+=('perf')
subdescs+=('Kernel performance profiling tool')
subrodepends+=("kernel=$_F_kernelver_ver")
subdepends+=('elfutils slang binutils>=2.26 xz')
subgroups+=('devel-extra')
subarchs+=('x86_64')
subbackup+=('')
subconflicts+=('')
subprovides+=('')
subreplaces+=('')
suboptions+=('')
subinstall+=('')


subpkgs+=("kernel$_F_kernel_name-docs")
subdescs+=("Linux kernel documentation")
subrodepends+=("kernel=$_F_kernelver_ver")
subdepends+=('')
subgroups+=('devel-extra')
subarchs+=('x86_64')
subbackup+=('')
subconflicts+=('')
subprovides+=('')
subreplaces+=('')
suboptions+=('')
subinstall+=('')

subpkgs+=("kernel$_F_kernel_name-source")
subrodepends+=("make gcc>=6.2.1 kernel-headers")
subdescs+=('Linux kernel source')
subgroups+=('devel-extra chroot-core')
subdepends+=('')
subreplaces+=('')
subprovides+=('')
subconflicts+=('')
subarchs+=('x86_64')
subbackup+=('')
subinstall+=('')
suboptions+=('nodocs')

if [ -z "$_F_kernel_name" ]; then
	subpkgs+=('kernel-headers')
	subrodepends+=('')
	subgroups+=('devel devel-core')
	subdescs+=('Linux kernel include files')
	subarchs+=('x86_64')
	subbackup+=('')
	subinstall+=('')
	suboptions+=('')
	subreplaces+=('')
	subdepends+=('')
	subprovides+=('')
	subconflicts+=('')
fi

build()
{

	Fcd
	make clean || Fdie

	if [ -e "$Fsrcdir/config.$CARCH" ]; then
		cp $Fsrcdir/config.$CARCH .config || Fdie
	else
		Fmessage "Cannot find a valid config.."
		exit 1
	fi

	# not using Fpatchall here since not applying the patches from
	# _F_kernel_patches() having the wrong extension would be stange :)
	local i

	for i in "${_F_kernel_patches[@]}"
	do
		Fpatch `strip_url $i`
	done

	if [ -z "$_F_kernel_name" -a $_F_kernel_dontfakeversion -eq 0 ]; then
		# stock kernel, nobody interested in the buildsystem's detail
		export KBUILD_BUILD_USER="fst"
		export KBUILD_BUILD_HOST="`uname -m`.frugalware.org"
	fi

	# remove unneded localversions
	rm -fv localversion-*
	rm -fv ../*.{gz,bz2,sign}

	yes "" | make config

	if [ $_F_kernel_dontfakeversion -eq 0 ]; then
		if [ "${_F_kernel_ver#*.*.}" = "$_F_kernel_ver" ]; then
			# If patten match fails, sublevel version is missing
			Fsed "SUBLEVEL =.*" "SUBLEVEL =" Makefile
		else
			 Fsed "SUBLEVEL =.*" "SUBLEVEL = ${_F_kernel_ver#*.*.}" Makefile
		fi
		Fsed "EXTRAVERSION =.*" "EXTRAVERSION = $_F_kernel_uname" Makefile
	else
		make include/config/kernel.release
		unset _F_kernel_ver
		_F_kernel_uname=$(cat include/config/kernel.release)
	fi

	## let we do kernel$_F_kernel_name-source before make
	Fmkdir /usr/src
	Fexec cp -Ra $Fsrcdir/linux-$_F_kernelver_ver $Fdestdir/usr/src/linux-$_F_kernel_ver$_F_kernel_uname || Fdie
	Fexec rm -rfv $Fdestdir/usr/src/linux-$_F_kernel_ver$_F_kernel_uname/{.git,.gitignore,.config.old,Documentation,COPYING,CREDITS,MAINTAINERS,README} || Fdie
	Fln linux-$_F_kernel_ver$_F_kernel_uname /usr/src/linux
	Fexec make -C $Fdestdir/usr/src/linux-$_F_kernel_ver$_F_kernel_uname scripts || Fdie
	Fexec make -C $Fdestdir/usr/src/linux-$_F_kernel_ver$_F_kernel_uname prepare || Fdie

	Fexec rm -rff $Fdestdir/usr/src/linux-$_F_kernel_ver$_F_kernel_uname/usr/ || Fdie
	Fsplit kernel$_F_kernel_name-source usr/src

	## now the kernel$_F_kernel_name-docs
	Fmkdir /usr/src/linux-$_F_kernel_ver$_F_kernel_uname
	Fexec cp -Ra $Fsrcdir/linux-$_F_kernelver_ver/{Documentation,COPYING,CREDITS,MAINTAINERS,README} \
				$Fdestdir/usr/src/linux-$_F_kernel_ver$_F_kernel_uname || Fdie
	## do we need to ln /usr/share/doc ?!
	Fsplit kernel$_F_kernel_name-docs usr/src


	if [ -z "$_F_kernel_name" ]; then
		make INSTALL_HDR_PATH=$Fdestdir/usr headers_install || Fdie
		[ -e $Fdestdir/usr/include/scsi ] && Frm /usr/include/scsi
		[ -e $Fdestdir/usr/include/drm ] && Frm /usr/include/drm
		Fsplit kernel-headers /usr
	fi

	## now time to eat some cookies and wait the kernel got compiled :)
	## use verbose by default, we want to know what is going on...
	Fexec make $MAKEFLAGS V=1 || Fdie

	Fmkdir /boot
	Fmkdir /lib/modules
	Ffilerel .config /boot/config-$_F_kernel_ver$_F_kernel_uname
	if [ ! -z "$_F_kernel_vmlinuz" ]; then
		Ffilerel $_F_kernel_vmlinuz /boot/$_F_kernel_path-$_F_kernel_ver$_F_kernel_uname
	else
		Ffilerel arch/x86/boot/bzImage /boot/$_F_kernel_path-$_F_kernel_ver$_F_kernel_uname
	fi

	Fln config-$_F_kernel_ver$_F_kernel_uname /boot/config
	Fln System.map-$_F_kernel_ver$_F_kernel_uname /boot/System.map
	Fln $_F_kernel_path-$_F_kernel_ver$_F_kernel_uname /boot/$_F_kernel_path

	make INSTALL_MOD_PATH=$Fdestdir $MAKEFLAGS modules_install || Fdie
	# dump symol versions so that later builds will have dependencies and
	# modversions
	Ffilerel System.map /boot/System.map-$_F_kernel_ver$_F_kernel_uname
	Ffilerel /usr/src/linux-$_F_kernel_ver$_F_kernel_uname/Module.symvers
	Frm /lib/modules/$_F_kernel_ver$_F_kernel_uname/build
	Frm /lib/modules/$_F_kernel_ver$_F_kernel_uname/source

	Fln /usr/src/linux-$_F_kernel_ver$_F_kernel_uname /lib/modules/$_F_kernel_ver$_F_kernel_uname/build
	Fln /usr/src/linux-$_F_kernel_ver$_F_kernel_uname /lib/modules/$_F_kernel_ver$_F_kernel_uname/source

	Fexec /sbin/depmod -a -b $Fdestdir $_F_kernel_ver$_F_kernel_uname || Fdie

	# build cpupower
	cd tools/power/cpupower

	Fexec make clean || Fdie
        Fsed '$(OPTIMIZATION) -fomit-frame-pointer' "$CFLAGS" Makefile
	Fsed 'lib64' 'lib' Makefile
        Fexec make DEBUG=false CPUFREQ_BENCH=false || Fdie
        Fexec make DESTDIR="$Fdestdir" CPUFREQ_BENCH=false install || Fdie
        Fmv /usr/man /usr/share
        Ffile /etc/sysconfig/cpupower
        Fexe /usr/sbin/cpupower.sh
        Ffile /lib/systemd/system/cpupower.service

	Fsplit cpupower etc/
        Fsplit cpupower lib/systemd
        Fsplit cpupower usr/bin/
        Fsplit cpupower usr/include/
        Fsplit cpupower usr/lib/
        Fsplit cpupower usr/sbin/
        Fsplit cpupower usr/share/

	# build x86_energy_perf_policy
        cd ../x86/x86_energy_perf_policy
        make clean || Fdie
        Fsed '$(OPTIMIZATION) -fomit-frame-pointer' "$CFLAGS" Makefile
        make  || Fdie
        Fmkdir usr/bin usr/share/man/man8
        make DESTDIR="$Fdestdir" install || Fdie

	Fsplit x86_energy_perf_policy usr/bin/
	Fsplit x86_energy_perf_policy usr/share/

	# build perf
	cd ../../../perf

        Fsed "lib64" "lib" Makefile.config
	Fsed "libexec/perf-core" "lib/perf/perf-core" Makefile.config
        Fexec make                             \
                WERROR=0                       \
                DESTDIR="$Fdestdir/usr"        \
                NO_GTK2=1                      \
                NO_LIBAUDIT=1                  \
                NO_LIBNUMA=1                   \
                NO_LIBUNWIND=1                 \
                PERF_VERSION="$pkgver-$pkgrel" \
                install || Fdie
        Fmv /usr/etc /etc/
	Frm /usr/etc
	Fsplit perf etc/
	Fsplit perf usr/bin/
	Fsplit perf usr/lib/perf
	Fsplit perf usr/share/

}

# optimization OK
