diff -Naur linux-5.5.11/fs/fs_parser.c linux-5.5.11-p/fs/fs_parser.c
--- linux-5.5.11/fs/fs_parser.c	2020-03-21 08:15:56.000000000 +0100
+++ linux-5.5.11-p/fs/fs_parser.c	2020-03-23 11:03:23.120596725 +0100
@@ -319,24 +319,24 @@
 	bool good = true;
 
 	if (tbl_size == 0) {
-		pr_warn("VALIDATE C-TBL: Empty\n");
+		pr_warn("fs-parser: VALIDATE C-TBL: Empty\n");
 		return true;
 	}
 
 	for (i = 0; i < tbl_size; i++) {
 		if (!tbl[i].name) {
-			pr_err("VALIDATE C-TBL[%zu]: Null\n", i);
+			pr_err("fs-parser: VALIDATE C-TBL[%zu]: Null\n", i);
 			good = false;
 		} else if (i > 0 && tbl[i - 1].name) {
 			int c = strcmp(tbl[i-1].name, tbl[i].name);
 
 			if (c == 0) {
-				pr_err("VALIDATE C-TBL[%zu]: Duplicate %s\n",
+				pr_err("fs-parser: VALIDATE C-TBL[%zu]: Duplicate %s\n",
 				       i, tbl[i].name);
 				good = false;
 			}
 			if (c > 0) {
-				pr_err("VALIDATE C-TBL[%zu]: Missorted %s>=%s\n",
+				pr_err("fs-parser: VALIDATE C-TBL[%zu]: Missorted %s>=%s\n",
 				       i, tbl[i-1].name, tbl[i].name);
 				good = false;
 			}
@@ -344,7 +344,7 @@
 
 		if (tbl[i].value != special &&
 		    (tbl[i].value < low || tbl[i].value > high)) {
-			pr_err("VALIDATE C-TBL[%zu]: %s->%d const out of range (%d-%d)\n",
+			pr_err("fs-parser: VALIDATE C-TBL[%zu]: %s->%d const out of range (%d-%d)\n",
 			       i, tbl[i].name, tbl[i].value, low, high);
 			good = false;
 		}
@@ -365,10 +365,10 @@
 	unsigned int nr_params = 0;
 	bool good = true, enums = false;
 
-	pr_notice("*** VALIDATE %s ***\n", name);
+	pr_notice("fs-parser: VALIDATE %s \n", name);
 
 	if (!name[0]) {
-		pr_err("VALIDATE Parser: No name\n");
+		pr_err("fs-parser: VALIDATE Parser: No name\n");
 		name = "Unknown";
 		good = false;
 	}
@@ -380,7 +380,7 @@
 			/* Check that the type is in range */
 			if (t == __fs_param_wasnt_defined ||
 			    t >= nr__fs_parameter_type) {
-				pr_err("VALIDATE %s: PARAM[%s] Bad type %u\n",
+				pr_err("fs-parser: VALIDATE %s: PARAM[%s] Bad type %u\n",
 				       name, param->name, t);
 				good = false;
 			} else if (t == fs_param_is_enum) {
@@ -390,7 +390,7 @@
 			/* Check for duplicate parameter names */
 			for (p2 = desc->specs; p2 < param; p2++) {
 				if (strcmp(param->name, p2->name) == 0) {
-					pr_err("VALIDATE %s: PARAM[%s]: Duplicate\n",
+					pr_err("fs-parser: VALIDATE %s: PARAM[%s]: Duplicate\n",
 					       name, param->name);
 					good = false;
 				}
@@ -402,13 +402,13 @@
 
 	if (desc->enums) {
 		if (!nr_params) {
-			pr_err("VALIDATE %s: Enum table but no parameters\n",
+			pr_err("fs-parser: VALIDATE %s: Enum table but no parameters\n",
 			       name);
 			good = false;
 			goto no_enums;
 		}
 		if (!enums) {
-			pr_err("VALIDATE %s: Enum table but no enum-type values\n",
+			pr_err("fs-parser: VALIDATE %s: Enum table but no enum-type values\n",
 			       name);
 			good = false;
 			goto no_enums;
@@ -421,7 +421,7 @@
 			for (param = desc->specs; param->name; param++) {
 				if (param->opt == e->opt &&
 				    param->type != fs_param_is_enum) {
-					pr_err("VALIDATE %s: e[%tu] enum val for %s\n",
+					pr_err("fs-parser: VALIDATE %s: e[%tu] enum val for %s\n",
 					       name, e - desc->enums, param->name);
 					good = false;
 				}
@@ -438,14 +438,14 @@
 				if (e->opt == param->opt)
 					break;
 			if (!e->name[0]) {
-				pr_err("VALIDATE %s: PARAM[%s] enum with no values\n",
+				pr_err("fs-parser: VALIDATE %s: PARAM[%s] enum with no values\n",
 				       name, param->name);
 				good = false;
 			}
 		}
 	} else {
 		if (enums) {
-			pr_err("VALIDATE %s: enum-type values, but no enum table\n",
+			pr_err("fs-parser: VALIDATE %s: enum-type values, but no enum table\n",
 			       name);
 			good = false;
 			goto no_enums;
