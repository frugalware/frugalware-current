diff --git a/pactest/pmdb.py b/pactest/pmdb.py
index e72e9c4a..bd88a6bd 100644
--- a/pactest/pmdb.py
+++ b/pactest/pmdb.py
@@ -123,7 +123,7 @@ class pmdb:
 
 		# desc
 		filename = os.path.join(path, "desc")
-		fd = file(filename, "r")
+		fd = open(filename, "r")
 		while 1:
 			line = fd.readline()
 			if not line:
@@ -165,7 +165,7 @@ class pmdb:
 
 		# files
 		filename = os.path.join(path, "files")
-		fd = file(filename, "r")
+		fd = open(filename, "r")
 		while 1:
 			line = fd.readline()
 			if not line:
@@ -184,7 +184,7 @@ class pmdb:
 
 		# depends
 		filename = os.path.join(path, "depends")
-		fd = file(filename, "r")
+		fd = open(filename, "r")
 		while 1:
 			line = fd.readline()
 			if not line:
diff --git a/pactest/tests/smoke001.py b/pactest/tests/smoke001.py
index 85ee782b..a8844512 100644
--- a/pactest/tests/smoke001.py
+++ b/pactest/tests/smoke001.py
@@ -10,9 +10,7 @@ for i in range(1000):
 	p.files = ["usr/share/pkg%03d" % i]
 	self.addpkg(p)
 
-_list = []
-[_list.append(p.filename()) for p in self.localpkgs]
-self.args = "-A %s" % " ".join(_list)
+self.args = "-A %s" % " ".join([p.filename() for p in self.localpkgs])
 
 self.addrule("PACMAN_RETCODE=0")
 #for i in range(1000):
diff --git a/pactest/util.py b/pactest/util.py
index d028bde0..8f7775a6 100644
--- a/pactest/util.py
+++ b/pactest/util.py
@@ -118,7 +118,7 @@ def mkfile(name, data = ""):
 		os.symlink(link, os.path.basename(filename))
 		os.chdir(curdir)
 	else:
-		fd = file(filename, "w")
+		fd = open(filename, "w")
 		if data:
 			fd.write(data)
 			if data[-1] != "\n":
@@ -247,15 +247,15 @@ def getsha1sum(filename):
 	except IOError:
 		pass
 	digest = checksum.digest()
-	return "%02x"*len(digest) % tuple(map(ord, digest))
+	return "%02x"*len(digest)
 
 def mksha1sum(data):
 	"""
 	"""
 	checksum = hashlib.new("sha1")
-	checksum.update("%s\n" % data)
+	checksum.update(data.encode())
 	digest = checksum.digest()
-	return "%02x"*len(digest) % tuple(map(ord, digest))
+	return "%02x"*len(digest)
 
 
 #
@@ -275,7 +275,7 @@ def getmtime(filename):
 
 def grep(filename, pattern):
 	found = 0
-	fd = file(filename, "r")
+	fd = open(filename, "r")
 	while 1 and not found:
 		line = fd.readline()
 		if not line:
