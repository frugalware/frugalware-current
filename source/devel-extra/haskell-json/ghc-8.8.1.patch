From 9d36ca5d865be7e4b2126b68a444b901941d2492 Mon Sep 17 00:00:00 2001
From: Aaron Tomb <atomb@galois.com>
Date: Thu, 17 Oct 2019 14:11:42 -0700
Subject: [PATCH] Fix build with GHC 8.8.1

---
 Text/JSON.hs        | 5 ++++-
 Text/JSON/String.hs | 5 ++++-
 2 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/Text/JSON.hs b/Text/JSON.hs
index f2e2618..c1f107c 100644
--- a/Text/JSON.hs
+++ b/Text/JSON.hs
@@ -45,6 +45,7 @@ import Text.JSON.String
 
 import Data.Int
 import Data.Word
+import qualified Control.Monad.Fail as Fail
 import Control.Monad(liftM,ap,MonadPlus(..))
 import Control.Applicative
 
@@ -137,10 +138,12 @@ instance MonadPlus Result where
 
 instance Monad Result where
   return x      = Ok x
-  fail x        = Error x
   Ok a >>= f    = f a
   Error x >>= _ = Error x
 
+instance Fail.MonadFail Result where
+  fail x        = Error x
+
 -- | Convenient error generation
 mkError :: String -> Result a
 mkError s = Error s
diff --git a/Text/JSON/String.hs b/Text/JSON/String.hs
index 51463cd..67da246 100644
--- a/Text/JSON/String.hs
+++ b/Text/JSON/String.hs
@@ -35,6 +35,7 @@ import Text.JSON.Types (JSValue(..),
                         JSObject, toJSObject, fromJSObject)
 
 import Control.Monad (liftM, ap)
+import qualified Control.Monad.Fail as Fail
 import Control.Applicative((<$>))
 import qualified Control.Applicative as A
 import Data.Char (isSpace, isDigit, digitToInt)
@@ -54,11 +55,13 @@ instance A.Applicative GetJSON where
 
 instance Monad GetJSON where
   return x        = GetJSON (\s -> Right (x,s))
-  fail x          = GetJSON (\_ -> Left x)
   GetJSON m >>= f = GetJSON (\s -> case m s of
                                      Left err -> Left err
                                      Right (a,s1) -> un (f a) s1)
 
+instance Fail.MonadFail GetJSON where
+  fail x          = GetJSON (\_ -> Left x)
+
 -- | Run a JSON reader on an input String, returning some Haskell value.
 -- All input will be consumed.
 runGetJSON :: GetJSON a -> String -> Either String a
