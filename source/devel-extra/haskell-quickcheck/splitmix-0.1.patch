From b8f00a6fbfcfd5cbb1bb3308a1368f04073882f2 Mon Sep 17 00:00:00 2001
From: Oleg Grenrus <oleg.grenrus@iki.fi>
Date: Thu, 28 May 2020 18:13:24 +0300
Subject: [PATCH] Use splitmix-0.0.5 nextInteger, and support splitmix-0.1

splitmix-0.1 dropped dependency on random. But that's
a non-issue, as QuickCheck doesn't use any `random` instances
of `SMGen`, we only need to implement `RandomGen QCGen`
in terms of splitmix combinators

Related: https://github.com/phadej/splitmix/issues/34
---
 QuickCheck.cabal          |  2 +-
 Test/QuickCheck/Gen.hs    | 11 ++---------
 Test/QuickCheck/Random.hs | 13 +++++++++++++
 3 files changed, 16 insertions(+), 10 deletions(-)

diff --git a/QuickCheck.cabal b/QuickCheck.cabal
index 9600262..00b7cb9 100644
--- a/QuickCheck.cabal
+++ b/QuickCheck.cabal
@@ -120,7 +120,7 @@ library
 
   -- Use splitmix on newer GHCs.
   if impl(ghc >= 7.0)
-    Build-depends: splitmix >= 0.0.4
+    Build-depends: splitmix >= 0.0.5 && <0.2
   else
     cpp-options: -DNO_SPLITMIX
 
diff --git a/Test/QuickCheck/Gen.hs b/Test/QuickCheck/Gen.hs
index 4648000..9b8aa7e 100644
--- a/Test/QuickCheck/Gen.hs
+++ b/Test/QuickCheck/Gen.hs
@@ -36,7 +36,7 @@ import Data.List
 import Data.Ord
 import Data.Maybe
 #ifndef NO_SPLITMIX
-import System.Random.SplitMix(bitmaskWithRejection64', SMGen)
+import System.Random.SplitMix(bitmaskWithRejection64', SMGen, nextInteger)
 #endif
 import Data.Word
 import Data.Int
@@ -187,14 +187,7 @@ chooseInteger :: (Integer, Integer) -> Gen Integer
 #ifdef NO_SPLITMIX
 chooseInteger = choose
 #else
-chooseInteger (lo, hi)
-  | lo >= toInteger (minBound :: Int64) && lo <= toInteger (maxBound :: Int64) &&
-    hi >= toInteger (minBound :: Int64) && hi <= toInteger (maxBound :: Int64) =
-    fmap toInteger (chooseInt64 (fromInteger lo, fromInteger hi))
-  | lo >= toInteger (minBound :: Word64) && lo <= toInteger (maxBound :: Word64) &&
-    hi >= toInteger (minBound :: Word64) && hi <= toInteger (maxBound :: Word64) =
-    fmap toInteger (chooseWord64 (fromInteger lo, fromInteger hi))
-  | otherwise = choose (lo, hi)
+chooseInteger (lo, hi) = MkGen $ \(QCGen g) _ -> fst (nextInteger lo hi g)
 
 chooseWord64 :: (Word64, Word64) -> Gen Word64
 chooseWord64 (lo, hi)
diff --git a/Test/QuickCheck/Random.hs b/Test/QuickCheck/Random.hs
index aac4a09..b1f4abe 100644
--- a/Test/QuickCheck/Random.hs
+++ b/Test/QuickCheck/Random.hs
@@ -27,13 +27,26 @@ instance Read QCGen where
   readsPrec n xs = [(QCGen g, ys) | (g, ys) <- readsPrec n xs]
 
 instance RandomGen QCGen where
+#ifdef NO_SPLITMIX
   split (QCGen g) =
     case split g of
       (g1, g2) -> (QCGen g1, QCGen g2)
+
   genRange (QCGen g) = genRange g
   next (QCGen g) =
     case next g of
       (x, g') -> (x, QCGen g')
+#else
+  split (QCGen g) =
+    case splitSMGen g of
+      (g1, g2) -> (QCGen g1, QCGen g2)
+
+  genRange (QCGen g) = (minBound, maxBound)
+
+  next (QCGen g) =
+    case nextInt g of
+      (x, g') -> (x, QCGen g')
+#endif
 
 newQCGen :: IO QCGen
 #ifdef NO_SPLITMIX
