diff -Naur ispc-1.18.0/alloy.py ispc-1.18.0.new/alloy.py
--- ispc-1.18.0/alloy.py	2022-05-06 01:06:57.000000000 +0200
+++ ispc-1.18.0.new/alloy.py	2022-09-22 20:51:14.495345109 +0200
@@ -120,6 +120,8 @@
     # git: "origin/release/9.x"
     if  version_LLVM == "trunk":
         GIT_TAG="main"
+    elif  version_LLVM == "15_0":
+        GIT_TAG="llvmorg-15.0.0-rc2"
     elif  version_LLVM == "14_0":
         GIT_TAG="llvmorg-14.0.1"
     elif  version_LLVM == "13_0":
@@ -610,7 +612,7 @@
             archs.append("x86-64")
         if "native" in only:
             sde_targets_t = []
-        for i in ["6.0", "7.0", "8.0", "9.0", "10.0", "11.0", "12.0", "13.0", "14.0", "trunk"]:
+        for i in ["6.0", "7.0", "8.0", "9.0", "10.0", "11.0", "12.0", "13.0", "14.0", "15.0", "trunk"]:
             if i in only:
                 LLVM.append(i)
         if "current" in only:
@@ -816,7 +818,7 @@
     if os.environ.get("ISPC_HOME") == None:
         alloy_error("you have no ISPC_HOME", 1)
     if options.only != "":
-        test_only_r = " 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 trunk current build stability performance x86 x86-64 x86_64 -O0 -O1 -O2 native debug nodebug "
+        test_only_r = " 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 15.0 trunk current build stability performance x86 x86-64 x86_64 -O0 -O1 -O2 native debug nodebug "
         test_only = options.only.split(" ")
         for iterator in test_only:
             if not (" " + iterator + " " in test_only_r):
diff -Naur ispc-1.18.0/cmake/GenerateBuiltins.cmake ispc-1.18.0.new/cmake/GenerateBuiltins.cmake
--- ispc-1.18.0/cmake/GenerateBuiltins.cmake	2022-05-06 01:06:57.000000000 +0200
+++ ispc-1.18.0.new/cmake/GenerateBuiltins.cmake	2022-09-22 20:51:14.495345109 +0200
@@ -293,7 +293,7 @@
     else()
         add_custom_command(
             OUTPUT ${output}
-            COMMAND ${CLANGPP_EXECUTABLE} ${target_flags} -I${CMAKE_SOURCE_DIR} -m${bit} -emit-llvm --std=gnu++17 -c ${inputFilePath} -o - | (\"${LLVM_DIS_EXECUTABLE}\" - || echo "builtins-c-*.cpp compile error")
+            COMMAND ${CLANGPP_EXECUTABLE} ${target_flags} -I${CMAKE_SOURCE_DIR} -m${bit} -emit-llvm ${ISPC_OPAQUE_FLAGS} --std=gnu++17 -c ${inputFilePath} -o - | (\"${LLVM_DIS_EXECUTABLE}\" - || echo "builtins-c-*.cpp compile error")
                 | \"${Python3_EXECUTABLE}\" bitcode2cpp.py c --type=builtins-c --runtime=${bit} --os=${os_name} --arch=${target_arch} --llvm_as ${LLVM_AS_EXECUTABLE}
                 > ${output}
             DEPENDS ${inputFilePath} bitcode2cpp.py
diff -Naur ispc-1.18.0/CMakeLists.txt ispc-1.18.0.new/CMakeLists.txt
--- ispc-1.18.0/CMakeLists.txt	2022-05-06 01:06:57.000000000 +0200
+++ ispc-1.18.0.new/CMakeLists.txt	2022-09-22 20:54:25.629701329 +0200
@@ -62,6 +62,8 @@
 option(ISPC_PREPARE_PACKAGE "Generate build targets for ispc package" OFF)
 option(ISPC_NO_DUMPS "Turn off functionality, which requires LLVM dump() functions" OFF)
 
+option(ISPC_OPAQUE_PTR_MODE "Build ISPC with usage of opaque pointers" OFF)
+
 option(ISPC_CROSS "Build ISPC with cross compilation support" OFF)
 # Default settings for cross compilation
 if (ISPC_CROSS)
@@ -287,7 +289,7 @@
     list(APPEND ISPC_TARGETS wasm-i32x4)
 endif()
 
-set(CLANG_LIBRARY_LIST clangFrontend clangDriver clangSerialization clangParse clangSema clangAnalysis clangAST clangBasic clangEdit clangLex)
+set(CLANG_LIBRARY_LIST clang-cpp)
 set(LLVM_COMPONENTS engine ipo bitreader bitwriter instrumentation linker option frontendopenmp)
 
 if (X86_ENABLED)
@@ -312,6 +314,25 @@
     list(APPEND XE_LIBRARY_LIST LLVMGenXIntrinsics LLVMSPIRVLib)
 endif()
 
+# Set the flag responsible for generation of opaque pointers in builtins
+set(ISPC_OPAQUE_FLAGS)
+if (ISPC_OPAQUE_PTR_MODE)
+    if (${LLVM_VERSION_NUMBER} VERSION_GREATER_EQUAL "15.0.0")
+    # Do nothing, opaque pointers mode is default
+    elseif (${LLVM_VERSION_NUMBER} VERSION_EQUAL "14.0.0")
+    # Explicitly enable opaque pointers for LLVM 14.0
+        set(ISPC_OPAQUE_FLAGS "-Xclang" "-opaque-pointers")
+    else()
+        message(FATAL_ERROR "ISPC opaque pointers mode is not supported with LLVM " ${LLVM_VERSION_NUMBER})
+    endif()
+else()
+    # Explicitly disable opaque pointers starting LLVM 15.0
+    if (${LLVM_VERSION_NUMBER} VERSION_GREATER_EQUAL "15.0.0")
+        set(ISPC_OPAQUE_FLAGS "-Xclang" "-no-opaque-pointers")
+    endif()
+endif()
+message(STATUS "ISPC opaque pointers mode is " ${ISPC_OPAQUE_PTR_MODE})
+
 get_llvm_libfiles(LLVM_LIBRARY_LIST ${LLVM_COMPONENTS})
 get_llvm_cppflags(LLVM_CPP_FLAGS)
 
@@ -399,6 +420,7 @@
 if (ARM_ENABLED)
     target_compile_definitions(${PROJECT_NAME} PRIVATE ISPC_ARM_ENABLED)
 endif()
+
 if (XE_ENABLED)
     target_compile_definitions(${PROJECT_NAME} PRIVATE ISPC_XE_ENABLED)
 endif()
@@ -434,6 +456,11 @@
     target_compile_definitions(${PROJECT_NAME} PRIVATE ISPC_PS_TARGET_OFF)
 endif()
 
+# Compile definition for opaque pointers mode
+if (ISPC_OPAQUE_PTR_MODE)
+    target_compile_definitions(${PROJECT_NAME} PRIVATE ISPC_OPAQUE_PTR_MODE)
+endif()
+
 # Include directories
 target_include_directories(${PROJECT_NAME} PRIVATE
                            ${LLVM_INCLUDE_DIRS}
diff -Naur ispc-1.18.0/.github/workflows/rebuild-llvm15.yml ispc-1.18.0.new/.github/workflows/rebuild-llvm15.yml
--- ispc-1.18.0/.github/workflows/rebuild-llvm15.yml	1970-01-01 01:00:00.000000000 +0100
+++ ispc-1.18.0.new/.github/workflows/rebuild-llvm15.yml	2022-09-22 20:51:14.496345053 +0200
@@ -0,0 +1,25 @@
+# Copyright 2022 Intel Corporation
+# SPDX-License-Identifier: BSD-3-Clause
+
+name: Rebuild LLVM 15.0
+
+on:
+  push:
+    branches:
+      - main
+      - '**rebuild_llvm**'
+    paths:
+      - "llvm_patches/*15_0*"
+      - "alloy.py"
+      - ".github/workflows/rebuild-llvm15.yml"
+  workflow_dispatch:
+
+jobs:
+  llvm15:
+    uses: ./.github/workflows/reusable.rebuild.yml
+    with:
+      version: '15.0'
+      full_version: '15.0.0rc2'
+      ubuntu: '18.04'
+      vs_generator: 'Visual Studio 16 2019'
+      vs_version_str: 'vs2019'
diff -Naur ispc-1.18.0/.gitlab/.gitlab-ci.yml ispc-1.18.0.new/.gitlab/.gitlab-ci.yml
--- ispc-1.18.0/.gitlab/.gitlab-ci.yml	2022-05-06 01:06:57.000000000 +0200
+++ ispc-1.18.0.new/.gitlab/.gitlab-ci.yml	1970-01-01 01:00:00.000000000 +0100
@@ -1,7 +0,0 @@
-variables:
-  RUN_ON_MAIN: "1"
-
-include:
-  - project: 'ispc/ispc'
-    ref: gen 
-    file: '.gitlab/.gitlab-ci.yml'
diff -Naur ispc-1.18.0/run_tests.py ispc-1.18.0.new/run_tests.py
--- ispc-1.18.0/run_tests.py	2022-05-06 01:06:57.000000000 +0200
+++ ispc-1.18.0.new/run_tests.py	2022-09-22 20:51:14.496345053 +0200
@@ -490,6 +490,11 @@
                 cc_cmd = "%s -O2 -I. %s test_static.cpp -DTEST_SIG=%d -DTEST_WIDTH=%d %s -o %s" % \
                     (options.compiler_exe, gcc_arch, match, width, obj_name, exe_name)
 
+                # Produce position independent code for both c++ and ispc compilations.
+                # The motivation for this is that Clang 15 changed default
+                # from "-mrelocation-model static" to "-mrelocation-model pic", so
+                # we enable PIC compilation to have it consistently regardless compiler version.
+                cc_cmd += ' -fPIE'
                 if should_fail:
                     cc_cmd += " -DEXPECT_FAILURE"
 
@@ -501,8 +506,7 @@
                              match, width, exe_name)
                     exe_name = "./" + exe_name
                     cc_cmd += " -DTEST_ZEBIN" if options.ispc_output == "ze" else " -DTEST_SPV"
-
-            ispc_cmd = ispc_exe_rel + " --woff %s -o %s --arch=%s --target=%s -DTEST_SIG=%d" % \
+            ispc_cmd = ispc_exe_rel + " --pic --woff %s -o %s --arch=%s --target=%s -DTEST_SIG=%d" % \
                         (filename, obj_name, options.arch, xe_target if target.is_xe() else options.target, match)
 
             if target.is_xe():
diff -Naur ispc-1.18.0/src/ispc.cpp ispc-1.18.0.new/src/ispc.cpp
--- ispc-1.18.0/src/ispc.cpp	2022-05-06 01:06:57.000000000 +0200
+++ ispc-1.18.0.new/src/ispc.cpp	2022-09-22 20:51:14.496345053 +0200
@@ -1991,6 +1991,25 @@
     timeTraceGranularity = 500;
     target = NULL;
     ctx = new llvm::LLVMContext;
+
+// Opaque pointers mode is supported starting from LLVM 14,
+// became default in LLVM 15
+#ifdef ISPC_OPAQUE_PTR_MODE
+#if ISPC_LLVM_VERSION >= ISPC_LLVM_15_0
+// Do nothing, opaque pointers mode is default
+#elif ISPC_LLVM_VERSION == ISPC_LLVM_14_0
+    // Explicitly enable opaque pointers mode for LLVM 14.0
+    ctx->setOpaquePointers(true);
+#else
+    FATAL("Opaque pointers mode is not supported with this LLVM version!");
+#endif
+#else
+#if ISPC_LLVM_VERSION >= ISPC_LLVM_15_0
+    // Explicitly disable opaque pointers starting LLVM 15.0
+    ctx->setOpaquePointers(false);
+#endif
+#endif
+
 #ifdef ISPC_XE_ENABLED
     stackMemSize = 0;
 #endif
diff -Naur ispc-1.18.0/src/ispc_version.h ispc-1.18.0.new/src/ispc_version.h
--- ispc-1.18.0/src/ispc_version.h	2022-05-06 01:06:57.000000000 +0200
+++ ispc-1.18.0.new/src/ispc_version.h	2022-09-22 20:51:14.496345053 +0200
@@ -49,9 +49,10 @@
 #define ISPC_LLVM_13_0 130000
 #define ISPC_LLVM_14_0 140000
 #define ISPC_LLVM_15_0 150000
+#define ISPC_LLVM_16_0 160000
 
 #define OLDEST_SUPPORTED_LLVM ISPC_LLVM_10_0
-#define LATEST_SUPPORTED_LLVM ISPC_LLVM_14_0
+#define LATEST_SUPPORTED_LLVM ISPC_LLVM_16_0
 
 #ifdef __ispc__xstr
 #undef __ispc__xstr
@@ -63,7 +64,7 @@
     __ispc__xstr(LLVM_VERSION_MAJOR) "." __ispc__xstr(LLVM_VERSION_MINOR) "." __ispc__xstr(LLVM_VERSION_PATCH)
 
 #if ISPC_LLVM_VERSION < OLDEST_SUPPORTED_LLVM || ISPC_LLVM_VERSION > LATEST_SUPPORTED_LLVM
-#error "Only LLVM 11.0 - 14.0 are supported"
+#error "Only LLVM 11.0 - 16.0 are supported"
 #endif
 
 #define ISPC_VERSION_STRING                                                                                            \
diff -Naur ispc-1.18.0/src/opt.cpp ispc-1.18.0.new/src/opt.cpp
--- ispc-1.18.0/src/opt.cpp	2022-05-06 01:06:57.000000000 +0200
+++ ispc-1.18.0.new/src/opt.cpp	2022-09-22 20:51:14.497344997 +0200
@@ -84,6 +84,9 @@
 #include <llvm/Transforms/Scalar.h>
 #include <llvm/Transforms/Scalar/GVN.h>
 #include <llvm/Transforms/Scalar/InstSimplifyPass.h>
+#if ISPC_LLVM_VERSION >= ISPC_LLVM_15_0
+#include <llvm/Transforms/Scalar/SimpleLoopUnswitch.h>
+#endif
 #include <llvm/Transforms/Utils.h>
 #include <llvm/Transforms/Utils/BasicBlockUtils.h>
 
@@ -651,7 +654,11 @@
         optPM.add(llvm::createCFGSimplificationPass());
 #endif
 
+#if ISPC_LLVM_VERSION < ISPC_LLVM_15_0
+        // Starting LLVM 15.0 this pass is supported with new pass manager only (217e857)
+        // TODO: switch ISPC to new pass manager: https://github.com/ispc/ispc/issues/2359
         optPM.add(llvm::createArgumentPromotionPass());
+#endif
 
         optPM.add(llvm::createAggressiveDCEPass());
         optPM.add(llvm::createInstructionCombiningPass(), 241);
@@ -729,7 +736,11 @@
         optPM.add(CreateInstructionSimplifyPass());
 
         optPM.add(llvm::createFunctionInliningPass());
+#if ISPC_LLVM_VERSION < ISPC_LLVM_15_0
+        // Starting LLVM 15.0 this pass is supported with new pass manager only (217e857)
+        // TODO: switch ISPC to new pass manager: https://github.com/ispc/ispc/issues/2359
         optPM.add(llvm::createArgumentPromotionPass());
+#endif
 
         optPM.add(llvm::createSROAPass());
 
@@ -743,7 +754,13 @@
         optPM.add(llvm::createReassociatePass());
         optPM.add(llvm::createLoopRotatePass());
         optPM.add(llvm::createLICMPass());
+        // Loop unswitch pass was removed in LLVM 15.0 (fb4113).
+        // Recommended replacement: createSimpleLoopUnswitchLegacyPass
+#if ISPC_LLVM_VERSION < ISPC_LLVM_15_0
         optPM.add(llvm::createLoopUnswitchPass(false));
+#else
+        optPM.add(llvm::createSimpleLoopUnswitchLegacyPass(false));
+#endif
         optPM.add(llvm::createInstructionCombiningPass());
         optPM.add(CreateInstructionSimplifyPass());
         optPM.add(llvm::createIndVarSimplifyPass());
