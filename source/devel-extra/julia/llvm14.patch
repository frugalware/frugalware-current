diff -Naur julia-1.8.1/src/ccall.cpp julia-1.8.1.new/src/ccall.cpp
--- julia-1.8.1/src/ccall.cpp	2022-09-06 17:40:06.000000000 +0200
+++ julia-1.8.1.new/src/ccall.cpp	2022-09-12 15:25:44.962845156 +0200
@@ -1021,18 +1021,22 @@
     else
         abi.reset(new DefaultAbiState());
     sret = 0;
-
+    LLVMContext &LLVMCtx = lrt->getContext();
     if (type_is_ghost(lrt)) {
-        prt = lrt = getVoidTy(lrt->getContext());
-        abi->use_sret(jl_nothing_type, lrt->getContext());
+        prt = lrt = getVoidTy(LLVMCtx);
+        abi->use_sret(jl_nothing_type, LLVMCtx);
     }
     else {
         if (retboxed || jl_is_cpointer_type(rt) || lrt->isPointerTy()) {
             prt = lrt; // passed as pointer
-            abi->use_sret(jl_voidpointer_type, lrt->getContext());
+            abi->use_sret(jl_voidpointer_type, LLVMCtx);
         }
-        else if (abi->use_sret((jl_datatype_t*)rt, lrt->getContext())) {
-            AttrBuilder retattrs = AttrBuilder();
+        else if (abi->use_sret((jl_datatype_t*)rt, LLVMCtx)) {
+#if JL_LLVM_VERSION >= 140000
+            AttrBuilder retattrs(LLVMCtx);
+#else
+            AttrBuilder retattrs;
+#endif
 #if !defined(_OS_WINDOWS_) // llvm used to use the old mingw ABI, skipping this marking works around that difference
             retattrs.addStructRetAttr(lrt);
 #endif
@@ -1043,24 +1047,28 @@
             prt = lrt;
         }
         else {
-            prt = abi->preferred_llvm_type((jl_datatype_t*)rt, true, lrt->getContext());
+            prt = abi->preferred_llvm_type((jl_datatype_t*)rt, true, LLVMCtx);
             if (prt == NULL)
                 prt = lrt;
         }
     }
 
     for (size_t i = 0; i < nccallargs; ++i) {
+#if JL_LLVM_VERSION >= 140000
+        AttrBuilder ab(LLVMCtx);
+#else
         AttrBuilder ab;
+#endif
         jl_value_t *tti = jl_svecref(at, i);
         Type *t = NULL;
         bool isboxed;
         if (jl_is_abstract_ref_type(tti)) {
             tti = (jl_value_t*)jl_voidpointer_type;
-            t = getInt8PtrTy(lrt->getContext());
+            t = getInt8PtrTy(LLVMCtx);
             isboxed = false;
         }
         else if (llvmcall && jl_is_llvmpointer_type(tti)) {
-            t = bitstype_to_llvm(tti, lrt->getContext(), true);
+            t = bitstype_to_llvm(tti, LLVMCtx, true);
             tti = (jl_value_t*)jl_voidpointer_type;
             isboxed = false;
         }
@@ -1077,8 +1085,8 @@
                 }
             }
 
-            t = _julia_struct_to_llvm(ctx, lrt->getContext(), tti, &isboxed, llvmcall);
-            if (t == getVoidTy(lrt->getContext())) {
+            t = _julia_struct_to_llvm(ctx, LLVMCtx, tti, &isboxed, llvmcall);
+            if (t == getVoidTy(LLVMCtx)) {
                 return make_errmsg(fname, i + 1, " type doesn't correspond to a C type");
             }
         }
@@ -1099,7 +1107,7 @@
             pat = PointerType::get(t, AddressSpace::Derived);
         }
         else {
-            pat = abi->preferred_llvm_type((jl_datatype_t*)tti, false, lrt->getContext());
+            pat = abi->preferred_llvm_type((jl_datatype_t*)tti, false, LLVMCtx);
             if (pat == NULL)
                 pat = t;
         }
@@ -1122,20 +1130,24 @@
         fargt.push_back(t);
         fargt_isboxed.push_back(isboxed);
         fargt_sig.push_back(pat);
-        paramattrs.push_back(AttributeSet::get(lrt->getContext(), ab));
+#if JL_LLVM_VERSION >= 140000
+        paramattrs.push_back(AttrBuilder(LLVMCtx, AttributeSet::get(LLVMCtx, ab)));
+#else
+        paramattrs.push_back(AttributeSet::get(LLVMCtx, ab));
+#endif
     }
 
     for (size_t i = 0; i < nccallargs + sret; ++i) {
         const auto &as = paramattrs.at(i);
         if (!as.hasAttributes())
             continue;
-        attributes = addAttributesAtIndex(attributes, lrt->getContext(), i + 1, as);
+        attributes = addAttributesAtIndex(attributes, LLVMCtx, i + 1, as);
     }
     // If return value is boxed it must be non-null.
     if (retboxed)
-        attributes = addRetAttribute(attributes, lrt->getContext(), Attribute::NonNull);
+        attributes = addRetAttribute(attributes, LLVMCtx, Attribute::NonNull);
     if (rt == jl_bottom_type) {
-        attributes = addFnAttribute(attributes, lrt->getContext(), Attribute::NoReturn);
+        attributes = addFnAttribute(attributes, LLVMCtx, Attribute::NoReturn);
     }
     return "";
 }
diff -Naur julia-1.8.1/src/cgutils.cpp julia-1.8.1.new/src/cgutils.cpp
--- julia-1.8.1/src/cgutils.cpp	2022-09-06 17:40:06.000000000 +0200
+++ julia-1.8.1.new/src/cgutils.cpp	2022-09-12 15:25:44.963845101 +0200
@@ -340,7 +340,11 @@
 
 static inline void maybe_mark_argument_dereferenceable(Argument *A, jl_value_t *jt)
 {
+#if JL_LLVM_VERSION >= 140000
+    AttrBuilder B(A->getContext());
+#else
     AttrBuilder B;
+#endif
     B.addAttribute(Attribute::NonNull);
     // The `dereferencable` below does not imply `nonnull` for non addrspace(0) pointers.
     size_t size = dereferenceable_size(jt);
diff -Naur julia-1.8.1/src/codegen.cpp julia-1.8.1.new/src/codegen.cpp
--- julia-1.8.1/src/codegen.cpp	2022-09-06 17:40:06.000000000 +0200
+++ julia-1.8.1.new/src/codegen.cpp	2022-09-12 15:25:44.964845045 +0200
@@ -1962,7 +1962,11 @@
     // upon entry to any function. This achieves compatibility
     // with both MinGW-GCC (which assumes an 16-byte-aligned stack) and
     // i686 Windows (which uses a 4-byte-aligned stack)
+#if JL_LLVM_VERSION >= 140000
+    AttrBuilder attr(F->getContext());
+#else
     AttrBuilder attr;
+#endif
     attr.addStackAlignmentAttr(16);
     F->addAttributes(AttributeList::FunctionIndex, attr);
 #endif
@@ -4919,7 +4923,7 @@
                     jl_cgval_t jlcall_ptr = mark_julia_type(ctx, F, false, jl_voidpointer_type);
                     jl_cgval_t world_age = mark_julia_type(ctx,
                                       tbaa_decorate(ctx.tbaa().tbaa_gcframe,
-                                      ctx.builder.CreateAlignedLoad(ctx.world_age_field, Align(sizeof(size_t)))),
+                                      ctx.builder.CreateAlignedLoad(getSizeTy(ctx.builder.getContext()), ctx.world_age_field, Align(sizeof(size_t)))),
                         false,
                         jl_long_type);
                     jl_cgval_t fptr(ctx.builder.getContext());
@@ -5322,7 +5326,11 @@
         }
 
         // Add the new nest attribute
+#if JL_LLVM_VERSION >= 140000
+        AttrBuilder attrBuilder(M->getContext());
+#else
         AttrBuilder attrBuilder;
+#endif
         attrBuilder.addAttribute(Attribute::Nest);
         newAttributes.emplace_back(it, AttributeSet::get(M->getContext(), attrBuilder));
 
diff -Naur julia-1.8.1/src/llvm-alloc-helpers.cpp julia-1.8.1.new/src/llvm-alloc-helpers.cpp
--- julia-1.8.1/src/llvm-alloc-helpers.cpp	2022-09-06 17:40:06.000000000 +0200
+++ julia-1.8.1.new/src/llvm-alloc-helpers.cpp	2022-09-12 15:20:39.937713870 +0200
@@ -5,6 +5,8 @@
 #include "codegen_shared.h"
 #include "julia_assert.h"
 
+#include <llvm/IR/IntrinsicInst.h>
+
 using namespace llvm;
 using namespace jl_alloc;
 
diff -Naur julia-1.8.1/src/llvm-demote-float16.cpp julia-1.8.1.new/src/llvm-demote-float16.cpp
--- julia-1.8.1/src/llvm-demote-float16.cpp	2022-09-06 17:40:06.000000000 +0200
+++ julia-1.8.1.new/src/llvm-demote-float16.cpp	2022-09-12 15:20:39.937713870 +0200
@@ -18,6 +18,7 @@
 
 #include "support/dtypes.h"
 
+#include <llvm/Pass.h>
 #include <llvm/IR/IRBuilder.h>
 #include <llvm/IR/LegacyPassManager.h>
 #include <llvm/IR/PassManager.h>
diff -Naur julia-1.8.1/src/llvm-late-gc-lowering.cpp julia-1.8.1.new/src/llvm-late-gc-lowering.cpp
--- julia-1.8.1/src/llvm-late-gc-lowering.cpp	2022-09-06 17:40:06.000000000 +0200
+++ julia-1.8.1.new/src/llvm-late-gc-lowering.cpp	2022-09-12 15:20:39.938713815 +0200
@@ -33,6 +33,7 @@
 #include "julia_internal.h"
 #include "julia_assert.h"
 #include "llvm-pass-helpers.h"
+#include <map>
 
 #define DEBUG_TYPE "late_lower_gcroot"
 
diff -Naur julia-1.8.1/src/llvm-lower-handlers.cpp julia-1.8.1.new/src/llvm-lower-handlers.cpp
--- julia-1.8.1/src/llvm-lower-handlers.cpp	2022-09-06 17:40:06.000000000 +0200
+++ julia-1.8.1.new/src/llvm-lower-handlers.cpp	2022-09-12 15:20:39.938713815 +0200
@@ -22,6 +22,7 @@
 #include "julia.h"
 #include "julia_assert.h"
 #include "codegen_shared.h"
+#include <map>
 
 #define DEBUG_TYPE "lower_handlers"
 #undef DEBUG
diff -Naur julia-1.8.1/src/llvm-remove-ni.cpp julia-1.8.1.new/src/llvm-remove-ni.cpp
--- julia-1.8.1/src/llvm-remove-ni.cpp	2022-09-06 17:40:06.000000000 +0200
+++ julia-1.8.1.new/src/llvm-remove-ni.cpp	2022-09-12 15:20:39.938713815 +0200
@@ -2,6 +2,7 @@
 
 #include "llvm-version.h"
 
+#include <llvm/Pass.h>
 #include <llvm/IR/Module.h>
 #include <llvm/IR/PassManager.h>
 #include <llvm/IR/LegacyPassManager.h>
