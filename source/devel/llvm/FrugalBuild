# Compiling Time: 4.74 SBU
# Maintainer: Marius Cirsta <mcirsta@frugalware.org>

: ${USE_DEVEL="n"}

pkgname=llvm
pkgver=6.0.0
pkgrel=3
gcc_ver=7.3.0
url="http://www.llvm.org"
pkgdesc="Low Level Virtual Machine (Compiler , Tools and Libs)"
depends=("libstdc++>=${gcc_ver}")
makedepends=('groff' 'libffi>=3.2.1-2' 'python-sphinx>=1.4.4-2' 'python-requests' 'ocaml-ctypes>=0.11.3-2' \
	'ocaml-findlib>=1.7.1-2' 'ncurses>=6.0-16' 'lib32-libffi' 'lib32-libxml2' \
	'typing' 'sphinx-websupport' 'certifi' 'python-idna' 'chardet3')
## tc bump -- we need for rebuilds foo>=x-y sytle to be sure is rebuilt with
## the right versions of the packages
makedepends=("${makedepends[@]}" "libstdc++>=${gcc_ver}" 'binutils>=2.30.0-5' 'glibc>=2.26.9000-3')
rodepends=("$pkgname-libs")
groups=('devel')
archs=("x86_64")

if Fuse DEVEL; then
        unset source sha1sums
        pkgver=999.g61d9d49
        pkgrel=0
        _F_scm_type="git"
        _F_scm_url="https://github.com/llvm-mirror/llvm.git"
	_F_cd_path="llvm"
        Finclude scm
else
	source=(http://llvm.org/releases/$pkgver/$pkgname-$pkgver.src.tar.xz \
		http://llvm.org/releases/$pkgver/cfe-$pkgver.src.tar.xz \
		http://llvm.org/releases/$pkgver/libcxx-$pkgver.src.tar.xz \
		http://llvm.org/releases/$pkgver/libcxxabi-$pkgver.src.tar.xz \
		http://releases.llvm.org/$pkgver/lld-$pkgver.src.tar.xz)
	up2date="Flastarchive $url/releases/download.html .src.tar.xz"
	_F_archive_ver="${pkgver}.src"
sha1sums=('f61e0a35feb76644ba160a413ee209dd24c88f47' \
          '4cc7bef72fda70ac5e065ca0ae2d66957abe6f2a' \
          'a9ad3fd58c9e98093c07a3373bd2f69f1696415d' \
          'e9a5fa140dc9cb92f4df38488dabe23add108770' \
          '983f3bcbf289991cf8580256851c379ec7687e71')

fi

_F_cross32_delete=('usr/docs' 'usr/share' \
	'usr/lib/ocaml' 'usr/libexec/')
Finclude cross32

subpkgs=("clang")
subdescs=("C/C++ language family frontend for LLVM")
subdepends=("libxml2 libffi")
subrodepends=("$pkgname>=$pkgver $pkgname-libs>=$pkgver")
subgroups=('devel-extra')
subarchs=("x86_64")

subpkgs+=("lib32-clang")
subdescs+=("C/C++ language family frontend for LLVM (32-bit)")
subdepends+=("lib32-libxml2 lib32-libffi")
subrodepends+=("lib32-${pkgname}>=$pkgver lib32-${pkgname}-libs>=$pkgver")
subgroups+=('lib32-extra')
subarchs+=("x86_64")

subpkgs+=("$pkgname-ocaml")
subdescs+=("OCaml bindings for LLVM")
subdepends+=("ocaml>=4.03.0-3")
subrodepends+=("$pkgname>=$pkgver")
subgroups+=('devel-extra')
subarchs+=("x86_64")

subpkgs+=("$pkgname-libs")
subdescs+=("LLVM shared libs")
subdepends+=("ncurses>=6.0-16 libedit>=20160903_3.1-4")
subrodepends+=("")
subgroups+=('lib')
subarchs+=("x86_64")

subpkgs+=("libc++")
subdescs+=("A new implementation of the C++ standard library")
subdepends+=("libgcc")
subrodepends+=("")
subgroups+=('lib-extra')
subarchs+=("x86_64")

subpkgs+=("lib32-libc++")
subdescs+=("A new implementation of the C++ standard library")
subdepends+=("libgcc>=${gcc_ver}")
subrodepends+=("")
subgroups+=('lib-extra')
subarchs+=("x86_64")

subpkgs+=("lib32-${pkgname}-libs")
subdescs+=("LLVM shared libs (32-bit)")
subdepends+=("lib32-ncurses>=6.0-12 lib32-libedit>=20160903_3.1")
subrodepends+=("")
subgroups+=('lib32-extra')
subarchs+=("x86_64")

subpkgs+=("lib32-${pkgname}")
subdescs+=("Low Level Virtual Machine (Compiler , Tools and Libs) (32-bit)")
subdepends+=("libstdc++>=${gcc_ver}")
subrodepends+=("")
subgroups+=('lib32-extra')
subarchs+=("x86_64")

# Common CMake options
_F_cmake_type="Release"
_common_cmake_confopts="	-DCMAKE_INSTALL_PREFIX=/usr \
				-DLLVM_BUILD_LLVM_DYLIB=ON \
				-DLLVM_DYLIB_EXPORT_ALL=ON \
				-DLLVM_LINK_LLVM_DYLIB=ON \
				-DLLVM_ENABLE_RTTI=ON \
				-DLLVM_INSTALL_UTILS=ON \
				-DLLVM_ENABLE_FFI=ON \
				-DLLVM_BUILD_DOCS=ON \
				-DLLVM_ENABLE_SPHINX=OFF \
				-DLLVM_ENABLE_DOXYGEN=OFF \
				-DLLVM_HOST_TRIPLE=${CARCH}-frugalware-linux \
				-DLLVM_DEFAULT_TARGET_TRIPLE=${CARCH}-frugalware-linux \
				-DC_INCLUDE_DIRS=/usr/local/include:/usr/$CHOST/include:/usr/include/c++/${gcc_ver}:/usr/include/c++/${gcc_ver}/backward:/usr/include/c++/${gcc_ver}/${CHOST}-frugalware-linux:/usr/include \
				-DLLVM_BINUTILS_INCDIR=/usr/include \
				-DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=ON \
				-DLIBCXX_INSTALL_EXPERIMENTAL_LIBRARY=OFF"
Finclude cmake
options+=('static')
_Fbuild_no_patch=yes


build() {
        if Fuse DEVEL; then
                Funpack_scm
        fi

	Fcd
	# clang must be copied here to build with llvm
	Fexec rm -rf tools/clang

        if Fuse DEVEL; then
                Fexec cd tools
                git clone --depth=1 https://github.com/llvm-mirror/clang.git
                Fexec cd ..
        else

		Fexec mv -f ../cfe-${_F_archive_ver}/ tools/clang
		Fexec mv -f ../libcxx-${_F_archive_ver}/ projects/libcxx
		Fexec mv -f ../libcxxabi-${_F_archive_ver}/ projects/libcxxabi
		Fexec mv -f ../lld-${_F_archive_ver}/ tools/lld
	fi

        Fcross32_prepare
        Fcross32_copy_source

	## 32-bit CMake options
	_F_cmake_confopts+="	${_common_cmake_confopts}
				-DLLVM_LIBDIR_SUFFIX=32 \
				-DCMAKE_CXX_FLAGS:STRING=-m32 \
				-DFFI_INCLUDE_DIR=$(pkg-config --cflags-only-I libffi | cut -c3-) \
				-DLLVM_TARGET_ARCH:STRING=i686"

	sed -i '/^[[:blank:]]*find_library(FFI_LIBRARY_PATH/i\list(INSERT CMAKE_LIBRARY_PATH 0 /usr/lib32)' cmake/config-ix.cmake

        CMake_make

        Fexec make -C ../docs -f Makefile.sphinx man || Fdie
        Fexec make -C ../docs -f Makefile.sphinx html || Fdie
        Fexec make -C ../tools/clang/docs -f Makefile.sphinx html || Fdie
        Fexec make -C ../tools/clang/docs -f Makefile.sphinx man || Fdie

        Fexec make ocaml_doc
	CMake_install

        Fcross32_copy_back_source
        Fcross32_reset_and_fix
	Fcross32_delete_empty

        Fmkdir usr/i686-frugalware-linux/
        Fmv usr/include usr/i686-frugalware-linux/
        Fmv usr/bin usr/i686-frugalware-linux/

        Fsplit lib32-clang usr/i686-frugalware-linux/bin/clang*
        Fsplit lib32-clang usr/i686-frugalware-linux/bin/c-index-test
        Fsplit lib32-clang usr/i686-frugalware-linux/include/clang*
        Fsplit lib32-clang usr/lib32/clang/
        Fsplit lib32-clang usr/lib32/libclang*

	Frm usr/include
	Fmkdir usr/bin/
	Fmv usr/i686-frugalware-linux/bin/llvm-config usr/bin/llvm-config32
        Fsplit lib32-libc++ usr/lib32/libc++*
	Fsplit lib32-libc++ usr/i686-frugalware-linux/include/c++/

	Fsplit lib32-$pkgname-libs usr/lib32/\*.so\*

	Fsplit lib32-$pkgname /\*

	## 64-bit CMake options
	_F_cmake_confopts="    ${_common_cmake_confopts} \
				-DFFI_INCLUDE_DIR=$(pkg-config --cflags-only-I libffi | cut -c3-)"
        CMake_make

        Fexec make -C ../docs -f Makefile.sphinx man || Fdie
        Fexec make -C ../docs -f Makefile.sphinx html || Fdie
        Fexec make -C ../tools/clang/docs -f Makefile.sphinx html || Fdie
        Fexec make -C ../tools/clang/docs -f Makefile.sphinx man || Fdie

        Fexec make ocaml_doc
        CMake_install

	## libexec stuff
	Fmkdir usr/lib/$pkgname
	Fsed 'libexec' 'lib/llvm' $Fdestdir/usr/bin/scan-build
	Fmv usr/libexec/* usr/lib/llvm/
	Frm usr/libexec
	# Install man pages
	Fmkdir usr/share/man/man1
	Fcp ${_F_cd_path}/docs/_build/man/*.1 usr/share/man/man1/
	Fcp ${_F_cd_path}/tools/clang/docs/_build/man/*.1 usr/share/man/man1/


	# Install html docs
	Fmkdir usr/share/doc/$pkgname-$pkgver/html/
	Fcp ${_F_cd_path}/docs/_build/html/* usr/share/doc/$pkgname-$pkgver/html/
	Frm usr/share/doc/$pkgname-$pkgver/html/_sources

	# Install html docs of clang
	Fmkdir usr/share/doc/$pkgname-$pkgver/html/clang
	Fcp ${_F_cd_path}/tools/clang/docs/_build/html/* usr/share/doc/$pkgname-$pkgver/html/clang
	Frm usr/share/doc/$pkgname-$pkgver/html/clang/_sources

	# Install html docs of llvm-ocaml
	Fmkdir usr/share/doc/$pkgname-$pkgver/ocamldoc
	Fcp ${_F_cd_path}/${_F_cmake_build_dir}/docs/ocamldoc/html/* usr/share/doc/$pkgname-$pkgver/ocamldoc
	Frm usr/docs


	Fsplit clang usr/bin/clang*
	Fsplit clang usr/bin/c-index-test
	Fsplit clang usr/include/clang*
	Fsplit clang usr/lib/clang/
	Fsplit clang usr/lib/libclang*
	Fsplit clang usr/share/man/man1/clang*
	Fsplit clang usr/share/doc/$pkgname-$pkgver/html/clang/

	Fsplit $pkgname-ocaml usr/lib/ocaml/
	Fsplit $pkgname-ocaml usr/lib/cmake/llvm/{Find,Add}OCaml.cmake
	Fsplit $pkgname-ocaml usr/share/doc/$pkgname-$pkgver/html/tutorial/OCamlLangImpl*.html

	Fsplit libc++ usr/lib/libc++*
	Fsplit libc++ usr/include/c++/

	Fsplit $pkgname-libs usr/lib/*.so*
}

# optimization OK
