diff -Naur alicevision/INSTALL.md alicevision.new/INSTALL.md
--- alicevision/INSTALL.md	2024-05-14 15:34:54.067868922 +0200
+++ alicevision.new/INSTALL.md	2024-05-14 15:35:10.482002677 +0200
@@ -81,7 +81,7 @@
 set VCPKG_ROOT=%cd%
 
 vcpkg install ^
-          boost-algorithm boost-accumulators boost-atomic boost-container boost-date-time boost-exception boost-filesystem boost-geometry boost-graph boost-json boost-log ^
+          boost-algorithm boost-accumulators boost-atomic boost-container boost-date-time boost-exception boost-geometry boost-graph boost-json boost-log ^
           boost-program-options boost-property-tree boost-ptr-container boost-regex boost-serialization boost-system boost-test boost-thread boost-timer ^
           lz4 ^
           liblemon ^
diff -Naur alicevision/src/aliceVision/calibration/CMakeLists.txt alicevision.new/src/aliceVision/calibration/CMakeLists.txt
--- alicevision/src/aliceVision/calibration/CMakeLists.txt	2024-05-14 15:34:54.369871384 +0200
+++ alicevision.new/src/aliceVision/calibration/CMakeLists.txt	2024-05-14 15:35:10.468002563 +0200
@@ -31,7 +31,6 @@
     aliceVision_image
     aliceVision_system
     aliceVision_dataio
-    Boost::filesystem
     Boost::program_options
     Boost::boost
     Boost::json
diff -Naur alicevision/src/aliceVision/calibration/exportData.cpp alicevision.new/src/aliceVision/calibration/exportData.cpp
--- alicevision/src/aliceVision/calibration/exportData.cpp	2024-05-14 15:34:54.071868955 +0200
+++ alicevision.new/src/aliceVision/calibration/exportData.cpp	2024-05-14 15:35:10.468002563 +0200
@@ -13,8 +13,7 @@
 #include <opencv2/calib3d.hpp>
 #include <opencv2/imgcodecs.hpp>
 
-#include <boost/filesystem/path.hpp>
-
+#include <filesystem>
 #include <fstream>
 #include <iostream>
 #include <ctime>
@@ -59,7 +58,7 @@
         // drawChessboardCorners(view, boardSize, cv::Mat(pointbuf), found);
 
         aliceVision::camera::UndistortImage(inputImage, &camera, outputImage, static_cast<unsigned char>(0));
-        const boost::filesystem::path imagePath = boost::filesystem::path(debugFolder) / (std::to_string(currentFrame) + suffix);
+        const std::filesystem::path imagePath = std::filesystem::path(debugFolder) / (std::to_string(currentFrame) + suffix);
         aliceVision::image::writeImage(imagePath.string(), outputImage, image::ImageWriteOptions());
     }
     ALICEVISION_LOG_DEBUG("... finished");
diff -Naur alicevision/src/aliceVision/dataio/CMakeLists.txt alicevision.new/src/aliceVision/dataio/CMakeLists.txt
--- alicevision/src/aliceVision/dataio/CMakeLists.txt	2024-05-14 15:34:54.370871392 +0200
+++ alicevision.new/src/aliceVision/dataio/CMakeLists.txt	2024-05-14 15:35:10.469002571 +0200
@@ -28,7 +28,6 @@
     aliceVision_sfmData
     aliceVision_sfmDataIO
     aliceVision_system
-    Boost::filesystem
     Boost::boost
 )
 
diff -Naur alicevision/src/aliceVision/dataio/FeedProvider.cpp alicevision.new/src/aliceVision/dataio/FeedProvider.cpp
--- alicevision/src/aliceVision/dataio/FeedProvider.cpp	2024-05-14 15:34:54.076868996 +0200
+++ alicevision.new/src/aliceVision/dataio/FeedProvider.cpp	2024-05-14 15:35:10.469002571 +0200
@@ -12,8 +12,7 @@
     #include "VideoFeed.hpp"
 #endif
 
-#include <boost/filesystem.hpp>
-
+#include <filesystem>
 #include <exception>
 #include <iostream>
 #include <string>
@@ -28,15 +27,15 @@
     _isLiveFeed(false),
     _isSfmData(false)
 {
-    namespace bf = boost::filesystem;
+    namespace fs = std::filesystem;
     if (feedPath.empty())
     {
         throw std::invalid_argument("Empty filepath.");
     }
-    if (bf::is_regular_file(bf::path(feedPath)))
+    if (fs::is_regular_file(fs::path(feedPath)))
     {
         // Image or video file
-        const std::string extension = bf::path(feedPath).extension().string();
+        const std::string extension = fs::path(feedPath).extension().string();
         if (SfMDataFeed::isSupported(extension))
         {
             _feeder.reset(new SfMDataFeed(feedPath, calibPath));
@@ -67,7 +66,7 @@
     }
     // parent_path() returns "/foo/bar/" when input path equals to "/foo/bar/"
     // if the user just gives the relative path as "bar", throws invalid argument exception.
-    else if (bf::is_directory(bf::path(feedPath)) || bf::is_directory(bf::path(feedPath).parent_path()))
+    else if (fs::is_directory(fs::path(feedPath)) || fs::is_directory(fs::path(feedPath).parent_path()))
     {
         // Folder or sequence of images
         _feeder.reset(new ImageFeed(feedPath, calibPath));
diff -Naur alicevision/src/aliceVision/dataio/ImageFeed.cpp alicevision.new/src/aliceVision/dataio/ImageFeed.cpp
--- alicevision/src/aliceVision/dataio/ImageFeed.cpp	2024-05-14 15:34:54.076868996 +0200
+++ alicevision.new/src/aliceVision/dataio/ImageFeed.cpp	2024-05-14 15:35:10.469002571 +0200
@@ -8,10 +8,10 @@
 #include <aliceVision/image/io.hpp>
 #include <aliceVision/utils/regexFilter.hpp>
 
-#include <boost/filesystem.hpp>
 #include <boost/algorithm/string/case_conv.hpp>
 #include <boost/algorithm/string/replace.hpp>
 
+#include <filesystem>
 #include <queue>
 #include <iostream>
 #include <fstream>
@@ -86,12 +86,12 @@
   : _isInit(false),
     _withCalibration(false)
 {
-    namespace bf = boost::filesystem;
+    namespace fs = std::filesystem;
     //    ALICEVISION_LOG_DEBUG(imagePath);
     // if it is a json, calibPath is neglected
-    if (bf::is_regular_file(imagePath))
+    if (fs::is_regular_file(imagePath))
     {
-        const std::string ext = bf::path(imagePath).extension().string();
+        const std::string ext = fs::path(imagePath).extension().string();
         // if it is an image file
         if (image::isSupported(ext) && !image::isVideoExtension(ext))
         {
@@ -111,7 +111,7 @@
             {
                 // compose the file name as the base path of the inputPath and
                 // the filename just read
-                const std::string filename = (bf::path(imagePath).parent_path() / line).string();
+                const std::string filename = (fs::path(imagePath).parent_path() / line).string();
                 _images.push_back(filename);
             }
             // Close file
@@ -125,16 +125,16 @@
             throw std::invalid_argument("File or mode not yet implemented");
         }
     }
-    else if (bf::is_directory(imagePath) || bf::is_directory(bf::path(imagePath).parent_path()))
+    else if (fs::is_directory(imagePath) || fs::is_directory(fs::path(imagePath).parent_path()))
     {
         std::string folder = imagePath;
         // Recover the pattern : img.@.png (for example)
         std::string filePattern;
         std::regex re;
-        if (!bf::is_directory(imagePath))
+        if (!fs::is_directory(imagePath))
         {
-            filePattern = bf::path(imagePath).filename().string();
-            folder = bf::path(imagePath).parent_path().string();
+            filePattern = fs::path(imagePath).filename().string();
+            folder = fs::path(imagePath).parent_path().string();
             ALICEVISION_LOG_DEBUG("filePattern: " << filePattern);
             std::string regexStr = filePattern;
             re = utils::filterToRegex(regexStr);
@@ -145,12 +145,12 @@
         }
         ALICEVISION_LOG_DEBUG("directory feedImage");
         // if it is a directory, list all the images and add them to the list
-        bf::directory_iterator iterator(folder);
+        fs::directory_iterator iterator(folder);
         // since some OS will provide the files in a random order, first store them
         // in a priority queue and then fill the _image queue with the alphabetical
         // order from the priority queue
         std::priority_queue<std::string, std::vector<std::string>, std::greater<std::string>> tmpSorter;
-        for (; iterator != bf::directory_iterator(); ++iterator)
+        for (; iterator != fs::directory_iterator(); ++iterator)
         {
             // get the extension of the current file to check whether it is an image
             const std::string ext = iterator->path().extension().string();
diff -Naur alicevision/src/aliceVision/depthMap/CMakeLists.txt alicevision.new/src/aliceVision/depthMap/CMakeLists.txt
--- alicevision/src/aliceVision/depthMap/CMakeLists.txt	2024-05-14 15:34:54.370871392 +0200
+++ alicevision.new/src/aliceVision/depthMap/CMakeLists.txt	2024-05-14 15:35:10.469002571 +0200
@@ -128,7 +128,6 @@
     aliceVision_mvsData
     aliceVision_mvsUtils
     aliceVision_system
-    Boost::filesystem
     assimp::assimp
     ${CUDA_CUDADEVRT_LIBRARY}
     ${CUDA_CUBLAS_LIBRARIES} #TODO shouldn't be here, but required to build on some machines
diff -Naur alicevision/src/aliceVision/depthMap/DepthMapEstimator.cpp alicevision.new/src/aliceVision/depthMap/DepthMapEstimator.cpp
--- alicevision/src/aliceVision/depthMap/DepthMapEstimator.cpp	2024-05-14 15:34:54.077869004 +0200
+++ alicevision.new/src/aliceVision/depthMap/DepthMapEstimator.cpp	2024-05-14 15:35:10.470002580 +0200
@@ -22,10 +22,6 @@
 #include <aliceVision/depthMap/cuda/host/DeviceStreamManager.hpp>
 #include <aliceVision/depthMap/cuda/planeSweeping/deviceDepthSimilarityMap.hpp>
 
-#include <boost/filesystem.hpp>
-
-namespace fs = boost::filesystem;
-
 namespace aliceVision {
 namespace depthMap {
 
diff -Naur alicevision/src/aliceVision/depthMap/NormalMapEstimator.cpp alicevision.new/src/aliceVision/depthMap/NormalMapEstimator.cpp
--- alicevision/src/aliceVision/depthMap/NormalMapEstimator.cpp	2024-05-14 15:34:54.077869004 +0200
+++ alicevision.new/src/aliceVision/depthMap/NormalMapEstimator.cpp	2024-05-14 15:35:10.470002580 +0200
@@ -15,9 +15,9 @@
 #include <aliceVision/depthMap/cuda/host/DeviceCache.hpp>
 #include <aliceVision/depthMap/cuda/planeSweeping/deviceDepthSimilarityMap.hpp>
 
-#include <boost/filesystem.hpp>
+#include <filesystem>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace depthMap {
diff -Naur alicevision/src/aliceVision/feature/CMakeLists.txt alicevision.new/src/aliceVision/feature/CMakeLists.txt
--- alicevision/src/aliceVision/feature/CMakeLists.txt	2024-05-14 15:34:54.371871400 +0200
+++ alicevision.new/src/aliceVision/feature/CMakeLists.txt	2024-05-14 15:35:10.470002580 +0200
@@ -79,7 +79,6 @@
     aliceVision_gpu
     vlsift
   PRIVATE_LINKS
-    Boost::filesystem
     Boost::boost
 )
 
diff -Naur alicevision/src/aliceVision/feature/ImageDescriber.cpp alicevision.new/src/aliceVision/feature/ImageDescriber.cpp
--- alicevision/src/aliceVision/feature/ImageDescriber.cpp	2024-05-14 15:34:54.078869012 +0200
+++ alicevision.new/src/aliceVision/feature/ImageDescriber.cpp	2024-05-14 15:35:10.470002580 +0200
@@ -12,6 +12,7 @@
 #include <aliceVision/feature/sift/ImageDescriber_SIFT_vlfeatFloat.hpp>
 #include <aliceVision/feature/sift/ImageDescriber_DSPSIFT_vlfeat.hpp>
 #include <aliceVision/feature/akaze/ImageDescriber_AKAZE.hpp>
+#include <aliceVision/utils/filesIO.hpp>
 
 #if ALICEVISION_IS_DEFINED(ALICEVISION_HAVE_CCTAG)
     #include <aliceVision/feature/cctag/ImageDescriber_CCTAG.hpp>
@@ -28,12 +29,11 @@
     #include <aliceVision/feature/openCV/ImageDescriber_AKAZE_OCV.hpp>
 #endif  // ALICEVISION_HAVE_OPENCV
 
-#include <boost/filesystem.hpp>
-
 #include <algorithm>
+#include <filesystem>
 #include <stdexcept>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace feature {
@@ -191,9 +191,9 @@
     const fs::path bFeatsPath = fs::path(sfileNameFeats);
     const fs::path bDescsPath = fs::path(sfileNameDescs);
     const std::string tmpFeatsPath =
-      (bFeatsPath.parent_path() / bFeatsPath.stem()).string() + "." + fs::unique_path().string() + bFeatsPath.extension().string();
+      (bFeatsPath.parent_path() / bFeatsPath.stem()).string() + "." + utils::generateUniqueFilename() + bFeatsPath.extension().string();
     const std::string tmpDescsPath =
-      (bDescsPath.parent_path() / bDescsPath.stem()).string() + "." + fs::unique_path().string() + bDescsPath.extension().string();
+      (bDescsPath.parent_path() / bDescsPath.stem()).string() + "." + utils::generateUniqueFilename() + bDescsPath.extension().string();
 
     regions->Save(tmpFeatsPath, tmpDescsPath);
 
diff -Naur alicevision/src/aliceVision/featureEngine/CMakeLists.txt alicevision.new/src/aliceVision/featureEngine/CMakeLists.txt
--- alicevision/src/aliceVision/featureEngine/CMakeLists.txt	2024-05-14 15:34:54.371871400 +0200
+++ alicevision.new/src/aliceVision/featureEngine/CMakeLists.txt	2024-05-14 15:35:10.470002580 +0200
@@ -16,6 +16,4 @@
     aliceVision_image
     aliceVision_sfmData
     aliceVision_system
-  PRIVATE_LINKS
-    Boost::filesystem
 )
diff -Naur alicevision/src/aliceVision/featureEngine/FeatureExtractor.cpp alicevision.new/src/aliceVision/featureEngine/FeatureExtractor.cpp
--- alicevision/src/aliceVision/featureEngine/FeatureExtractor.cpp	2024-05-14 15:34:54.081869036 +0200
+++ alicevision.new/src/aliceVision/featureEngine/FeatureExtractor.cpp	2024-05-14 15:35:10.471002588 +0200
@@ -8,10 +8,11 @@
 #include <aliceVision/image/io.hpp>
 #include <aliceVision/system/MemoryInfo.hpp>
 #include <aliceVision/alicevision_omp.hpp>
-#include <boost/filesystem.hpp>
+
+#include <filesystem>
 #include <iomanip>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace featureEngine {
diff -Naur alicevision/src/aliceVision/fuseCut/CMakeLists.txt alicevision.new/src/aliceVision/fuseCut/CMakeLists.txt
--- alicevision/src/aliceVision/fuseCut/CMakeLists.txt	2024-05-14 15:34:54.371871400 +0200
+++ alicevision.new/src/aliceVision/fuseCut/CMakeLists.txt	2024-05-14 15:35:10.471002588 +0200
@@ -32,7 +32,6 @@
     aliceVision_sfmData
     aliceVision_system
     Geogram::geogram
-    Boost::filesystem
     Boost::graph
     Boost::container
   PRIVATE_LINKS
diff -Naur alicevision/src/aliceVision/fuseCut/DelaunayGraphCut.cpp alicevision.new/src/aliceVision/fuseCut/DelaunayGraphCut.cpp
--- alicevision/src/aliceVision/fuseCut/DelaunayGraphCut.cpp	2024-05-14 15:34:54.082869045 +0200
+++ alicevision.new/src/aliceVision/fuseCut/DelaunayGraphCut.cpp	2024-05-14 15:35:10.472002596 +0200
@@ -26,10 +26,10 @@
 
 #include <geogram/points/kd_tree.h>
 
-#include <boost/filesystem.hpp>
 #include <boost/filesystem/operations.hpp>
 
 #include <cmath>
+#include <filesystem>
 #include <random>
 #include <stdexcept>
 
@@ -41,7 +41,7 @@
 namespace aliceVision {
 namespace fuseCut {
 
-namespace bfs = boost::filesystem;
+namespace fs = std::filesystem;
 
 // #define USE_GEOGRAM_KDTREE 1
 
@@ -1189,7 +1189,7 @@
                 const std::string nmodMapFilepath = getFileNameFromIndex(_mp, c, mvsUtils::EFileType::nmodMap);
                 // If we have an nModMap in input (from depthmapfilter) use it,
                 // else init with a constant value.
-                if (boost::filesystem::exists(nmodMapFilepath))
+                if (fs::exists(nmodMapFilepath))
                 {
                     image::readImage(nmodMapFilepath, numOfModalsMap, image::EImageColorSpace::NO_CONVERSION);
                     if (numOfModalsMap.Width() != width || numOfModalsMap.Height() != height)
@@ -3892,7 +3892,7 @@
         mesh->tris.push_back(t);
     }
 
-    const std::string tempDirPath = boost::filesystem::temp_directory_path().generic_string();
+    const std::string tempDirPath = fs::temp_directory_path().generic_string();
     mesh->save(tempDirPath + "/" + filename);
     meshf->save(tempDirPath + "/" + filename);
 }
@@ -3956,7 +3956,7 @@
 
 void DelaunayGraphCut::writeScoreInCsv(const std::string& filePath, const size_t& sizeLimit)
 {
-    assert(boost::filesystem::path(filePath).extension().string() == std::string(".csv"));
+    assert(fs::path(filePath).extension().string() == std::string(".csv"));
 
     const unsigned int seed = (unsigned int)_mp.userParams.get<unsigned int>("delaunaycut.seed", 0);
     std::mt19937 generator(seed != 0 ? seed : std::random_device{}());
diff -Naur alicevision/src/aliceVision/fuseCut/DelaunayGraphCut_test.cpp alicevision.new/src/aliceVision/fuseCut/DelaunayGraphCut_test.cpp
--- alicevision/src/aliceVision/fuseCut/DelaunayGraphCut_test.cpp	2024-05-14 15:34:54.082869045 +0200
+++ alicevision.new/src/aliceVision/fuseCut/DelaunayGraphCut_test.cpp	2024-05-14 15:35:10.472002596 +0200
@@ -8,8 +8,6 @@
 #include <aliceVision/multiview/NViewDataSet.hpp>
 #include <aliceVision/fuseCut/DelaunayGraphCut.hpp>
 
-#include <boost/filesystem.hpp>
-
 #include <boost/math/constants/constants.hpp>
 
 #include <string>
@@ -19,6 +17,8 @@
 #include <boost/test/unit_test.hpp>
 #include <boost/test/tools/floating_point_comparison.hpp>
 
+#include <filesystem>
+
 using namespace aliceVision;
 using namespace aliceVision::fuseCut;
 using namespace aliceVision::sfmData;
@@ -82,7 +82,7 @@
     for (int i = 0; i < cams.size(); ++i)
         cams[i] = i;
 
-    const std::string tempDirPath = boost::filesystem::temp_directory_path().generic_string();
+    const std::string tempDirPath = std::filesystem::temp_directory_path().generic_string();
 
     DelaunayGraphCut delaunayGC(mp);
     ALICEVISION_LOG_TRACE("Creating dense point cloud witout support pts.");
diff -Naur alicevision/src/aliceVision/fuseCut/Fuser.cpp alicevision.new/src/aliceVision/fuseCut/Fuser.cpp
--- alicevision/src/aliceVision/fuseCut/Fuser.cpp	2024-05-14 15:34:54.083869053 +0200
+++ alicevision.new/src/aliceVision/fuseCut/Fuser.cpp	2024-05-14 15:35:10.473002604 +0200
@@ -18,16 +18,17 @@
 #include <aliceVision/image/io.hpp>
 #include <aliceVision/image/imageAlgo.hpp>
 
-#include <boost/filesystem.hpp>
 #include <boost/accumulators/accumulators.hpp>
 #include <boost/accumulators/statistics.hpp>
 
+#include <filesystem>
+
 #include <iostream>
 
 namespace aliceVision {
 namespace fuseCut {
 
-namespace bfs = boost::filesystem;
+namespace fs = std::filesystem;
 
 unsigned long computeNumberOfAllPoints(const mvsUtils::MultiViewParams& mp, int scale)
 {
@@ -137,7 +138,7 @@
 // minNumOfModals number of other cams including this cam ... minNumOfModals /in 2,3,...
 bool Fuser::filterGroupsRC(int rc, float pixToleranceFactor, int pixSizeBall, int pixSizeBallWSP, int nNearestCams)
 {
-    if (bfs::exists(getFileNameFromIndex(_mp, rc, mvsUtils::EFileType::nmodMap)))
+    if (fs::exists(getFileNameFromIndex(_mp, rc, mvsUtils::EFileType::nmodMap)))
     {
         return true;
     }
@@ -685,9 +686,9 @@
     ALICEVISION_LOG_INFO("generating temp files.");
     std::string depthMapsPtsSimsTmpDir = tmpDir + "depthMapsPtsSimsTmp/";
 
-    if (!bfs::is_directory(depthMapsPtsSimsTmpDir))
+    if (!fs::is_directory(depthMapsPtsSimsTmpDir))
     {
-        bfs::create_directory(depthMapsPtsSimsTmpDir);
+        fs::create_directory(depthMapsPtsSimsTmpDir);
 
         const int scaleuse = 1;
 
@@ -846,7 +847,7 @@
         remove(ptsfn.c_str());
         remove(simsfn.c_str());
     }
-    bfs::remove_all(depthMapsPtsSimsTmpDir);
+    fs::remove_all(depthMapsPtsSimsTmpDir);
 }
 
 }  // namespace fuseCut
diff -Naur alicevision/src/aliceVision/fuseCut/LargeScale.cpp alicevision.new/src/aliceVision/fuseCut/LargeScale.cpp
--- alicevision/src/aliceVision/fuseCut/LargeScale.cpp	2024-05-14 15:34:54.083869053 +0200
+++ alicevision.new/src/aliceVision/fuseCut/LargeScale.cpp	2024-05-14 15:35:10.473002604 +0200
@@ -10,12 +10,12 @@
 #include <aliceVision/mvsUtils/fileIO.hpp>
 #include <aliceVision/fuseCut/DelaunayGraphCut.hpp>
 
-#include <boost/filesystem.hpp>
+#include <filesystem>
 
 namespace aliceVision {
 namespace fuseCut {
 
-namespace bfs = boost::filesystem;
+namespace fs = std::filesystem;
 
 LargeScale::LargeScale(mvsUtils::MultiViewParams* _mp, const std::string& _spaceFolderName)
   : mp(_mp),
@@ -23,15 +23,15 @@
     spaceVoxelsFolderName(_spaceFolderName + "_data/"),
     spaceFileName(spaceFolderName + "/space.txt")
 {
-    bfs::create_directory(spaceFolderName);
-    bfs::create_directory(spaceVoxelsFolderName);
+    fs::create_directory(spaceFolderName);
+    fs::create_directory(spaceVoxelsFolderName);
 
     doVisualize = mp->userParams.get<bool>("LargeScale.doVisualizeOctreeTracks", false);
 }
 
 LargeScale::~LargeScale() {}
 
-bool LargeScale::isSpaceSaved() { return bfs::exists(spaceFileName); }
+bool LargeScale::isSpaceSaved() { return fs::exists(spaceFileName); }
 
 void LargeScale::saveSpaceToFile()
 {
@@ -159,7 +159,7 @@
         ReconstructionPlan->reserve(1000000);
 
         std::string tmpdir = spaceFolderName + "tmp/";
-        bfs::create_directory(tmpdir);
+        fs::create_directory(tmpdir);
         VoxelsGrid* vg = new VoxelsGrid(dimensions, &space[0], mp, tmpdir, doVisualize);
         int maxlevel = 0;
         vg->generateTracksForEachVoxel(ReconstructionPlan, maxOcTreeDim, maxPts, 1, maxlevel, depthMapsPtsSimsTmpDir);
@@ -181,7 +181,7 @@
         delete vgnew;
         delete vg;
 
-        bfs::remove_all(tmpdir);
+        fs::remove_all(tmpdir);
 
         deleteTempPtsSimsFiles(*mp, depthMapsPtsSimsTmpDir);
 
diff -Naur alicevision/src/aliceVision/fuseCut/ReconstructionPlan.cpp alicevision.new/src/aliceVision/fuseCut/ReconstructionPlan.cpp
--- alicevision/src/aliceVision/fuseCut/ReconstructionPlan.cpp	2024-05-14 15:34:54.084869061 +0200
+++ alicevision.new/src/aliceVision/fuseCut/ReconstructionPlan.cpp	2024-05-14 15:35:10.473002604 +0200
@@ -13,12 +13,12 @@
 #include <aliceVision/fuseCut/VoxelsGrid.hpp>
 #include <aliceVision/fuseCut/DelaunayGraphCut.hpp>
 
-#include <boost/filesystem.hpp>
+#include <filesystem>
 
 namespace aliceVision {
 namespace fuseCut {
 
-namespace bfs = boost::filesystem;
+namespace fs = std::filesystem;
 
 ReconstructionPlan::ReconstructionPlan(Voxel& dimmensions, Point3d* space, mvsUtils::MultiViewParams* _mp, const std::string& _spaceRootDir)
   : VoxelsGrid(dimmensions, space, _mp, _spaceRootDir)
@@ -250,7 +250,7 @@
 
         std::string filePtsCamsFromDCTName = folderName + "meshPtsCamsFromDGC.bin";
 
-        if (!bfs::exists(filePtsCamsFromDCTName))
+        if (!fs::exists(filePtsCamsFromDCTName))
         {
             delete ptsCamsFromDct;
             throw std::runtime_error("Missing file: " + filePtsCamsFromDCTName);
@@ -274,7 +274,7 @@
 
         std::string filePtsCamsFromDCTName = folderName + "meshPtsCamsFromDGC.bin";
 
-        if (!bfs::exists(filePtsCamsFromDCTName))
+        if (!fs::exists(filePtsCamsFromDCTName))
         {
             throw std::runtime_error("Missing file: " + filePtsCamsFromDCTName);
         }
@@ -316,7 +316,7 @@
         std::string folderName = recsDirs[i];
 
         std::string fileName = folderName + "mesh.bin";
-        if (bfs::exists(fileName))
+        if (fs::exists(fileName))
         {
             mesh::Mesh* mei = new mesh::Mesh();
             mei->loadFromBin(fileName);
@@ -352,7 +352,7 @@
         std::string folderName = recsDirs[i];
 
         std::string fileName = folderName + "mesh.bin";
-        if (bfs::exists(fileName))
+        if (fs::exists(fileName))
         {
             mesh::Mesh* mei = new mesh::Mesh();
             mei->loadFromBin(fileName);
@@ -368,7 +368,7 @@
 
             ALICEVISION_LOG_DEBUG("Merging colors of part: s" << i);
             fileName = folderName + "meshAvImgCol.ply.ptsColors";
-            if (bfs::exists(fileName))
+            if (fs::exists(fileName))
             {
                 StaticVector<rgb>* ptsColsi = loadArrayFromFile<rgb>(fileName);
                 StaticVector<rgb>* trisColsi = getTrisColorsRgb(mei, ptsColsi);
diff -Naur alicevision/src/aliceVision/fuseCut/VoxelsGrid.cpp alicevision.new/src/aliceVision/fuseCut/VoxelsGrid.cpp
--- alicevision/src/aliceVision/fuseCut/VoxelsGrid.cpp	2024-05-14 15:34:54.084869061 +0200
+++ alicevision.new/src/aliceVision/fuseCut/VoxelsGrid.cpp	2024-05-14 15:35:10.474002612 +0200
@@ -12,12 +12,12 @@
 #include <aliceVision/fuseCut/delaunayGraphCutTypes.hpp>
 #include <aliceVision/alicevision_omp.hpp>
 
-#include <boost/filesystem.hpp>
+#include <filesystem>
 
 namespace aliceVision {
 namespace fuseCut {
 
-namespace bfs = boost::filesystem;
+namespace fs = std::filesystem;
 
 VoxelsGrid::VoxelsGrid() {}
 
@@ -32,10 +32,10 @@
     }
     voxels = mvsUtils::computeVoxels(space, dimensions);
     spaceRootDir = _spaceRootDir;
-    bfs::create_directory(spaceRootDir);
+    fs::create_directory(spaceRootDir);
 
     spaceCamsTracksDir = _spaceRootDir + "camsTracks/";
-    bfs::create_directory(spaceCamsTracksDir);
+    fs::create_directory(spaceCamsTracksDir);
 }
 
 VoxelsGrid* VoxelsGrid::clone(const std::string& _spaceRootDir)
@@ -56,10 +56,10 @@
         out->space[k] = space[k];
     }
     out->spaceRootDir = _spaceRootDir;
-    bfs::create_directory(out->spaceRootDir);
+    fs::create_directory(out->spaceRootDir);
 
     out->spaceCamsTracksDir = _spaceRootDir + "camsTracks/";
-    bfs::create_directory(out->spaceCamsTracksDir);
+    fs::create_directory(out->spaceCamsTracksDir);
 
     return out;
 }
@@ -125,21 +125,7 @@
 std::string VoxelsGrid::getVoxelFolderName(int id) const
 {
     const Voxel v = getVoxelForId(id);
-    // std::string fnx = spaceRootDir + "X"+num2str(v.x)+"/";
-    // std::string fnxyz = fnx + "Y"+num2str(v.y)+"Z"+num2str(v.z)+"/";
-    // bfs::create_directory(fnx);
-    // bfs::create_directory(fnxyz);
-
     std::string fnxyz = spaceRootDir + "X" + mvsUtils::num2str(v.x) + "Y" + mvsUtils::num2str(v.y) + "Z" + mvsUtils::num2str(v.z) + "/";
-    // bfs::create_directory(fnxyz);
-
-    // if (bfs::is_directory(fnx)==false) {
-    //	printf("Warning folder %s does not exist!\n",fnx.c_str());
-    //}
-
-    // if (bfs::is_directory(fnxyz)==false) {
-    //	printf("Warning folder %s does not exist!\n",fnxyz.c_str());
-    //}
 
     return fnxyz;
 }
@@ -153,7 +139,7 @@
     const std::string fileNameTracksPtsCams = folderName + "tracksGridPtsCams.bin";
     const std::string fileNameTracksStat = folderName + "tracksGridStat.bin";
 
-    if (!bfs::exists(fileNameTracksPts))
+    if (!fs::exists(fileNameTracksPts))
         return nullptr;
 
     StaticVector<Point3d>* tracksStat = loadArrayFromFile<Point3d>(fileNameTracksStat);  // minPixSize, minSim, npts
@@ -192,8 +178,8 @@
 
     std::string folderName = getVoxelFolderName(id);
 
-    bfs::create_directory(folderName);
-    if (!bfs::is_directory(folderName))
+    fs::create_directory(folderName);
+    if (!fs::is_directory(folderName))
     {
         ALICEVISION_LOG_WARNING("Folder '" << folderName << "' does not exist.");
     }
@@ -331,7 +317,7 @@
         std::string folderName = getVoxelFolderName(i);
         // std::string subfn = folderName + "sub/";
         std::string subfn = folderName;
-        bfs::create_directory(subfn);
+        fs::create_directory(subfn);
 
         // create file that indicates that the voxel has subvoxels
         std::string subfnFileMark = folderName + "sub.txt";
@@ -374,8 +360,8 @@
         Voxel subLU = LU + v * ns;
         Voxel subRD = LU + (v + 1) * ns;
 
-        // if (bfs::is_directory(subfn)==true)
-        if (bfs::exists(subfnFileMark))
+        // if (fs::is_directory(subfn)==true)
+        if (fs::exists(subfnFileMark))
         {
             VoxelsGrid* vgrec = new VoxelsGrid(Voxel(2, 2, 2), &(*voxels)[voxid * 8], mp, subfn, doVisualize);
             vgrec->generateSpace(vgnew, subLU, subRD, depthMapsPtsSimsTmpDir);
@@ -470,7 +456,7 @@
     std::string folderName = getVoxelFolderName(voxelId);
     std::string fileNameTracksPts = folderName + "tracksGridPts.bin";
 
-    if (bfs::exists(fileNameTracksPts))
+    if (fs::exists(fileNameTracksPts))
     {
         OctreeTracks* ott = new OctreeTracks(&(*voxels)[voxelId * 8], mp, Voxel(numSubVoxs, numSubVoxs, numSubVoxs));
         StaticVector<int>* tcams;
@@ -515,7 +501,7 @@
     std::string folderName = getVoxelFolderName(voxelId);
     std::string fileNameTracksPts = folderName + "tracksGridPts.bin";
 
-    if (bfs::exists(fileNameTracksPts))
+    if (fs::exists(fileNameTracksPts))
     {
         StaticVector<int>* tcams;
         StaticVector<OctreeTracks::trackStruct*>* tracksOld = loadTracksFromVoxelFiles(&tcams, voxelId);
@@ -568,7 +554,7 @@
 
         // printf("SAVING %i-th VOXEL POINTS TO CAMS FILES\n",i);
 
-        if (bfs::exists(fileNameTracksPts))
+        if (fs::exists(fileNameTracksPts))
         {
             StaticVector<Point3d>* tracksPoints = loadArrayFromFile<Point3d>(fileNameTracksPts);
             StaticVector<StaticVector<Pixel>*>* tracksPointsCams = loadArrayOfArraysFromFile<Pixel>(fileNameTracksPtsCams);
@@ -622,7 +608,7 @@
     {
         std::string subFoldeName = getVoxelFolderName(i);
         std::string fname = subFoldeName + "tracks.wrl";
-        if (bfs::is_directory(subFoldeName))
+        if (fs::is_directory(subFoldeName))
         {
             fprintf(f, "Inline{ url [\"%s\"] \n }\n", fname.c_str());
         }
diff -Naur alicevision/src/aliceVision/hdr/brackets.cpp alicevision.new/src/aliceVision/hdr/brackets.cpp
--- alicevision/src/aliceVision/hdr/brackets.cpp	2024-05-14 15:34:54.086869077 +0200
+++ alicevision.new/src/aliceVision/hdr/brackets.cpp	2024-05-14 15:35:10.474002612 +0200
@@ -4,7 +4,7 @@
 
 #include <aliceVision/numeric/numeric.hpp>
 
-#include <boost/filesystem.hpp>
+#include <filesystem>
 
 namespace aliceVision {
 namespace hdr {
@@ -36,8 +36,8 @@
                   if (a == nullptr || b == nullptr)
                       return true;
 
-                  boost::filesystem::path path_a(a->getImage().getImagePath());
-                  boost::filesystem::path path_b(b->getImage().getImagePath());
+                  std::filesystem::path path_a(a->getImage().getImagePath());
+                  std::filesystem::path path_b(b->getImage().getImagePath());
 
                   return (path_a.stem().string() < path_b.stem().string());
               });
diff -Naur alicevision/src/aliceVision/hdr/CMakeLists.txt alicevision.new/src/aliceVision/hdr/CMakeLists.txt
--- alicevision/src/aliceVision/hdr/CMakeLists.txt	2024-05-14 15:34:54.372871408 +0200
+++ alicevision.new/src/aliceVision/hdr/CMakeLists.txt	2024-05-14 15:35:10.474002612 +0200
@@ -32,7 +32,6 @@
     aliceVision_system
     aliceVision_image
     aliceVision_sfmData
-    Boost::filesystem
     ${CERES_LIBRARIES}
 )
 
diff -Naur alicevision/src/aliceVision/hdr/hdrTestCommon.hpp alicevision.new/src/aliceVision/hdr/hdrTestCommon.hpp
--- alicevision/src/aliceVision/hdr/hdrTestCommon.hpp	2024-05-14 15:34:54.087869085 +0200
+++ alicevision.new/src/aliceVision/hdr/hdrTestCommon.hpp	2024-05-14 15:35:10.475002620 +0200
@@ -1,11 +1,12 @@
 #pragma once
 #include <aliceVision/image/all.hpp>
 #include <aliceVision/system/Logger.hpp>
+#include <aliceVision/utils/filesIO.hpp>
 
 #include "rgbCurve.hpp"
 #include "sampling.hpp"
 
-#include <boost/filesystem.hpp>
+#include <filesystem>
 #include <random>
 #include <array>
 
@@ -165,8 +166,8 @@
             }
         }
 
-        boost::filesystem::path temp = boost::filesystem::temp_directory_path();
-        temp /= boost::filesystem::unique_path();
+        std::filesystem::path temp = std::filesystem::temp_directory_path();
+        temp /= utils::generateUniqueFilename();
         temp += ".exr";
 
         ALICEVISION_LOG_INFO("writing to " << temp.string());
diff -Naur alicevision/src/aliceVision/image/cache.cpp alicevision.new/src/aliceVision/image/cache.cpp
--- alicevision/src/aliceVision/image/cache.cpp	2024-05-14 15:34:54.088869094 +0200
+++ alicevision.new/src/aliceVision/image/cache.cpp	2024-05-14 15:35:10.475002620 +0200
@@ -1,8 +1,9 @@
 #include "cache.hpp"
 
 #include <aliceVision/system/Logger.hpp>
+#include <aliceVision/utils/filesIO.hpp>
 
-#include <boost/filesystem.hpp>
+#include <filesystem>
 
 namespace aliceVision {
 namespace image {
@@ -38,8 +39,8 @@
 {
     if (_indexPaths.find(indexId) == _indexPaths.end())
     {
-        boost::filesystem::path path(_basePathStorage);
-        path /= boost::filesystem::unique_path();
+        std::filesystem::path path(_basePathStorage);
+        path /= std::filesystem::path(utils::generateUniqueFilename());
         path += ".idx";
 
         _indexPaths[indexId] = path.string();
@@ -53,7 +54,7 @@
     std::size_t cacheSize = 0;
     for (std::pair<const size_t, std::string>& p : _indexPaths)
     {
-        const std::size_t s = boost::filesystem::file_size(p.second);
+        const std::size_t s = std::filesystem::file_size(p.second);
         ALICEVISION_LOG_TRACE("CacheManager::deleteIndexFiles: '" << p.second << "': " << s / (1024 * 1024) << "MB.");
         cacheSize += s;
     }
@@ -62,8 +63,8 @@
     // Remove all cache files
     for (std::pair<const size_t, std::string>& p : _indexPaths)
     {
-        boost::filesystem::path path(p.second);
-        boost::filesystem::remove(path);
+        std::filesystem::path path(p.second);
+        std::filesystem::remove(path);
     }
 
     // Remove list of cache files
@@ -78,10 +79,10 @@
     size_t len = _blockSize * blocksCount;
 
     std::string pathname = getPathForIndex(index_id);
-    boost::filesystem::path path(pathname);
+    std::filesystem::path path(pathname);
 
     std::ofstream file_index;
-    if (boost::filesystem::exists(path))
+    if (std::filesystem::exists(path))
     {
         file_index.open(pathname, std::ios::binary | std::ios::out | std::ios::in);
     }
diff -Naur alicevision/src/aliceVision/image/CMakeLists.txt alicevision.new/src/aliceVision/image/CMakeLists.txt
--- alicevision/src/aliceVision/image/CMakeLists.txt	2024-05-14 15:34:54.372871408 +0200
+++ alicevision.new/src/aliceVision/image/CMakeLists.txt	2024-05-14 15:35:10.475002620 +0200
@@ -47,7 +47,6 @@
   PRIVATE_LINKS
     aliceVision_system
     ${OPENEXR_LIBRARIES}
-    Boost::filesystem
   PRIVATE_INCLUDE_DIRS
     ${OPENEXR_INCLUDE_DIR}
 )
diff -Naur alicevision/src/aliceVision/image/colorspace.cpp alicevision.new/src/aliceVision/image/colorspace.cpp
--- alicevision/src/aliceVision/image/colorspace.cpp	2024-05-14 15:34:54.089869102 +0200
+++ alicevision.new/src/aliceVision/image/colorspace.cpp	2024-05-14 15:35:10.476002628 +0200
@@ -11,9 +11,8 @@
 #include <OpenImageIO/color.h>
 
 #include <boost/algorithm/string.hpp>
-#include <boost/filesystem.hpp>
 
-namespace fs = boost::filesystem;
+#include <filesystem>
 
 namespace aliceVision {
 namespace image {
@@ -22,6 +21,8 @@
 oiio::ColorConfig colorConfigOCIO(getDefaultColorConfigFilePath());
 }
 
+namespace fs = std::filesystem;
+
 oiio::ColorConfig& getGlobalColorConfigOCIO() { return colorConfigOCIO; }
 
 std::string getColorConfigFilePathFromSourceCode()
diff -Naur alicevision/src/aliceVision/image/dcp.cpp alicevision.new/src/aliceVision/image/dcp.cpp
--- alicevision/src/aliceVision/image/dcp.cpp	2024-05-14 15:34:54.090869110 +0200
+++ alicevision.new/src/aliceVision/image/dcp.cpp	2024-05-14 15:35:10.476002628 +0200
@@ -4,20 +4,21 @@
 #include <aliceVision/system/Logger.hpp>
 #include <aliceVision/stl/mapUtils.hpp>
 
-#include <boost/filesystem.hpp>
+
 #include <boost/algorithm/string.hpp>
 #include <boost/foreach.hpp>
 
 #include <iostream>
 #include <cstdio>
 #include <cstring>
+#include <filesystem>
 #include <functional>
 
 namespace aliceVision {
 namespace image {
 
 using aliceVision::clamp;
-namespace bfs = boost::filesystem;
+namespace fs = std::filesystem;
 
 double calibrationIlluminantToTemperature(const LightSource light)
 {
@@ -2379,16 +2380,16 @@
 
     folderName = databaseDirPath;
 
-    if (!bfs::is_directory(databaseDirPath))
+    if (!fs::is_directory(databaseDirPath))
     {
         return 0;
     }
 
-    bfs::path targetDir(databaseDirPath);
-    bfs::directory_iterator it(targetDir), eod;
-    BOOST_FOREACH (bfs::path const& p, std::make_pair(it, eod))
+    fs::path targetDir(databaseDirPath);
+    fs::directory_iterator it(targetDir), eod;
+    BOOST_FOREACH (fs::path const& p, std::make_pair(it, eod))
     {
-        if (bfs::is_regular_file(p))
+        if (fs::is_regular_file(p))
         {
             dcpFilenamesList.emplace_back(p.generic_string());
         }
diff -Naur alicevision/src/aliceVision/image/ImageCache.hpp alicevision.new/src/aliceVision/image/ImageCache.hpp
--- alicevision/src/aliceVision/image/ImageCache.hpp	2024-05-14 15:34:54.088869094 +0200
+++ alicevision.new/src/aliceVision/image/ImageCache.hpp	2024-05-14 15:35:10.475002620 +0200
@@ -12,10 +12,11 @@
 #include "imageAlgo.hpp"
 
 #include <aliceVision/system/Logger.hpp>
+#include <aliceVision/utils/filesIO.hpp>
 
-#include <boost/filesystem.hpp>
 #include <boost/functional/hash.hpp>
 
+#include <filesystem>
 #include <memory>
 #include <unordered_map>
 #include <functional>
@@ -300,7 +301,7 @@
 
     using TInfo = ColorTypeInfo<TPix>;
 
-    auto lastWriteTime = boost::filesystem::last_write_time(filename);
+    auto lastWriteTime = utils::getLastWriteTime(filename);
     CacheKey keyReq(filename, TInfo::size, TInfo::typeDesc, downscaleLevel, lastWriteTime);
 
     // find the requested image in the cached images
@@ -453,7 +454,7 @@
 
     using TInfo = ColorTypeInfo<TPix>;
 
-    auto lastWriteTime = boost::filesystem::last_write_time(filename);
+    auto lastWriteTime = utils::getLastWriteTime(filename);
     CacheKey keyReq(filename, TInfo::size, TInfo::typeDesc, downscaleLevel, lastWriteTime);
 
     auto it = std::find(_keys.begin(), _keys.end(), keyReq);
diff -Naur alicevision/src/aliceVision/image/io.cpp alicevision.new/src/aliceVision/image/io.cpp
--- alicevision/src/aliceVision/image/io.cpp	2024-05-14 15:34:54.092869126 +0200
+++ alicevision.new/src/aliceVision/image/io.cpp	2024-05-14 15:35:10.477002636 +0200
@@ -8,6 +8,7 @@
 #include <aliceVision/image/all.hpp>
 
 #include <aliceVision/system/Logger.hpp>
+#include <aliceVision/utils/filesIO.hpp>
 
 #include <OpenImageIO/imageio.h>
 #include <OpenImageIO/imagebuf.h>
@@ -19,18 +20,18 @@
 #include <aliceVision/stl/mapUtils.hpp>
 
 #include <boost/algorithm/string.hpp>
-#include <boost/filesystem.hpp>
 
 #include <cstring>
+#include <filesystem>
 #include <stdexcept>
 #include <iostream>
 #include <cmath>
 
-namespace fs = boost::filesystem;
-
 namespace aliceVision {
 namespace image {
 
+namespace fs = std::filesystem;
+
 EImageColorSpace getImageColorSpace(const std::string& imagePath)
 {
     oiio::ImageSpec metadataSpec;
@@ -958,7 +959,7 @@
 {
     const fs::path bPath = fs::path(path);
     const std::string extension = boost::to_lower_copy(bPath.extension().string());
-    const std::string tmpPath =  (bPath.parent_path() / bPath.stem()).string() + "." + fs::unique_path().string() + extension;
+    const std::string tmpPath =  (bPath.parent_path() / bPath.stem()).string() + "." + utils::generateUniqueFilename() + extension;
     const bool isEXR = (extension == ".exr");
     //const bool isTIF = (extension == ".tif");
     const bool isJPG = (extension == ".jpg");
@@ -1129,7 +1130,7 @@
 {
   const fs::path bPath = fs::path(path);
   const std::string extension = boost::to_lower_copy(bPath.extension().string());
-  const std::string tmpPath =  (bPath.parent_path() / bPath.stem()).string() + "." + fs::unique_path().string() + extension;
+  const std::string tmpPath =  (bPath.parent_path() / bPath.stem()).string() + "." + utils::generateUniqueFilename() + extension;
   const bool isEXR = (extension == ".exr");
   //const bool isTIF = (extension == ".tif");
   const bool isJPG = (extension == ".jpg");
diff -Naur alicevision/src/aliceVision/keyframe/CMakeLists.txt alicevision.new/src/aliceVision/keyframe/CMakeLists.txt
--- alicevision/src/aliceVision/keyframe/CMakeLists.txt	2024-05-14 15:34:54.373871416 +0200
+++ alicevision.new/src/aliceVision/keyframe/CMakeLists.txt	2024-05-14 15:35:10.477002636 +0200
@@ -18,7 +18,6 @@
   PRIVATE_LINKS
     aliceVision_sensorDB
     aliceVision_system
-    Boost::filesystem
 )
 
 if(ALICEVISION_HAVE_OPENCV)
diff -Naur alicevision/src/aliceVision/keyframe/KeyframeSelector.cpp alicevision.new/src/aliceVision/keyframe/KeyframeSelector.cpp
--- alicevision/src/aliceVision/keyframe/KeyframeSelector.cpp	2024-05-14 15:34:54.094869142 +0200
+++ alicevision.new/src/aliceVision/keyframe/KeyframeSelector.cpp	2024-05-14 15:35:10.478002645 +0200
@@ -8,17 +8,16 @@
 #include <aliceVision/sfmDataIO/viewIO.hpp>
 #include <aliceVision/system/Logger.hpp>
 
-#include <boost/filesystem.hpp>
-
 #include <random>
 #include <tuple>
 #include <cassert>
 #include <cstdlib>
+#include <filesystem>
 #include <iomanip>
 #include <fstream>
 #include <thread>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace keyframe {
diff -Naur alicevision/src/aliceVision/lensCorrectionProfile/CMakeLists.txt alicevision.new/src/aliceVision/lensCorrectionProfile/CMakeLists.txt
--- alicevision/src/aliceVision/lensCorrectionProfile/CMakeLists.txt	2024-05-14 15:34:54.373871416 +0200
+++ alicevision.new/src/aliceVision/lensCorrectionProfile/CMakeLists.txt	2024-05-14 15:35:10.478002645 +0200
@@ -11,7 +11,6 @@
 alicevision_add_library(aliceVision_lensCorrectionProfile
   SOURCES ${lensCorrectionProfile_files_headers} ${lensCorrectionProfile_files_sources}
   PRIVATE_LINKS
-    Boost::filesystem
     Boost::log
     expat::expat
 )
diff -Naur alicevision/src/aliceVision/lensCorrectionProfile/lcp.cpp alicevision.new/src/aliceVision/lensCorrectionProfile/lcp.cpp
--- alicevision/src/aliceVision/lensCorrectionProfile/lcp.cpp	2024-05-14 15:34:54.095869151 +0200
+++ alicevision.new/src/aliceVision/lensCorrectionProfile/lcp.cpp	2024-05-14 15:35:10.478002645 +0200
@@ -2,11 +2,11 @@
 
 #include <aliceVision/system/Logger.hpp>
 
-#include <boost/filesystem.hpp>
 #include <boost/algorithm/string.hpp>
 
 #include <expat.h>
 
+#include <filesystem>
 #include <iostream>
 #include <math.h>
 
@@ -1126,21 +1126,21 @@
         currLensParam.vignParams.VignetteModelParam3 = std::stof(_currText.c_str());
 }
 
-void LCPdatabase::loadDirectory(const boost::filesystem::path& p)
+void LCPdatabase::loadDirectory(const std::filesystem::path& p)
 {
-    if (boost::filesystem::is_directory(p))
+    if (std::filesystem::is_directory(p))
     {
         // In some border cases, multiple LCP files could match with the image metadata
         // and we stop the search as soon as we have found a valid match.
         // So to ensure a repeatable behavior, we sort the files by name.
-        std::vector<boost::filesystem::path> sortedPaths;
-        for (auto&& x : boost::filesystem::directory_iterator(p))
+        std::vector<std::filesystem::path> sortedPaths;
+        for (auto&& x : std::filesystem::directory_iterator(p))
             sortedPaths.push_back(x.path());
         std::sort(sortedPaths.begin(), sortedPaths.end());
         for (auto&& x : sortedPaths)
             loadDirectory(x);
     }
-    else if (boost::filesystem::is_regular_file(p) && (boost::filesystem::extension(p) == ".lcp"))
+    else if (std::filesystem::is_regular_file(p) && (p.extension() == ".lcp"))
     {
         _lcpFilepaths.push_back(p);
     }
diff -Naur alicevision/src/aliceVision/lensCorrectionProfile/lcp.hpp alicevision.new/src/aliceVision/lensCorrectionProfile/lcp.hpp
--- alicevision/src/aliceVision/lensCorrectionProfile/lcp.hpp	2024-05-14 15:34:54.095869151 +0200
+++ alicevision.new/src/aliceVision/lensCorrectionProfile/lcp.hpp	2024-05-14 15:35:10.478002645 +0200
@@ -1,7 +1,6 @@
 #pragma once
 
-#include <boost/filesystem/path.hpp>
-
+#include <filesystem>
 #include <string>
 #include <vector>
 #include <sstream>
@@ -635,7 +634,7 @@
 
     size_t size() const { return _lcpFilepaths.size(); }
 
-    void loadDirectory(const boost::filesystem::path& p);
+    void loadDirectory(const std::filesystem::path& p);
 
     LCPinfo* retrieveLCP() { return retrieveLCP(_lcpFilepaths.begin()->path.string()); }
 
@@ -664,11 +663,11 @@
   private:
     struct LcpPath
     {
-        LcpPath(const boost::filesystem::path& p)
+        LcpPath(const std::filesystem::path& p)
           : path(p),
             reducedPath(reduceString(p.string()))
         {}
-        boost::filesystem::path path;
+        std::filesystem::path path;
         std::string reducedPath;
     };
 
diff -Naur alicevision/src/aliceVision/lightingEstimation/lightingCalibration.cpp alicevision.new/src/aliceVision/lightingEstimation/lightingCalibration.cpp
--- alicevision/src/aliceVision/lightingEstimation/lightingCalibration.cpp	2024-05-14 15:34:54.096869159 +0200
+++ alicevision.new/src/aliceVision/lightingEstimation/lightingCalibration.cpp	2024-05-14 15:35:10.478002645 +0200
@@ -16,7 +16,6 @@
 
 #include <boost/algorithm/string.hpp>
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
 #include <boost/property_tree/ptree.hpp>
 #include <boost/property_tree/json_parser.hpp>
@@ -25,9 +24,10 @@
 #include <Eigen/Dense>
 #include <Eigen/Core>
 
+#include <filesystem>
 #include <math.h>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 namespace bpt = boost::property_tree;
 
 namespace aliceVision {
diff -Naur alicevision/src/aliceVision/localization/CCTagLocalizer.cpp alicevision.new/src/aliceVision/localization/CCTagLocalizer.cpp
--- alicevision/src/aliceVision/localization/CCTagLocalizer.cpp	2024-05-14 15:34:54.097869167 +0200
+++ alicevision.new/src/aliceVision/localization/CCTagLocalizer.cpp	2024-05-14 15:35:10.479002653 +0200
@@ -21,9 +21,8 @@
 
 #include <cctag/ICCTag.hpp>
 
-#include <boost/filesystem.hpp>
-
 #include <algorithm>
+#include <filesystem>
 #include <sstream>
 
 namespace aliceVision {
@@ -197,7 +196,7 @@
                               LocalizationResult& localizationResult,
                               const std::string& imagePath)
 {
-    namespace bfs = boost::filesystem;
+    namespace fs = std::filesystem;
 
     const CCTagLocalizer::Parameters* param = static_cast<const CCTagLocalizer::Parameters*>(parameters);
     if (!param)
@@ -225,7 +224,7 @@
         const feature::CCTAG_Regions& cctagQueryRegions = tmpQueryRegions.getRegions<feature::CCTAG_Regions>(_cctagDescType);
 
         // just debugging -- save the svg image with detected cctag
-        matching::saveCCTag2SVG(imagePath, imageSize, cctagQueryRegions, param->_visualDebug + "/" + bfs::path(imagePath).stem().string() + ".svg");
+        matching::saveCCTag2SVG(imagePath, imageSize, cctagQueryRegions, param->_visualDebug + "/" + fs::path(imagePath).stem().string() + ".svg");
     }
     return localize(
       tmpQueryRegions, imageSize, parameters, randomNumberGenerator, useInputIntrinsics, queryIntrinsics, localizationResult, imagePath);
@@ -242,7 +241,7 @@
                               LocalizationResult& localizationResult,
                               const std::string& imagePath)
 {
-    namespace bfs = boost::filesystem;
+    namespace fs = std::filesystem;
 
     const CCTagLocalizer::Parameters* param = dynamic_cast<const CCTagLocalizer::Parameters*>(parameters);
     if (!param)
@@ -301,11 +300,11 @@
         ALICEVISION_LOG_DEBUG("[poseEstimation]\tResection failed");
         if (!param->_visualDebug.empty() && !imagePath.empty())
         {
-            //      namespace bfs = boost::filesystem;
+            //      namespace fs = std::filesystem;
             //      matching::saveFeatures2SVG(imagePath,
             //                                 imageSize,
             //                                 resectionData.pt2D,
-            //                                 param._visualDebug + "/" + bfs::path(imagePath).stem().string() + ".associations.svg");
+            //                                 param._visualDebug + "/" + fs::path(imagePath).stem().string() + ".associations.svg");
         }
         localizationResult = LocalizationResult(resectionData, associationIDs, pose, queryIntrinsics, matchedImages, bResection);
         return localizationResult.isValid();
@@ -751,18 +750,18 @@
 
         if (!param._visualDebug.empty() && !imagePath.empty())
         {
-            namespace bfs = boost::filesystem;
+            namespace fs = std::filesystem;
             const sfmData::View* mview = _sfm_data.getViews().at(keyframeId).get();
-            const std::string queryImage = bfs::path(imagePath).stem().string();
-            const std::string matchedImage = bfs::path(mview->getImage().getImagePath()).stem().string();
+            const std::string queryImage = fs::path(imagePath).stem().string();
+            const std::string matchedImage = fs::path(mview->getImage().getImagePath()).stem().string();
             const std::string matchedPath = mview->getImage().getImagePath();
 
             // the directory where to save the feature matches
-            const auto baseDir = bfs::path(param._visualDebug) / queryImage;
-            if ((!bfs::exists(baseDir)))
+            const auto baseDir = fs::path(param._visualDebug) / queryImage;
+            if ((!fs::exists(baseDir)))
             {
                 ALICEVISION_LOG_DEBUG("created " << baseDir.string());
-                bfs::create_directories(baseDir);
+                fs::create_directories(baseDir);
             }
 
             // the final filename for the output svg file as a composition of the query
diff -Naur alicevision/src/aliceVision/localization/CMakeLists.txt alicevision.new/src/aliceVision/localization/CMakeLists.txt
--- alicevision/src/aliceVision/localization/CMakeLists.txt	2024-05-14 15:34:54.374871424 +0200
+++ alicevision.new/src/aliceVision/localization/CMakeLists.txt	2024-05-14 15:35:10.479002653 +0200
@@ -36,7 +36,6 @@
   PRIVATE_LINKS
     aliceVision_system
     aliceVision_matchingImageCollection
-    Boost::filesystem
     Boost::boost
     ${FLANN_LIBRARIES}
 )
diff -Naur alicevision/src/aliceVision/localization/LocalizationResult_test.cpp alicevision.new/src/aliceVision/localization/LocalizationResult_test.cpp
--- alicevision/src/aliceVision/localization/LocalizationResult_test.cpp	2024-05-14 15:34:54.097869167 +0200
+++ alicevision.new/src/aliceVision/localization/LocalizationResult_test.cpp	2024-05-14 15:35:10.479002653 +0200
@@ -9,11 +9,10 @@
 #include <aliceVision/numeric/numeric.hpp>
 #include <aliceVision/sfm/pipeline/localization/SfMLocalizer.hpp>
 
-#include <boost/filesystem.hpp>
-
-#include <vector>
 #include <chrono>
+#include <filesystem>
 #include <random>
+#include <vector>
 
 #define BOOST_TEST_MODULE LocalizationResult
 
@@ -21,7 +20,7 @@
 #include <boost/test/tools/floating_point_comparison.hpp>
 #include <aliceVision/unitTest.hpp>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 using namespace aliceVision;
 
 sfm::ImageLocalizerMatchData generateRandomMatch_Data(std::size_t numPts)
diff -Naur alicevision/src/aliceVision/localization/VoctreeLocalizer.cpp alicevision.new/src/aliceVision/localization/VoctreeLocalizer.cpp
--- alicevision/src/aliceVision/localization/VoctreeLocalizer.cpp	2024-05-14 15:34:54.097869167 +0200
+++ alicevision.new/src/aliceVision/localization/VoctreeLocalizer.cpp	2024-05-14 15:35:10.479002653 +0200
@@ -29,10 +29,10 @@
 
 #include <flann/algorithms/dist.h>
 
-#include <boost/filesystem.hpp>
 
 #include <algorithm>
 #include <chrono>
+#include <filesystem>
 
 namespace aliceVision {
 namespace localization {
@@ -227,9 +227,9 @@
             extractedFeatures[descType] = queryRegionsPerDesc.at(descType)->GetRegionsPositions();
         }
 
-        namespace bfs = boost::filesystem;
+        namespace fs = std::filesystem;
         matching::saveFeatures2SVG(
-          imagePath, queryImageSize, extractedFeatures, param->_visualDebug + "/" + bfs::path(imagePath).stem().string() + ".svg");
+          imagePath, queryImageSize, extractedFeatures, param->_visualDebug + "/" + fs::path(imagePath).stem().string() + ".svg");
     }
 
     return localize(
@@ -461,10 +461,10 @@
 
         if (!param._visualDebug.empty() && !imagePath.empty())
         {
-            namespace bfs = boost::filesystem;
+            namespace fs = std::filesystem;
             const sfmData::View* mview = _sfm_data.getViews().at(matchedViewId).get();
-            const std::string queryimage = bfs::path(imagePath).stem().string();
-            const std::string matchedImage = bfs::path(mview->getImage().getImagePath()).stem().string();
+            const std::string queryimage = fs::path(imagePath).stem().string();
+            const std::string matchedImage = fs::path(mview->getImage().getImagePath()).stem().string();
             const std::string matchedPath = mview->getImage().getImagePath();
 
             matching::saveMatches2SVG(imagePath,
@@ -646,9 +646,9 @@
         ALICEVISION_LOG_DEBUG("[poseEstimation]\tResection failed");
         if (!param._visualDebug.empty() && !imagePath.empty())
         {
-            namespace bfs = boost::filesystem;
+            namespace fs = std::filesystem;
             matching::saveFeatures2SVG(
-              imagePath, queryImageSize, resectionData.pt2D, param._visualDebug + "/" + bfs::path(imagePath).stem().string() + ".associations.svg");
+              imagePath, queryImageSize, resectionData.pt2D, param._visualDebug + "/" + fs::path(imagePath).stem().string() + ".associations.svg");
         }
         localizationResult = LocalizationResult(resectionData, associationIDs, pose, queryIntrinsics, matchedImages, bResection);
         return localizationResult.isValid();
@@ -684,11 +684,11 @@
 
     if (!param._visualDebug.empty() && !imagePath.empty())
     {
-        namespace bfs = boost::filesystem;
+        namespace fs = std::filesystem;
         matching::saveFeatures2SVG(imagePath,
                                    queryImageSize,
                                    resectionData.pt2D,
-                                   param._visualDebug + "/" + bfs::path(imagePath).stem().string() + ".associations.svg",
+                                   param._visualDebug + "/" + fs::path(imagePath).stem().string() + ".associations.svg",
                                    &resectionData.vec_inliers);
     }
 
@@ -833,21 +833,21 @@
         // param._visualDebug/queryImage/
         if (!param._visualDebug.empty() && !imagePath.empty())
         {
-            namespace bfs = boost::filesystem;
+            namespace fs = std::filesystem;
             const sfmData::View* mview = _sfm_data.getViews().at(matchedViewId).get();
             // the current query image without extension
-            const auto queryImage = bfs::path(imagePath).stem();
+            const auto queryImage = fs::path(imagePath).stem();
             // the matching image without extension
-            const auto matchedImage = bfs::path(mview->getImage().getImagePath()).stem();
+            const auto matchedImage = fs::path(mview->getImage().getImagePath()).stem();
             // the full path of the matching image
             const auto matchedPath = mview->getImage().getImagePath();
 
             // the directory where to save the feature matches
-            const auto baseDir = bfs::path(param._visualDebug) / queryImage;
-            if ((!bfs::exists(baseDir)))
+            const auto baseDir = fs::path(param._visualDebug) / queryImage;
+            if ((!fs::exists(baseDir)))
             {
                 ALICEVISION_LOG_DEBUG("created " << baseDir.string());
-                bfs::create_directories(baseDir);
+                fs::create_directories(baseDir);
             }
 
             // damn you, boost, what does it take to make the operator "+"?
diff -Naur alicevision/src/aliceVision/matching/CMakeLists.txt alicevision.new/src/aliceVision/matching/CMakeLists.txt
--- alicevision/src/aliceVision/matching/CMakeLists.txt	2024-05-14 15:34:54.374871424 +0200
+++ alicevision.new/src/aliceVision/matching/CMakeLists.txt	2024-05-14 15:35:10.479002653 +0200
@@ -39,7 +39,6 @@
     aliceVision_system
     
   PRIVATE_LINKS
-    Boost::filesystem
     Boost::boost
     ${FLANN_LIBRARIES}
 )
diff -Naur alicevision/src/aliceVision/matching/indMatch_test.cpp alicevision.new/src/aliceVision/matching/indMatch_test.cpp
--- alicevision/src/aliceVision/matching/indMatch_test.cpp	2024-05-14 15:34:54.099869183 +0200
+++ alicevision.new/src/aliceVision/matching/indMatch_test.cpp	2024-05-14 15:35:10.479002653 +0200
@@ -8,24 +8,23 @@
 #include "aliceVision/matching/IndMatch.hpp"
 #include "aliceVision/matching/io.hpp"
 
-#include <boost/filesystem/operations.hpp>
-
 #define BOOST_TEST_MODULE IndMatch
 
 #include <boost/test/unit_test.hpp>
 #include <boost/test/tools/floating_point_comparison.hpp>
-#include <boost/filesystem.hpp>
+
+#include <filesystem>
 
 using namespace aliceVision;
 using namespace aliceVision::matching;
 using namespace aliceVision::feature;
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 BOOST_AUTO_TEST_CASE(IndMatch_IO)
 {
     const std::string testFolder = "matchingTest";
-    boost::filesystem::create_directory(testFolder);
+    fs::create_directory(testFolder);
     {
         std::set<IndexT> viewsKeys;
         PairwiseMatches matches;
@@ -36,8 +35,8 @@
         BOOST_CHECK_EQUAL(0, matches.size());
         fs::remove_all("./1/");
     }
-    boost::filesystem::remove_all(testFolder);
-    boost::filesystem::create_directory(testFolder);
+    fs::remove_all(testFolder);
+    fs::create_directory(testFolder);
     {
         std::set<IndexT> viewsKeys;
         PairwiseMatches matches;
@@ -48,8 +47,8 @@
         BOOST_CHECK_EQUAL(0, matches.size());
         fs::remove_all("./2/");
     }
-    boost::filesystem::remove_all(testFolder);
-    boost::filesystem::create_directory(testFolder);
+    fs::remove_all(testFolder);
+    fs::create_directory(testFolder);
     {
         std::set<IndexT> viewsKeys = {0, 1, 2};
         PairwiseMatches matches;
@@ -67,8 +66,8 @@
         BOOST_CHECK_EQUAL(3, matches.at(std::make_pair(1, 2)).at(EImageDescriberType::UNKNOWN).size());
         fs::remove_all("./3/");
     }
-    boost::filesystem::remove_all(testFolder);
-    boost::filesystem::create_directory(testFolder);
+    fs::remove_all(testFolder);
+    fs::create_directory(testFolder);
     {
         std::set<IndexT> viewsKeys = {0, 1, 2};
         PairwiseMatches matches;
@@ -105,7 +104,7 @@
         BOOST_CHECK_EQUAL(2, matches.at(std::make_pair(0, 2)).at(EImageDescriberType::UNKNOWN).size());
         fs::remove_all("./4/");
     }
-    boost::filesystem::remove_all(testFolder);
+    fs::remove_all(testFolder);
 }
 
 BOOST_AUTO_TEST_CASE(IndMatch_DuplicateRemoval_NoRemoval)
diff -Naur alicevision/src/aliceVision/matching/io.cpp alicevision.new/src/aliceVision/matching/io.cpp
--- alicevision/src/aliceVision/matching/io.cpp	2024-05-14 15:34:54.099869183 +0200
+++ alicevision.new/src/aliceVision/matching/io.cpp	2024-05-14 15:35:10.480002661 +0200
@@ -9,24 +9,25 @@
 #include <aliceVision/matching/IndMatch.hpp>
 #include <aliceVision/config.hpp>
 #include <aliceVision/system/Logger.hpp>
+#include <aliceVision/utils/filesIO.hpp>
 
-#include <boost/filesystem.hpp>
 #include <boost/range/iterator_range.hpp>
 
 #include <map>
+#include <filesystem>
 #include <fstream>
 #include <iterator>
 #include <string>
 #include <vector>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace matching {
 
 bool LoadMatchFile(PairwiseMatches& matches, const std::string& filepath)
 {
-    const std::string ext = fs::extension(filepath);
+    const std::string ext = fs::path(filepath).extension().string();
 
     if (!fs::exists(filepath))
         return false;
@@ -279,7 +280,7 @@
     void saveTxt(const std::string& filepath, const PairwiseMatches::const_iterator& matchBegin, const PairwiseMatches::const_iterator& matchEnd)
     {
         const fs::path bPath = fs::path(filepath);
-        const std::string tmpPath = (bPath.parent_path() / bPath.stem()).string() + "." + fs::unique_path().string() + bPath.extension().string();
+        const std::string tmpPath = (bPath.parent_path() / bPath.stem()).string() + "." + utils::generateUniqueFilename() + bPath.extension().string();
 
         // write temporary file
         {
@@ -307,7 +308,7 @@
       : m_matches(matches),
         m_directory(folder),
         m_filename(filename),
-        m_ext(fs::extension(filename))
+        m_ext(fs::path(filename).extension().string())
     {}
 
     ~MatchExporter() = default;
diff -Naur alicevision/src/aliceVision/matchingImageCollection/CMakeLists.txt alicevision.new/src/aliceVision/matchingImageCollection/CMakeLists.txt
--- alicevision/src/aliceVision/matchingImageCollection/CMakeLists.txt	2024-05-14 15:34:54.374871424 +0200
+++ alicevision.new/src/aliceVision/matchingImageCollection/CMakeLists.txt	2024-05-14 15:35:10.480002661 +0200
@@ -38,7 +38,6 @@
     aliceVision_sfmData
     Boost::boost
     Boost::timer
-    Boost::filesystem
   PRIVATE_LINKS
     aliceVision_system
     ${CERES_LIBRARIES}
diff -Naur alicevision/src/aliceVision/matchingImageCollection/GeometricFilterMatrix_HGrowing.hpp alicevision.new/src/aliceVision/matchingImageCollection/GeometricFilterMatrix_HGrowing.hpp
--- alicevision/src/aliceVision/matchingImageCollection/GeometricFilterMatrix_HGrowing.hpp	2024-05-14 15:34:54.100869191 +0200
+++ alicevision.new/src/aliceVision/matchingImageCollection/GeometricFilterMatrix_HGrowing.hpp	2024-05-14 15:35:10.480002661 +0200
@@ -12,9 +12,8 @@
 #include "aliceVision/matchingImageCollection/geometricFilterUtils.hpp"
 #include "aliceVision/sfmData/SfMData.hpp"
 
-#include <boost/filesystem.hpp>
-
 #include <cmath>
+#include <filesystem>
 
 namespace aliceVision {
 namespace matchingImageCollection {
@@ -240,13 +239,13 @@
                 continue;
             }
 
-            if (boost::filesystem::exists(outputSvgDir))
+            if (std::filesystem::exists(outputSvgDir))
             {
                 const std::size_t nbMatches = outGeometricInliers.size();
                 const std::string name = std::to_string(nbMatches) + "hmatches_" + std::to_string(viewI.getViewId()) + "_" +
                                          std::to_string(viewJ.getViewId()) + "_" + EImageDescriberType_enumToString(descType) + ".svg";
-                // @FIXME not worth it having boost::filesystem in a header
-                const std::string outFilename = (boost::filesystem::path(outputSvgDir) / boost::filesystem::path(name)).string();
+                // @FIXME not worth it having std::filesystem in a header
+                const std::string outFilename = (std::filesystem::path(outputSvgDir) / std::filesystem::path(name)).string();
                 drawHomographyMatches(
                   viewI, viewJ, regions_I.Features(), regions_J.Features(), homographiesAndMatches, putativeMatchesPerType.at(descType), outFilename);
             }
diff -Naur alicevision/src/aliceVision/mesh/CMakeLists.txt alicevision.new/src/aliceVision/mesh/CMakeLists.txt
--- alicevision/src/aliceVision/mesh/CMakeLists.txt	2024-05-14 15:34:54.374871424 +0200
+++ alicevision.new/src/aliceVision/mesh/CMakeLists.txt	2024-05-14 15:35:10.480002661 +0200
@@ -31,7 +31,6 @@
     aliceVision_mvsData
     aliceVision_mvsUtils
     Geogram::geogram
-    Boost::filesystem
     assimp::assimp
   PRIVATE_LINKS
     aliceVision_system
diff -Naur alicevision/src/aliceVision/mesh/Mesh.cpp alicevision.new/src/aliceVision/mesh/Mesh.cpp
--- alicevision/src/aliceVision/mesh/Mesh.cpp	2024-05-14 15:34:54.101869200 +0200
+++ alicevision.new/src/aliceVision/mesh/Mesh.cpp	2024-05-14 15:35:10.480002661 +0200
@@ -14,7 +14,6 @@
 #include <geogram/points/kd_tree.h>
 
 #include <boost/atomic/atomic_ref.hpp>
-#include <boost/filesystem.hpp>
 #include <boost/algorithm/string/case_conv.hpp>
 
 #include <assimp/Importer.hpp>
@@ -23,7 +22,9 @@
 #include <assimp/scene.h>
 #include <Eigen/Dense>
 
+#include <filesystem>
 #include <fstream>
+#include <list>
 #include <map>
 #include <unordered_set>
 
@@ -77,7 +78,7 @@
 
 void Mesh::save(const std::string& filepath)
 {
-    const std::string fileTypeStr = boost::filesystem::path(filepath).extension().string().substr(1);
+    const std::string fileTypeStr = std::filesystem::path(filepath).extension().string().substr(1);
     const EFileType fileType = mesh::EFileType_stringToEnum(fileTypeStr);
 
     ALICEVISION_LOG_INFO("Save " << fileTypeStr << " mesh file");
@@ -2358,7 +2359,7 @@
     normals.clear();
     pointsVisibilities.clear();
 
-    if (!boost::filesystem::exists(filepath))
+    if (!std::filesystem::exists(filepath))
     {
         ALICEVISION_THROW_ERROR("Mesh::load: no such file: " << filepath);
     }
diff -Naur alicevision/src/aliceVision/mesh/MeshEnergyOpt.cpp alicevision.new/src/aliceVision/mesh/MeshEnergyOpt.cpp
--- alicevision/src/aliceVision/mesh/MeshEnergyOpt.cpp	2024-05-14 15:34:54.102869208 +0200
+++ alicevision.new/src/aliceVision/mesh/MeshEnergyOpt.cpp	2024-05-14 15:35:10.480002661 +0200
@@ -7,18 +7,14 @@
 #include "MeshEnergyOpt.hpp"
 #include <aliceVision/system/Logger.hpp>
 
-#include <boost/filesystem.hpp>
-
 namespace aliceVision {
 namespace mesh {
 
-namespace bfs = boost::filesystem;
-
 MeshEnergyOpt::MeshEnergyOpt(mvsUtils::MultiViewParams* _mp)
   : MeshAnalyze(_mp)
 {
     //    tmpDir = mp->mvDir + "meshEnergyOpt/";
-    //    bfs::create_directory(tmpDir);
+    //    fs::create_directory(tmpDir);
 }
 
 MeshEnergyOpt::~MeshEnergyOpt() = default;
diff -Naur alicevision/src/aliceVision/mesh/meshPostProcessing.cpp alicevision.new/src/aliceVision/mesh/meshPostProcessing.cpp
--- alicevision/src/aliceVision/mesh/meshPostProcessing.cpp	2024-05-14 15:34:54.102869208 +0200
+++ alicevision.new/src/aliceVision/mesh/meshPostProcessing.cpp	2024-05-14 15:35:10.481002669 +0200
@@ -11,13 +11,9 @@
 #include <aliceVision/mvsData/StaticVector.hpp>
 #include <aliceVision/mesh/MeshEnergyOpt.hpp>
 
-#include <boost/filesystem/operations.hpp>
-
 namespace aliceVision {
 namespace mesh {
 
-namespace bfs = boost::filesystem;
-
 void meshPostProcessing(Mesh*& inout_mesh,
                         StaticVector<StaticVector<int>>& inout_ptsCams,
                         mvsUtils::MultiViewParams& mp,
diff -Naur alicevision/src/aliceVision/mesh/Texturing.cpp alicevision.new/src/aliceVision/mesh/Texturing.cpp
--- alicevision/src/aliceVision/mesh/Texturing.cpp	2024-05-14 15:34:54.102869208 +0200
+++ alicevision.new/src/aliceVision/mesh/Texturing.cpp	2024-05-14 15:35:10.481002669 +0200
@@ -8,6 +8,7 @@
 #include "geoMesh.hpp"
 #include "UVAtlas.hpp"
 
+#include <aliceVision/utils/filesIO.hpp>
 #include <aliceVision/system/Logger.hpp>
 #include <aliceVision/image/io.hpp>
 #include <aliceVision/image/pixelTypes.hpp>
@@ -36,6 +37,7 @@
 #include <assimp/scene.h>
 #include <assimp/postprocess.h>
 
+#include <filesystem>
 #include <map>
 #include <set>
 
@@ -279,7 +281,7 @@
 }
 
 void Texturing::generateTextures(const mvsUtils::MultiViewParams& mp,
-                                 const boost::filesystem::path& outPath,
+                                 const fs::path& outPath,
                                  size_t memoryAvailable,
                                  image::EImageFileType textureFileType)
 {
@@ -369,7 +371,7 @@
 void Texturing::generateTexturesSubSet(const mvsUtils::MultiViewParams& mp,
                                        const std::vector<size_t>& atlasIDs,
                                        mvsUtils::ImagesCache<image::Image<image::RGBfColor>>& imageCache,
-                                       const bfs::path& outPath,
+                                       const fs::path& outPath,
                                        image::EImageFileType textureFileType)
 {
     if (atlasIDs.size() > _atlases.size())
@@ -679,7 +681,7 @@
                     const std::string textureName = "contrib_" + std::to_string(1001 + atlasID) + std::string("_") + std::to_string(level) +
                                                     std::string(".") +
                                                     EImageFileType_enumToString(textureFileType);  // starts at '1001' for UDIM compatibility
-                    bfs::path texturePath = outPath / textureName;
+                    fs::path texturePath = outPath / textureName;
 
                     using namespace imageIO;
                     OutputFileColorSpace colorspace(EImageColorSpace::SRGB, EImageColorSpace::AUTO);
@@ -745,7 +747,7 @@
 
 void Texturing::generateNormalAndHeightMaps(const mvsUtils::MultiViewParams& mp,
                                             const Mesh& denseMesh,
-                                            const bfs::path& outPath,
+                                            const fs::path& outPath,
                                             const mesh::BumpMappingParams& bumpMappingParams)
 {
     GEO::Mesh geoDenseMesh;
@@ -765,7 +767,7 @@
 
 void Texturing::writeTexture(AccuImage& atlasTexture,
                              const std::size_t atlasID,
-                             const boost::filesystem::path& outPath,
+                             const std::filesystem::path& outPath,
                              image::EImageFileType textureFileType,
                              const int level)
 {
@@ -897,7 +899,7 @@
     const std::string textureName = material.textureName(Material::TextureType::DIFFUSE, static_cast<int>(atlasID));
     material.addTexture(Material::TextureType::DIFFUSE, textureName);
 
-    bfs::path texturePath = outPath / textureName;
+    fs::path texturePath = outPath / textureName;
     ALICEVISION_LOG_INFO("  - Writing texture file: " << texturePath.string());
 
     image::writeImage(texturePath.string(),
@@ -1037,17 +1039,17 @@
         // Meanwhile,
         // use a temporary obj file to save result - Geogram merges common UV coordinates per facet corner -
         // and reload it
-        const std::string tmpObjPath = (bfs::temp_directory_path() / bfs::unique_path()).string() + ".obj";
+        const std::string tmpObjPath = (fs::temp_directory_path() / fs::path(utils::generateUniqueFilename())).string() + ".obj";
         // save temp mesh with UVs
         GEO::mesh_save(geoMesh, tmpObjPath);
         // replace initial mesh
         replaceMesh(tmpObjPath);
         // remove temp mesh
-        bfs::remove(tmpObjPath);
+        fs::remove(tmpObjPath);
     }
 }
 
-void Texturing::saveAs(const bfs::path& dir, const std::string& basename, EFileType meshFileType)
+void Texturing::saveAs(const fs::path& dir, const std::string& basename, EFileType meshFileType)
 {
     const std::string meshFileTypeStr = EFileType_enumToString(meshFileType);
     const std::string filepath = (dir / (basename + "." + meshFileTypeStr)).string();
@@ -1327,7 +1329,7 @@
                                              const GEO::Mesh& sparseMesh,
                                              size_t atlasID,
                                              mvsUtils::ImagesCache<image::Image<image::RGBfColor>>& imageCache,
-                                             const bfs::path& outPath,
+                                             const fs::path& outPath,
                                              const mesh::BumpMappingParams& bumpMappingParams)
 {
     ALICEVISION_LOG_INFO("Generating Height and Normal Maps for atlas " << atlasID + 1 << "/" << _atlases.size() << " (" << _atlases[atlasID].size()
@@ -1484,7 +1486,7 @@
         const std::string name = material.textureName(Material::TextureType::NORMAL, static_cast<int>(atlasID));
         material.addTexture(Material::TextureType::NORMAL, name);
 
-        bfs::path normalMapPath = outPath / name;
+        fs::path normalMapPath = outPath / name;
         ALICEVISION_LOG_INFO("Writing normal map: " << normalMapPath.string());
 
         image::writeImage(normalMapPath.string(),
@@ -1524,7 +1526,7 @@
             const std::string bumpName = material.textureName(Material::TextureType::BUMP, static_cast<int>(atlasID));
             material.addTexture(Material::TextureType::BUMP, bumpName);
 
-            bfs::path bumpMapPath = outPath / bumpName;
+            fs::path bumpMapPath = outPath / bumpName;
             ALICEVISION_LOG_INFO("Writing bump map: " << bumpMapPath);
 
             image::writeImage(bumpMapPath.string(), heightMap, image::ImageWriteOptions().storageDataType(image::EStorageDataType::Half));
@@ -1536,7 +1538,7 @@
             const std::string dispName = material.textureName(Material::TextureType::DISPLACEMENT, static_cast<int>(atlasID));
             material.addTexture(Material::TextureType::DISPLACEMENT, dispName);
 
-            bfs::path dispMapPath = outPath / dispName;
+            fs::path dispMapPath = outPath / dispName;
             ALICEVISION_LOG_INFO("Writing displacement map: " << dispMapPath);
 
             image::writeImage(dispMapPath.string(), heightMap, image::ImageWriteOptions().storageDataType(image::EStorageDataType::Half));
diff -Naur alicevision/src/aliceVision/mesh/Texturing.hpp alicevision.new/src/aliceVision/mesh/Texturing.hpp
--- alicevision/src/aliceVision/mesh/Texturing.hpp	2024-05-14 15:34:54.102869208 +0200
+++ alicevision.new/src/aliceVision/mesh/Texturing.hpp	2024-05-14 15:35:10.481002669 +0200
@@ -18,9 +18,9 @@
 #include <aliceVision/mesh/meshVisibility.hpp>
 #include <aliceVision/stl/bitmask.hpp>
 
-#include <boost/filesystem.hpp>
+#include <filesystem>
 
-namespace bfs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace GEO {
 class MeshFacetsAABB;
@@ -194,7 +194,7 @@
 
     /// Generate texture files for all texture atlases
     void generateTextures(const mvsUtils::MultiViewParams& mp,
-                          const bfs::path& outPath,
+                          const fs::path& outPath,
                           size_t memoryAvailable,
                           image::EImageFileType textureFileType = image::EImageFileType::PNG);
 
@@ -202,12 +202,12 @@
     void generateTexturesSubSet(const mvsUtils::MultiViewParams& mp,
                                 const std::vector<size_t>& atlasIDs,
                                 mvsUtils::ImagesCache<image::Image<image::RGBfColor>>& imageCache,
-                                const bfs::path& outPath,
+                                const fs::path& outPath,
                                 image::EImageFileType textureFileType = image::EImageFileType::PNG);
 
     void generateNormalAndHeightMaps(const mvsUtils::MultiViewParams& mp,
                                      const Mesh& denseMesh,
-                                     const bfs::path& outPath,
+                                     const fs::path& outPath,
                                      const mesh::BumpMappingParams& bumpMappingParams);
 
     void _generateNormalAndHeightMaps(const mvsUtils::MultiViewParams& mp,
@@ -215,18 +215,18 @@
                                       const GEO::Mesh& sparseMesh,
                                       size_t atlasID,
                                       mvsUtils::ImagesCache<image::Image<image::RGBfColor>>& imageCache,
-                                      const bfs::path& outPath,
+                                      const fs::path& outPath,
                                       const mesh::BumpMappingParams& bumpMappingParams);
 
     /// Fill holes and write texture files for the given texture atlas
     void writeTexture(AccuImage& atlasTexture,
                       const std::size_t atlasID,
-                      const bfs::path& outPath,
+                      const fs::path& outPath,
                       image::EImageFileType textureFileType,
                       const int level);
 
     /// Save textured mesh as an OBJ + MTL file
-    void saveAs(const bfs::path& dir, const std::string& basename, aliceVision::mesh::EFileType meshFileType = aliceVision::mesh::EFileType::OBJ);
+    void saveAs(const fs::path& dir, const std::string& basename, aliceVision::mesh::EFileType meshFileType = aliceVision::mesh::EFileType::OBJ);
 };
 
 }  // namespace mesh
diff -Naur alicevision/src/aliceVision/mvsData/CMakeLists.txt alicevision.new/src/aliceVision/mvsData/CMakeLists.txt
--- alicevision/src/aliceVision/mvsData/CMakeLists.txt	2024-05-14 15:34:54.375871432 +0200
+++ alicevision.new/src/aliceVision/mvsData/CMakeLists.txt	2024-05-14 15:35:10.481002669 +0200
@@ -34,7 +34,6 @@
     aliceVision_numeric
     aliceVision_image
     ZLIB::ZLIB
-    Boost::filesystem
     Boost::boost
     OpenImageIO::OpenImageIO
     OpenImageIO::OpenImageIO_Util
diff -Naur alicevision/src/aliceVision/mvsData/StaticVector.hpp alicevision.new/src/aliceVision/mvsData/StaticVector.hpp
--- alicevision/src/aliceVision/mvsData/StaticVector.hpp	2024-05-14 15:34:54.103869216 +0200
+++ alicevision.new/src/aliceVision/mvsData/StaticVector.hpp	2024-05-14 15:35:10.481002669 +0200
@@ -11,15 +11,13 @@
 #include <algorithm>
 #include <assert.h>
 #include <cstdlib>
+#include <filesystem>
 #include <sstream>
 #include <vector>
 #include <zlib.h>
 #include <iostream>
 #include <stdexcept>
 
-#include <boost/filesystem.hpp>
-#include <boost/filesystem/path.hpp>
-
 namespace aliceVision {
 
 template<class T>
@@ -345,8 +343,8 @@
 {
     ALICEVISION_LOG_DEBUG("[IO] saveArrayToFile: " << fileName);
 
-    boost::filesystem::path filepath = fileName;
-    boost::filesystem::create_directories(filepath.parent_path());
+    std::filesystem::path filepath = fileName;
+    std::filesystem::create_directories(filepath.parent_path());
 
     if (!a)
     {
diff -Naur alicevision/src/aliceVision/mvsUtils/CMakeLists.txt alicevision.new/src/aliceVision/mvsUtils/CMakeLists.txt
--- alicevision/src/aliceVision/mvsUtils/CMakeLists.txt	2024-05-14 15:34:54.375871432 +0200
+++ alicevision.new/src/aliceVision/mvsUtils/CMakeLists.txt	2024-05-14 15:35:10.481002669 +0200
@@ -29,6 +29,5 @@
     OpenImageIO::OpenImageIO_Util
   PRIVATE_LINKS
     aliceVision_system
-    Boost::filesystem
     Boost::boost
 )
diff -Naur alicevision/src/aliceVision/mvsUtils/ImagesCache.hpp alicevision.new/src/aliceVision/mvsUtils/ImagesCache.hpp
--- alicevision/src/aliceVision/mvsUtils/ImagesCache.hpp	2024-05-14 15:34:54.104869224 +0200
+++ alicevision.new/src/aliceVision/mvsUtils/ImagesCache.hpp	2024-05-14 15:35:10.481002669 +0200
@@ -14,6 +14,7 @@
 #include <aliceVision/mvsData/StaticVector.hpp>
 #include <aliceVision/mvsUtils/MultiViewParams.hpp>
 
+#include <list>
 #include <future>
 #include <mutex>
 
diff -Naur alicevision/src/aliceVision/mvsUtils/mapIO.cpp alicevision.new/src/aliceVision/mvsUtils/mapIO.cpp
--- alicevision/src/aliceVision/mvsUtils/mapIO.cpp	2024-05-14 15:34:54.105869232 +0200
+++ alicevision.new/src/aliceVision/mvsUtils/mapIO.cpp	2024-05-14 15:35:10.482002677 +0200
@@ -11,10 +11,11 @@
 #include <aliceVision/numeric/numeric.hpp>
 #include <aliceVision/image/io.hpp>
 
-#include <boost/filesystem.hpp>
 #include <boost/regex.hpp>
 
-namespace fs = boost::filesystem;
+#include <filesystem>
+
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace mvsUtils {
@@ -142,7 +143,7 @@
 
     const boost::regex mapPattern(mapPath.stem().string() + "_\\d+_\\d+" + mapPath.extension().string());
 
-    for (auto& entry : boost::make_iterator_range(boost::filesystem::directory_iterator(mapDirectory), {}))
+    for (auto& entry : fs::directory_iterator{mapDirectory})
     {
         if (boost::regex_match(entry.path().filename().string(), mapPattern))
             out_mapTilePathList.push_back(entry.path().string());
diff -Naur alicevision/src/aliceVision/mvsUtils/MultiViewParams.cpp alicevision.new/src/aliceVision/mvsUtils/MultiViewParams.cpp
--- alicevision/src/aliceVision/mvsUtils/MultiViewParams.cpp	2024-05-14 15:34:54.104869224 +0200
+++ alicevision.new/src/aliceVision/mvsUtils/MultiViewParams.cpp	2024-05-14 15:35:10.434002287 +0200
@@ -18,7 +18,6 @@
 #include <aliceVision/utils/filesIO.hpp>
 #include <aliceVision/camera/camera.hpp>
 
-#include <boost/filesystem.hpp>
 #include <boost/accumulators/accumulators.hpp>
 #include <boost/accumulators/statistics.hpp>
 #include <boost/property_tree/ini_parser.hpp>
@@ -26,13 +25,14 @@
 #include <boost/algorithm/string/classification.hpp>
 #include <boost/lexical_cast.hpp>
 
+#include <filesystem>
 #include <iostream>
 #include <set>
 
 namespace aliceVision {
 namespace mvsUtils {
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 MultiViewParams::MultiViewParams(const sfmData::SfMData& sfmData,
                                  const std::string& imagesFolder,
diff -Naur alicevision/src/aliceVision/photometricStereo/CMakeLists.txt alicevision.new/src/aliceVision/photometricStereo/CMakeLists.txt
--- alicevision/src/aliceVision/photometricStereo/CMakeLists.txt	2024-05-14 15:34:54.376871441 +0200
+++ alicevision.new/src/aliceVision/photometricStereo/CMakeLists.txt	2024-05-14 15:35:10.482002677 +0200
@@ -21,6 +21,4 @@
     aliceVision_sfmData
     aliceVision_sfmDataIO
     aliceVision_mvsData
-    Boost::filesystem
-
 )
diff -Naur alicevision/src/aliceVision/photometricStereo/photometricDataIO.cpp alicevision.new/src/aliceVision/photometricStereo/photometricDataIO.cpp
--- alicevision/src/aliceVision/photometricStereo/photometricDataIO.cpp	2024-05-14 15:34:54.108869257 +0200
+++ alicevision.new/src/aliceVision/photometricStereo/photometricDataIO.cpp	2024-05-14 15:35:10.482002677 +0200
@@ -12,14 +12,14 @@
 #include <boost/property_tree/json_parser.hpp>
 
 #include <boost/algorithm/string.hpp>
-#include <boost/filesystem.hpp>
 
 #include <iostream>
 #include <sstream>
+#include <filesystem>
 #include <fstream>
 
 namespace bpt = boost::property_tree;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace photometricStereo {
diff -Naur alicevision/src/aliceVision/photometricStereo/photometricStereo.cpp alicevision.new/src/aliceVision/photometricStereo/photometricStereo.cpp
--- alicevision/src/aliceVision/photometricStereo/photometricStereo.cpp	2024-05-14 15:34:54.109869265 +0200
+++ alicevision.new/src/aliceVision/photometricStereo/photometricStereo.cpp	2024-05-14 15:35:10.482002677 +0200
@@ -15,14 +15,13 @@
 #include <Eigen/Dense>
 #include <Eigen/Core>
 
-#include <boost/filesystem.hpp>
-
 #include <iostream>
 #include <sstream>
+#include <filesystem>
 #include <fstream>
 #include <algorithm>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace photometricStereo {
@@ -581,7 +580,7 @@
     {
         fs::path currentFilePath = itr->path();
 
-        std::string fileExtension = fs::extension(currentFilePath.string());
+        std::string fileExtension = currentFilePath.extension().string();
         std::transform(fileExtension.begin(), fileExtension.end(), fileExtension.begin(), ::tolower);
 
         if (!boost::algorithm::icontains(currentFilePath.stem().string(), "mask") &&
diff -Naur alicevision/src/aliceVision/sensorDB/CMakeLists.txt alicevision.new/src/aliceVision/sensorDB/CMakeLists.txt
--- alicevision/src/aliceVision/sensorDB/CMakeLists.txt	2024-05-14 15:34:54.377871449 +0200
+++ alicevision.new/src/aliceVision/sensorDB/CMakeLists.txt	2024-05-14 15:35:10.482002677 +0200
@@ -15,7 +15,6 @@
 alicevision_add_library(aliceVision_sensorDB
   SOURCES ${sensorDB_files_headers} ${sensorDB_files_sources}
   PRIVATE_LINKS
-    Boost::filesystem
     Boost::system
     Boost::boost
 )
@@ -26,7 +25,7 @@
 )
 
 # Unit tests
-alicevision_add_test(parseDatabase_test.cpp NAME "sensorDB_parseDatabase" LINKS aliceVision_sensorDB Boost::filesystem)
+alicevision_add_test(parseDatabase_test.cpp NAME "sensorDB_parseDatabase" LINKS aliceVision_sensorDB)
 
 
 
diff -Naur alicevision/src/aliceVision/sensorDB/parseDatabase.cpp alicevision.new/src/aliceVision/sensorDB/parseDatabase.cpp
--- alicevision/src/aliceVision/sensorDB/parseDatabase.cpp	2024-05-14 15:34:54.112869289 +0200
+++ alicevision.new/src/aliceVision/sensorDB/parseDatabase.cpp	2024-05-14 15:35:10.482002677 +0200
@@ -8,17 +8,17 @@
 #include "parseDatabase.hpp"
 #include <aliceVision/sensorDB/Datasheet.hpp>
 
-#include <boost/filesystem.hpp>
 #include <boost/algorithm/string.hpp>
 
 #include <vector>
 #include <string>
 #include <iostream>
+#include <filesystem>
 #include <algorithm>
 #include <fstream>
 #include <iterator>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace sensorDB {
diff -Naur alicevision/src/aliceVision/sensorDB/parseDatabase_test.cpp alicevision.new/src/aliceVision/sensorDB/parseDatabase_test.cpp
--- alicevision/src/aliceVision/sensorDB/parseDatabase_test.cpp	2024-05-14 15:34:54.112869289 +0200
+++ alicevision.new/src/aliceVision/sensorDB/parseDatabase_test.cpp	2024-05-14 15:35:10.482002677 +0200
@@ -7,8 +7,7 @@
 
 #include <aliceVision/sensorDB/parseDatabase.hpp>
 
-#include <boost/filesystem.hpp>
-
+#include <filesystem>
 #include <string>
 
 #define BOOST_TEST_MODULE parseDatabase
@@ -17,7 +16,7 @@
 #include <boost/test/tools/floating_point_comparison.hpp>
 
 using namespace aliceVision::sensorDB;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 static const std::string sDatabase = (fs::path(THIS_SOURCE_DIR) / "cameraSensors.db").string();
 
diff -Naur alicevision/src/aliceVision/sfm/bundle/BundleAdjustmentCeres.cpp alicevision.new/src/aliceVision/sfm/bundle/BundleAdjustmentCeres.cpp
--- alicevision/src/aliceVision/sfm/bundle/BundleAdjustmentCeres.cpp	2024-05-14 15:34:54.114869305 +0200
+++ alicevision.new/src/aliceVision/sfm/bundle/BundleAdjustmentCeres.cpp	2024-05-14 15:35:10.466002547 +0200
@@ -14,14 +14,13 @@
 #include <aliceVision/config.hpp>
 #include <aliceVision/camera/camera.hpp>
 
-#include <boost/filesystem.hpp>
-
 #include <ceres/rotation.h>
 
+#include <filesystem>
 #include <fstream>
 #include <memory>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace sfm {
diff -Naur alicevision/src/aliceVision/sfm/bundle/BundleAdjustmentSymbolicCeres.cpp alicevision.new/src/aliceVision/sfm/bundle/BundleAdjustmentSymbolicCeres.cpp
--- alicevision/src/aliceVision/sfm/bundle/BundleAdjustmentSymbolicCeres.cpp	2024-05-14 15:34:54.115869314 +0200
+++ alicevision.new/src/aliceVision/sfm/bundle/BundleAdjustmentSymbolicCeres.cpp	2024-05-14 15:35:10.466002547 +0200
@@ -12,7 +12,6 @@
 #include <aliceVision/sfmData/SfMData.hpp>
 #include <aliceVision/config.hpp>
 #include <aliceVision/camera/Equidistant.hpp>
-#include <boost/filesystem.hpp>
 
 #include <aliceVision/sfm/bundle/manifolds/so3.hpp>
 #include <aliceVision/sfm/bundle/manifolds/so3vec.hpp>
@@ -25,9 +24,10 @@
 #include <aliceVision/sfm/bundle/costfunctions/panoramaPinhole.hpp>
 #include <aliceVision/sfm/bundle/costfunctions/rotationPrior.hpp>
 
+#include <filesystem>
 #include <fstream>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace sfm {
diff -Naur alicevision/src/aliceVision/sfm/CMakeLists.txt alicevision.new/src/aliceVision/sfm/CMakeLists.txt
--- alicevision/src/aliceVision/sfm/CMakeLists.txt	2024-05-14 15:34:54.377871449 +0200
+++ alicevision.new/src/aliceVision/sfm/CMakeLists.txt	2024-05-14 15:35:10.465002539 +0200
@@ -74,7 +74,6 @@
     aliceVision_linearProgramming
     aliceVision_sfmData
     aliceVision_sfmDataIO
-    Boost::filesystem
     Boost::boost
     ${CERES_LIBRARIES}
   PRIVATE_LINKS
diff -Naur alicevision/src/aliceVision/sfm/generateReport.cpp alicevision.new/src/aliceVision/sfm/generateReport.cpp
--- alicevision/src/aliceVision/sfm/generateReport.cpp	2024-05-14 15:34:54.116869322 +0200
+++ alicevision.new/src/aliceVision/sfm/generateReport.cpp	2024-05-14 15:35:10.466002547 +0200
@@ -12,9 +12,9 @@
 #include <dependencies/htmlDoc/htmlDoc.hpp>
 #include <dependencies/vectorGraphics/svgDrawer.hpp>
 
-#include <boost/filesystem.hpp>
+#include <filesystem>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace sfm {
diff -Naur alicevision/src/aliceVision/sfm/LocalBundleAdjustmentGraph.cpp alicevision.new/src/aliceVision/sfm/LocalBundleAdjustmentGraph.cpp
--- alicevision/src/aliceVision/sfm/LocalBundleAdjustmentGraph.cpp	2024-05-14 15:34:54.113869297 +0200
+++ alicevision.new/src/aliceVision/sfm/LocalBundleAdjustmentGraph.cpp	2024-05-14 15:35:10.465002539 +0200
@@ -7,14 +7,14 @@
 #include "LocalBundleAdjustmentGraph.hpp"
 #include <aliceVision/stl/stl.hpp>
 #include <aliceVision/sfmData/SfMData.hpp>
-#include <boost/filesystem.hpp>
 
 #include <lemon/bfs.h>
 
 #include <fstream>
+#include <filesystem>
 #include <algorithm>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace sfm {
diff -Naur alicevision/src/aliceVision/sfm/pipeline/global/globalSfM_test.cpp alicevision.new/src/aliceVision/sfm/pipeline/global/globalSfM_test.cpp
--- alicevision/src/aliceVision/sfm/pipeline/global/globalSfM_test.cpp	2024-05-14 15:34:54.118869338 +0200
+++ alicevision.new/src/aliceVision/sfm/pipeline/global/globalSfM_test.cpp	2024-05-14 15:35:10.466002547 +0200
@@ -11,8 +11,6 @@
 #include <aliceVision/matching/IndMatch.hpp>
 #include <aliceVision/sfm/sfm.hpp>
 
-#include <boost/filesystem.hpp>
-
 #include <cmath>
 #include <cstdio>
 #include <iostream>
@@ -28,8 +26,6 @@
 using namespace aliceVision::sfm;
 using namespace aliceVision::sfmData;
 
-namespace fs = boost::filesystem;
-
 // Test summary:
 // - Create features points and matching from the synthetic dataset
 // - Init a SfMData scene VIew and Intrinsic from a synthetic dataset
diff -Naur alicevision/src/aliceVision/sfm/pipeline/regionsIO.cpp alicevision.new/src/aliceVision/sfm/pipeline/regionsIO.cpp
--- alicevision/src/aliceVision/sfm/pipeline/regionsIO.cpp	2024-05-14 15:34:54.120869354 +0200
+++ alicevision.new/src/aliceVision/sfm/pipeline/regionsIO.cpp	2024-05-14 15:35:10.467002555 +0200
@@ -8,12 +8,12 @@
 #include "regionsIO.hpp"
 
 #include <aliceVision/system/ProgressDisplay.hpp>
-#include <boost/filesystem.hpp>
 
 #include <atomic>
 #include <cassert>
+#include <filesystem>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace sfm {
diff -Naur alicevision/src/aliceVision/sfm/pipeline/sequential/ReconstructionEngine_sequentialSfM.hpp alicevision.new/src/aliceVision/sfm/pipeline/sequential/ReconstructionEngine_sequentialSfM.hpp
--- alicevision/src/aliceVision/sfm/pipeline/sequential/ReconstructionEngine_sequentialSfM.hpp	2024-05-14 15:34:54.121869362 +0200
+++ alicevision.new/src/aliceVision/sfm/pipeline/sequential/ReconstructionEngine_sequentialSfM.hpp	2024-05-14 15:35:10.434002287 +0200
@@ -18,15 +18,17 @@
 #include <dependencies/htmlDoc/htmlDoc.hpp>
 #include <aliceVision/utils/Histogram.hpp>
 
-#include <boost/filesystem.hpp>
 #include <boost/property_tree/ptree.hpp>
 
-namespace fs = boost::filesystem;
+#include <filesystem>
+
 namespace pt = boost::property_tree;
 
 namespace aliceVision {
 namespace sfm {
 
+namespace fs = std::filesystem;
+
 /// Image score contains <ImageId, NbPutativeCommonPoint, score, isIntrinsicsReconstructed>
 typedef std::tuple<IndexT, std::size_t, std::size_t, bool> ViewConnectionScore;
 
diff -Naur alicevision/src/aliceVision/sfmData/CMakeLists.txt alicevision.new/src/aliceVision/sfmData/CMakeLists.txt
--- alicevision/src/aliceVision/sfmData/CMakeLists.txt	2024-05-14 15:34:54.378871457 +0200
+++ alicevision.new/src/aliceVision/sfmData/CMakeLists.txt	2024-05-14 15:35:10.467002555 +0200
@@ -33,7 +33,6 @@
     aliceVision_camera
     aliceVision_sensorDB
     aliceVision_stl
-    Boost::filesystem
   PRIVATE_LINKS
     Boost::boost
 )
diff -Naur alicevision/src/aliceVision/sfmData/SfMData.cpp alicevision.new/src/aliceVision/sfmData/SfMData.cpp
--- alicevision/src/aliceVision/sfmData/SfMData.cpp	2024-05-14 15:34:54.124869387 +0200
+++ alicevision.new/src/aliceVision/sfmData/SfMData.cpp	2024-05-14 15:35:10.467002555 +0200
@@ -9,7 +9,7 @@
 
 #include <aliceVision/system/Logger.hpp>
 
-#include <boost/filesystem.hpp>
+#include <filesystem>
 
 namespace aliceVision {
 namespace sfmData {
@@ -18,7 +18,7 @@
 using namespace aliceVision::camera;
 using namespace aliceVision::image;
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 
 bool SfMData::operator==(const SfMData& other) const
@@ -126,7 +126,7 @@
     absolutePaths.reserve(folders.size());
     for (const auto& folder : folders)
     {
-        const fs::path f = fs::absolute(folder, fs::path(absolutePath).parent_path());
+        const fs::path f = fs::absolute(folder);
         if (fs::exists(f))
         {
             // fs::canonical can only be used if the path exists
diff -Naur alicevision/src/aliceVision/sfmData/sfmData_test.cpp alicevision.new/src/aliceVision/sfmData/sfmData_test.cpp
--- alicevision/src/aliceVision/sfmData/sfmData_test.cpp	2024-05-14 15:34:54.126869403 +0200
+++ alicevision.new/src/aliceVision/sfmData/sfmData_test.cpp	2024-05-14 15:35:10.467002555 +0200
@@ -1,13 +1,13 @@
-
-#include <boost/filesystem.hpp>
 #include <aliceVision/sfmData/SfMData.hpp>
 
 #define BOOST_TEST_MODULE sfmData
 
 #include <boost/test/unit_test.hpp>
 
+#include <filesystem>
+
 using namespace aliceVision;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 BOOST_AUTO_TEST_CASE(SfMData_InternalFolders)
 {
diff -Naur alicevision/src/aliceVision/sfmData/uid.cpp alicevision.new/src/aliceVision/sfmData/uid.cpp
--- alicevision/src/aliceVision/sfmData/uid.cpp	2024-05-14 15:34:54.126869403 +0200
+++ alicevision.new/src/aliceVision/sfmData/uid.cpp	2024-05-14 15:35:10.468002563 +0200
@@ -9,11 +9,13 @@
 
 #include <aliceVision/sfmData/View.hpp>
 #include <aliceVision/stl/hash.hpp>
+#include <aliceVision/utils/filesIO.hpp>
 
 #include <boost/algorithm/string/case_conv.hpp>
-#include <boost/filesystem.hpp>
 
-namespace fs = boost::filesystem;
+#include <filesystem>
+
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace sfmData {
@@ -85,8 +87,8 @@
     else
     {
         // if no original date/time, fallback to the file date/time
-        std::time_t t = fs::last_write_time(imagePath);
-        stl::hash_combine(uid, t);
+        auto lastWriteTime = utils::getLastWriteTime(imagePath.string());
+        stl::hash_combine(uid, lastWriteTime);
     }
 
     // cannot use view.getWidth() and view.getHeight() directly
diff -Naur alicevision/src/aliceVision/sfmData/view_test.cpp alicevision.new/src/aliceVision/sfmData/view_test.cpp
--- alicevision/src/aliceVision/sfmData/view_test.cpp	2024-05-14 15:34:54.126869403 +0200
+++ alicevision.new/src/aliceVision/sfmData/view_test.cpp	2024-05-14 15:35:10.468002563 +0200
@@ -1,5 +1,3 @@
-
-#include <boost/filesystem.hpp>
 #include <aliceVision/sfmData/View.hpp>
 
 #define BOOST_TEST_MODULE view
@@ -7,7 +5,6 @@
 #include <boost/test/unit_test.hpp>
 
 using namespace aliceVision;
-namespace fs = boost::filesystem;
 
 BOOST_AUTO_TEST_CASE(View_Metadata)
 {
diff -Naur alicevision/src/aliceVision/sfmDataIO/AlembicExporter.cpp alicevision.new/src/aliceVision/sfmDataIO/AlembicExporter.cpp
--- alicevision/src/aliceVision/sfmDataIO/AlembicExporter.cpp	2024-05-14 15:34:54.127869411 +0200
+++ alicevision.new/src/aliceVision/sfmDataIO/AlembicExporter.cpp	2024-05-14 15:35:10.462002515 +0200
@@ -12,11 +12,10 @@
 #include <Alembic/AbcCoreOgawa/All.h>
 #include <Alembic/Abc/OObject.h>
 
-#include <boost/filesystem.hpp>
-
 #include <numeric>
+#include <filesystem>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace sfmDataIO {
diff -Naur alicevision/src/aliceVision/sfmDataIO/bafIO.cpp alicevision.new/src/aliceVision/sfmDataIO/bafIO.cpp
--- alicevision/src/aliceVision/sfmDataIO/bafIO.cpp	2024-05-14 15:34:54.128869420 +0200
+++ alicevision.new/src/aliceVision/sfmDataIO/bafIO.cpp	2024-05-14 15:35:10.462002515 +0200
@@ -7,11 +7,10 @@
 
 #include "bafIO.hpp"
 
-#include <boost/filesystem.hpp>
-
+#include <filesystem>
 #include <fstream>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace sfmDataIO {
diff -Naur alicevision/src/aliceVision/sfmDataIO/CMakeLists.txt alicevision.new/src/aliceVision/sfmDataIO/CMakeLists.txt
--- alicevision/src/aliceVision/sfmDataIO/CMakeLists.txt	2024-05-14 15:34:54.378871457 +0200
+++ alicevision.new/src/aliceVision/sfmDataIO/CMakeLists.txt	2024-05-14 15:35:10.462002515 +0200
@@ -40,10 +40,8 @@
   PUBLIC_LINKS
     aliceVision_sfmData
     aliceVision_camera
-    Boost::filesystem
   PRIVATE_LINKS
     aliceVision_image
-    Boost::filesystem
     Boost::regex
     Boost::boost
 )
diff -Naur alicevision/src/aliceVision/sfmDataIO/colmap.cpp alicevision.new/src/aliceVision/sfmDataIO/colmap.cpp
--- alicevision/src/aliceVision/sfmDataIO/colmap.cpp	2024-05-14 15:34:54.128869420 +0200
+++ alicevision.new/src/aliceVision/sfmDataIO/colmap.cpp	2024-05-14 15:35:10.463002523 +0200
@@ -8,12 +8,11 @@
 #include <aliceVision/geometry/Pose3.hpp>
 #include <aliceVision/camera/cameraCommon.hpp>
 
-#include <boost/filesystem.hpp>
-
-#include <sstream>
+#include <filesystem>
 #include <fstream>
+#include <sstream>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace sfmDataIO {
diff -Naur alicevision/src/aliceVision/sfmDataIO/gtIO.cpp alicevision.new/src/aliceVision/sfmDataIO/gtIO.cpp
--- alicevision/src/aliceVision/sfmDataIO/gtIO.cpp	2024-05-14 15:34:54.131869444 +0200
+++ alicevision.new/src/aliceVision/sfmDataIO/gtIO.cpp	2024-05-14 15:35:10.463002523 +0200
@@ -10,12 +10,12 @@
 #include <aliceVision/sfmData/uid.hpp>
 
 #include <boost/regex.hpp>
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <fstream>
 #include <vector>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace sfmDataIO {
@@ -23,7 +23,7 @@
 bool read_aliceVision_Camera(const std::string& camName, camera::Pinhole& cam, geometry::Pose3& pose)
 {
     std::vector<double> val;
-    if (fs::extension(camName) == ".bin")
+    if (fs::path(camName).extension() == ".bin")
     {
         std::ifstream in(camName, std::ios::in | std::ios::binary);
         if (!in.is_open())
@@ -59,7 +59,7 @@
 
     // Update the camera from file value
     Mat34 P;
-    if (fs::extension(camName) == ".bin")
+    if (fs::path(camName).extension() == ".bin")
     {
         P << val[0], val[3], val[6], val[9], val[1], val[4], val[7], val[10], val[2], val[5], val[8], val[11];
     }
@@ -141,10 +141,10 @@
     std::vector<std::string> binFiles;
     std::vector<std::string> camFiles;
 
-    boost::filesystem::directory_iterator endItr;
-    for (boost::filesystem::directory_iterator i(sGTPath); i != endItr; ++i)
+    fs::directory_iterator endItr;
+    for (fs::directory_iterator i(sGTPath); i != endItr; ++i)
     {
-        if (!boost::filesystem::is_regular_file(i->status()))
+        if (!fs::is_regular_file(i->status()))
             continue;
 
         boost::smatch what;
diff -Naur alicevision/src/aliceVision/sfmDataIO/middlebury.cpp alicevision.new/src/aliceVision/sfmDataIO/middlebury.cpp
--- alicevision/src/aliceVision/sfmDataIO/middlebury.cpp	2024-05-14 15:34:54.131869444 +0200
+++ alicevision.new/src/aliceVision/sfmDataIO/middlebury.cpp	2024-05-14 15:35:10.463002523 +0200
@@ -8,14 +8,13 @@
 #include <aliceVision/numeric/numeric.hpp>
 #include <aliceVision/image/io.hpp>
 
-#include <boost/filesystem.hpp>
-
+#include <filesystem>
 #include <fstream>
 
 namespace aliceVision {
 namespace sfmDataIO {
 
-namespace bfs = boost::filesystem;
+namespace fs = std::filesystem;
 
 Mat3 extractMat3FromVec(const std::vector<std::string>& entries, std::size_t offset)
 {
@@ -106,7 +105,7 @@
         Vec3 translation;
         parseMiddleburyCamera(line, imageName, matK, rotation, translation);
 
-        const auto imagePath = (bfs::path(basePath) / bfs::path(imageName)).string();
+        const auto imagePath = (fs::path(basePath) / fs::path(imageName)).string();
         int imageWidth{};
         int imageHeight{};
         image::readImageSize(imagePath, imageWidth, imageHeight);
diff -Naur alicevision/src/aliceVision/sfmDataIO/sfmDataIOCompatibility_test.cpp alicevision.new/src/aliceVision/sfmDataIO/sfmDataIOCompatibility_test.cpp
--- alicevision/src/aliceVision/sfmDataIO/sfmDataIOCompatibility_test.cpp	2024-05-14 15:34:54.132869452 +0200
+++ alicevision.new/src/aliceVision/sfmDataIO/sfmDataIOCompatibility_test.cpp	2024-05-14 15:35:10.464002531 +0200
@@ -9,9 +9,9 @@
 #include <aliceVision/sfmDataIO/sfmDataIO.hpp>
 #include <aliceVision/sfmDataIO/sceneSample.hpp>
 
-#include <boost/filesystem.hpp>
 #include <boost/preprocessor/stringize.hpp>
 
+#include <filesystem>
 #include <sstream>
 
 #define BOOST_TEST_MODULE sfmDataIO
@@ -21,7 +21,7 @@
 using namespace aliceVision;
 using namespace aliceVision::sfmDataIO;
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 BOOST_AUTO_TEST_CASE(Compatibility_generate_files_current_version)
 {
diff -Naur alicevision/src/aliceVision/sfmDataIO/sfmDataIO.cpp alicevision.new/src/aliceVision/sfmDataIO/sfmDataIO.cpp
--- alicevision/src/aliceVision/sfmDataIO/sfmDataIO.cpp	2024-05-14 15:34:54.132869452 +0200
+++ alicevision.new/src/aliceVision/sfmDataIO/sfmDataIO.cpp	2024-05-14 15:35:10.464002531 +0200
@@ -12,15 +12,16 @@
 #include <aliceVision/sfmDataIO/plyIO.hpp>
 #include <aliceVision/sfmDataIO/bafIO.hpp>
 #include <aliceVision/sfmDataIO/gtIO.hpp>
+#include <aliceVision/utils/filesIO.hpp>
 
 #if ALICEVISION_IS_DEFINED(ALICEVISION_HAVE_ALEMBIC)
     #include <aliceVision/sfmDataIO/AlembicExporter.hpp>
     #include <aliceVision/sfmDataIO/AlembicImporter.hpp>
 #endif
 
-#include <boost/filesystem.hpp>
+#include <filesystem>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace sfmDataIO {
@@ -107,7 +108,7 @@
 
 bool Load(sfmData::SfMData& sfmData, const std::string& filename, ESfMData partFlag)
 {
-    const std::string extension = fs::extension(filename);
+    const std::string extension = fs::path(filename).extension().string();
     bool status = false;
 
     if (extension == ".sfm" || extension == ".json")  // JSON File
@@ -147,7 +148,7 @@
 {
     const fs::path bPath = fs::path(filename);
     const std::string extension = bPath.extension().string();
-    const std::string tmpPath = (bPath.parent_path() / bPath.stem()).string() + "." + fs::unique_path().string() + extension;
+    const std::string tmpPath = (bPath.parent_path() / bPath.stem()).string() + "." + utils::generateUniqueFilename() + extension;
     bool status = false;
 
     if (extension == ".sfm" || extension == ".json")  // JSON File
diff -Naur alicevision/src/aliceVision/sfmDataIO/sfmDataIO_test.cpp alicevision.new/src/aliceVision/sfmDataIO/sfmDataIO_test.cpp
--- alicevision/src/aliceVision/sfmDataIO/sfmDataIO_test.cpp	2024-05-14 15:34:54.132869452 +0200
+++ alicevision.new/src/aliceVision/sfmDataIO/sfmDataIO_test.cpp	2024-05-14 15:35:10.464002531 +0200
@@ -10,8 +10,7 @@
 #include <aliceVision/sfmDataIO/sfmDataIO.hpp>
 #include <aliceVision/config.hpp>
 
-#include <boost/filesystem.hpp>
-
+#include <filesystem>
 #include <sstream>
 
 #define BOOST_TEST_MODULE sfmDataIO
@@ -24,7 +23,7 @@
 using namespace aliceVision::geometry;
 using namespace aliceVision::sfmDataIO;
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 // Create a SfM scene with desired count of views & poses & intrinsic (shared or not)
 // Add a 3D point with observation in 2 view (just in order to have non empty data)
diff -Naur alicevision/src/aliceVision/sfmDataIO/viewIO.cpp alicevision.new/src/aliceVision/sfmDataIO/viewIO.cpp
--- alicevision/src/aliceVision/sfmDataIO/viewIO.cpp	2024-05-14 15:34:54.133869460 +0200
+++ alicevision.new/src/aliceVision/sfmDataIO/viewIO.cpp	2024-05-14 15:35:10.464002531 +0200
@@ -15,7 +15,7 @@
 #include <stdexcept>
 #include <regex>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 namespace sfmDataIO {
@@ -53,7 +53,7 @@
             }
 
             // Get view image filename without extension
-            const std::string filename = boost::filesystem::path(view.getImage().getImagePath()).stem().string();
+            const std::string filename = fs::path(view.getImage().getImagePath()).stem().string();
 
             std::smatch match;
             std::regex_search(filename, match, re);
@@ -319,8 +319,8 @@
 
 std::vector<std::string> viewPathsFromFolders(const sfmData::View& view, const std::vector<std::string>& folders)
 {
-    return utils::getFilesPathsFromFolders(folders, [&view](const boost::filesystem::path& path) {
-        const boost::filesystem::path stem = path.stem();
+    return utils::getFilesPathsFromFolders(folders, [&view](const std::filesystem::path& path) {
+        const std::filesystem::path stem = path.stem();
         return (stem == std::to_string(view.getViewId()) || stem == fs::path(view.getImage().getImagePath()).stem());
     });
 }
diff -Naur alicevision/src/aliceVision/sfmDataIO/viewIO.hpp alicevision.new/src/aliceVision/sfmDataIO/viewIO.hpp
--- alicevision/src/aliceVision/sfmDataIO/viewIO.hpp	2024-05-14 15:34:54.133869460 +0200
+++ alicevision.new/src/aliceVision/sfmDataIO/viewIO.hpp	2024-05-14 15:35:10.464002531 +0200
@@ -10,9 +10,9 @@
 #include <aliceVision/camera/cameraCommon.hpp>
 #include <aliceVision/camera/IntrinsicBase.hpp>
 
-#include <boost/filesystem.hpp>
 #include <aliceVision/sfmData/uid.hpp>
 
+#include <filesystem>
 #include <memory>
 
 namespace aliceVision {
diff -Naur alicevision/src/aliceVision/sphereDetection/sphereDetection.cpp alicevision.new/src/aliceVision/sphereDetection/sphereDetection.cpp
--- alicevision/src/aliceVision/sphereDetection/sphereDetection.cpp	2024-05-14 15:34:54.133869460 +0200
+++ alicevision.new/src/aliceVision/sphereDetection/sphereDetection.cpp	2024-05-14 15:35:10.435002295 +0200
@@ -43,7 +43,6 @@
 #include <aliceVision/sfmDataIO/sfmDataIO.hpp>
 
 // namespaces
-namespace fs = boost::filesystem;
 namespace bpt = boost::property_tree;
 
 namespace aliceVision {
diff -Naur alicevision/src/aliceVision/sphereDetection/sphereDetection.hpp alicevision.new/src/aliceVision/sphereDetection/sphereDetection.hpp
--- alicevision/src/aliceVision/sphereDetection/sphereDetection.hpp	2024-05-14 15:34:54.133869460 +0200
+++ alicevision.new/src/aliceVision/sphereDetection/sphereDetection.hpp	2024-05-14 15:35:10.435002295 +0200
@@ -16,15 +16,14 @@
 #include <aliceVision/sfmData/SfMData.hpp>
 #include <aliceVision/sfmDataIO/sfmDataIO.hpp>
 
-// Boost
-#include <boost/filesystem.hpp>
-
-// namespaces
-namespace fs = boost::filesystem;
+#include <filesystem>
 
 namespace aliceVision {
 namespace sphereDetection {
 
+// namespaces
+namespace fs = std::filesystem;
+
 struct Prediction
 {
     std::vector<std::vector<float>> bboxes;
diff -Naur alicevision/src/aliceVision/system/nvtx.cpp alicevision.new/src/aliceVision/system/nvtx.cpp
--- alicevision/src/aliceVision/system/nvtx.cpp	2024-05-14 15:34:54.134869468 +0200
+++ alicevision.new/src/aliceVision/system/nvtx.cpp	2024-05-14 15:35:10.461002506 +0200
@@ -2,13 +2,13 @@
 
     #include <sstream>
     #include <nvToolsExtCuda.h>
-    #include <boost/filesystem/path.hpp>
+    #include <filesystem>
 
     #include "aliceVision/system/nvtx.hpp"
 
 void nvtxPushA(const char* label, const char* file, int line)
 {
-    boost::filesystem::path in(file);
+    std::filesystem::path in(file);
 
     std::ostringstream ostr;
     ostr << label << " " << in.filename() << ":" << line;
diff -Naur alicevision/src/aliceVision/utils/filesIO.hpp alicevision.new/src/aliceVision/utils/filesIO.hpp
--- alicevision/src/aliceVision/utils/filesIO.hpp	2024-05-14 15:34:54.135869477 +0200
+++ alicevision.new/src/aliceVision/utils/filesIO.hpp	2024-05-14 15:35:10.461002506 +0200
@@ -6,16 +6,21 @@
 
 #pragma once
 
-#include "boost/filesystem.hpp"
-
-#include <vector>
-#include <string>
+#include <codecvt>
+#include <filesystem>
 #include <functional>
+#include <iostream>
+#include <random>
+#include <string>
+#include <sys/stat.h>
+#include <vector>
 
-namespace fs = boost::filesystem;
 
 namespace aliceVision {
 namespace utils {
+
+namespace fs = std::filesystem;
+
 /**
  * @brief Allows to retrieve the files paths that validates a specific predicate by searching in a folder.
  * @param[in] the folders path
@@ -23,7 +28,7 @@
  * @return the paths list to the corresponding files if they validate the predicate, otherwise it returns an empty list.
  */
 inline std::vector<std::string> getFilesPathsFromFolder(const std::string& folder,
-                                                        const std::function<bool(const boost::filesystem::path&)>& predicate)
+                                                        const std::function<bool(const fs::path&)>& predicate)
 {
     // Get all files paths in folder
     std::vector<std::string> paths;
@@ -49,7 +54,7 @@
  * @return the paths list to the corresponding files if they validate the predicate, otherwise it returns an empty list.
  */
 inline std::vector<std::string> getFilesPathsFromFolders(const std::vector<std::string>& folders,
-                                                         const std::function<bool(const boost::filesystem::path&)>& predicate)
+                                                         const std::function<bool(const fs::path&)>& predicate)
 {
     std::vector<std::string> paths;
     for (const std::string& folder : folders)
@@ -61,5 +66,57 @@
     return paths;
 }
 
+/**
+ * @brief Generates a random filename of a specified length that is suitable for creating temporary files.
+ * This is meant to be an alternative to boost::filesystem::unique_path() as long as std::filesystem does not contain any alternative.
+ * @param[in] length The length of the random filename to generate
+ * @return A string of random characters
+ */
+inline std::string generateUniqueFilename(const int length = 16)
+{
+    static const char characters[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
+
+    std::random_device rd;
+    std::mt19937 randomTwEngine(rd());
+    int nbChars = sizeof(characters) - 1;  // -1 to exclude the null character at the end of the string from the count
+    std::uniform_int_distribution<> randomDist(0, nbChars - 1);
+
+    std::string filename;
+    filename.resize(length);
+
+    for (int i = 0; i < length; ++i)
+        filename[i] = characters[randomDist(randomTwEngine)];
+
+    return filename;
+}
+
+
+/**
+ * @brief Returns the last time a file was modified (based on OIIO's implementation).
+ * @param[in] path The path to get the last write time from
+ * @return The last time the file was modified as an std::time_t if it exists, 0 otherwise
+ */
+inline std::time_t getLastWriteTime(const std::string& path)
+{
+    #ifdef _WIN32
+        struct __stat64 st;
+        std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>, wchar_t> conv;
+        std::wstring str = conv.from_bytes(path.data(), path.data() + path.size());
+        auto r = _wstat64(std::filesystem::path(str).c_str(), &st);
+    #else
+        struct stat st;
+        auto r = stat(std::filesystem::path(path).c_str(), &st);
+    #endif
+
+    if (r == 0)  // success
+    {
+        return st.st_mtime;
+    }
+    else  // failure
+    {
+        return 0;
+    }
+}
+
 }  // namespace utils
 }  // namespace aliceVision
\ No newline at end of file
diff -Naur alicevision/src/aliceVision/voctree/CMakeLists.txt alicevision.new/src/aliceVision/voctree/CMakeLists.txt
--- alicevision/src/aliceVision/voctree/CMakeLists.txt	2024-05-14 15:34:54.379871465 +0200
+++ alicevision.new/src/aliceVision/voctree/CMakeLists.txt	2024-05-14 15:35:10.461002506 +0200
@@ -26,8 +26,6 @@
     aliceVision_sfmData
     aliceVision_system
     Boost::boost
-  PRIVATE_LINKS
-    Boost::filesystem
 )
 
 # Unit tests
diff -Naur alicevision/src/aliceVision/voctree/descriptorLoader.cpp alicevision.new/src/aliceVision/voctree/descriptorLoader.cpp
--- alicevision/src/aliceVision/voctree/descriptorLoader.cpp	2024-05-14 15:34:54.137869493 +0200
+++ alicevision.new/src/aliceVision/voctree/descriptorLoader.cpp	2024-05-14 15:35:10.461002506 +0200
@@ -10,6 +10,8 @@
 
 #include <boost/algorithm/string/predicate.hpp>
 
+#include <filesystem>
+
 namespace aliceVision {
 namespace voctree {
 
@@ -59,7 +61,7 @@
                               const std::vector<std::string>& featuresFolders,
                               std::map<IndexT, std::string>& descriptorsFiles)
 {
-    namespace bfs = boost::filesystem;
+    namespace fs = std::filesystem;
 
     descriptorsFiles.clear();
 
@@ -88,11 +90,11 @@
             for (const feature::EImageDescriberType descType : descTypes)
             {
                 // generate the equivalent .desc file path
-                const std::string filepath = bfs::path(bfs::path(featureFolder) / (std::to_string(view.first) + "." +
+                const std::string filepath = fs::path(fs::path(featureFolder) / (std::to_string(view.first) + "." +
                                                                                    feature::EImageDescriberType_enumToString(descType) + ".desc"))
                                                .string();
 
-                if (bfs::exists(filepath))
+                if (fs::exists(filepath))
                 {
                     descriptorsFiles[view.first] = filepath;
                     found = true;
diff -Naur alicevision/src/aliceVision/voctree/descriptorLoader.tcc alicevision.new/src/aliceVision/voctree/descriptorLoader.tcc
--- alicevision/src/aliceVision/voctree/descriptorLoader.tcc	2024-05-14 15:34:54.137869493 +0200
+++ alicevision.new/src/aliceVision/voctree/descriptorLoader.tcc	2024-05-14 15:35:10.461002506 +0200
@@ -8,11 +8,11 @@
 #include <aliceVision/system/ProgressDisplay.hpp>
 #include <aliceVision/system/Logger.hpp>
 
-#include <boost/filesystem.hpp>
 #include <boost/algorithm/string/case_conv.hpp>
 
-#include <iostream>
+#include <filesystem>
 #include <fstream>
+#include <iostream>
 
 namespace aliceVision {
 namespace voctree {
@@ -23,7 +23,7 @@
                          std::vector<DescriptorT>& descriptors,
                          std::vector<std::size_t> &numFeatures)
 {
-  namespace bfs = boost::filesystem;
+  namespace fs = std::filesystem;
   std::map<IndexT, std::string> descriptorsFiles;
   getListOfDescriptorFiles(sfmData, featuresFolders, descriptorsFiles);
   std::size_t numDescriptors = 0;
@@ -48,7 +48,7 @@
     else
     {
       // get the file size in byte and estimate the number of features without opening the file
-      numDescriptors += (bfs::file_size(currentFile.second) / bytesPerElement) / DescriptorT::static_size;
+      numDescriptors += (fs::file_size(currentFile.second) / bytesPerElement) / DescriptorT::static_size;
     }
     ++display;
   }
diff -Naur alicevision/src/cmake/AliceVisionConfig.cmake.in alicevision.new/src/cmake/AliceVisionConfig.cmake.in
--- alicevision/src/cmake/AliceVisionConfig.cmake.in	2024-05-14 15:34:54.137869493 +0200
+++ alicevision.new/src/cmake/AliceVisionConfig.cmake.in	2024-05-14 15:35:10.483002685 +0200
@@ -98,10 +98,6 @@
 endif()
 
 find_dependency(Boost COMPONENTS @ALICEVISION_BOOST_COMPONENTS@)
-set(BOOST_NO_CXX11 @BOOST_NO_CXX11@)
-if(BOOST_NO_CXX11)
- add_definitions(-DBOOST_NO_CXX11_SCOPED_ENUMS)
-endif()
 
 set(ALICEVISION_BUILD_SFM @ALICEVISION_BUILD_SFM@)
 if(ALICEVISION_BUILD_SFM)
diff -Naur alicevision/src/CMakeLists.txt alicevision.new/src/CMakeLists.txt
--- alicevision/src/CMakeLists.txt	2024-05-14 15:34:54.069868939 +0200
+++ alicevision.new/src/CMakeLists.txt	2024-05-14 15:35:10.483002685 +0200
@@ -274,7 +274,7 @@
 # Boost
 # ==============================================================================
 option(BOOST_NO_CXX11 "if Boost is compiled without C++11 support (as it is often the case in OS packages) this must be enabled to avoid symbol conflicts (SCOPED_ENUM)." OFF)
-set(ALICEVISION_BOOST_COMPONENTS atomic container date_time filesystem graph json log log_setup program_options regex serialization system thread timer)
+set(ALICEVISION_BOOST_COMPONENTS atomic container date_time graph json log log_setup program_options regex serialization system thread timer)
 if(ALICEVISION_BUILD_TESTS)
     set(ALICEVISION_BOOST_COMPONENT_UNITTEST unit_test_framework)
 endif()
@@ -306,12 +306,6 @@
   set(Boost_USE_STATIC_LIBS ON)
 endif()
 
-if(BOOST_NO_CXX11)
-  # Avoid link errors on boost filesystem copy_file function
-  # http://stackoverflow.com/questions/35007134/c-boost-undefined-reference-to-boostfilesystemdetailcopy-file
-  add_definitions(-DBOOST_NO_CXX11_SCOPED_ENUMS)
-endif()
-
 
 # ==============================================================================
 # OpenEXR >= 2.5
diff -Naur alicevision/src/software/convert/CMakeLists.txt alicevision.new/src/software/convert/CMakeLists.txt
--- alicevision/src/software/convert/CMakeLists.txt	2024-05-14 15:34:54.380871473 +0200
+++ alicevision.new/src/software/convert/CMakeLists.txt	2024-05-14 15:35:10.435002295 +0200
@@ -15,7 +15,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
               Boost::system
     )
 
@@ -28,7 +27,6 @@
               aliceVision_sfmDataIO
               aliceVision_cmdline
               Boost::program_options
-              Boost::filesystem
               Boost::boost
               Boost::timer
     )
diff -Naur alicevision/src/software/convert/main_convertMesh.cpp alicevision.new/src/software/convert/main_convertMesh.cpp
--- alicevision/src/software/convert/main_convertMesh.cpp	2024-05-14 15:34:54.139869509 +0200
+++ alicevision.new/src/software/convert/main_convertMesh.cpp	2024-05-14 15:35:10.435002295 +0200
@@ -12,8 +12,8 @@
 #include <aliceVision/mesh/Mesh.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <iostream>
 #include <fstream>
 #include <ostream>
@@ -27,7 +27,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 /**
  * @brief Convert Mesh
diff -Naur alicevision/src/software/convert/main_convertSfMFormat.cpp alicevision.new/src/software/convert/main_convertSfMFormat.cpp
--- alicevision/src/software/convert/main_convertSfMFormat.cpp	2024-05-14 15:34:54.139869509 +0200
+++ alicevision.new/src/software/convert/main_convertSfMFormat.cpp	2024-05-14 15:35:10.436002303 +0200
@@ -16,8 +16,8 @@
 
 #include <boost/program_options.hpp>
 #include <boost/system/error_code.hpp>
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <algorithm>
 #include <string>
 #include <regex>
@@ -31,7 +31,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 // convert from a SfMData format to another
 int aliceVision_main(int argc, char **argv)
diff -Naur alicevision/src/software/convert/main_importKnownPoses.cpp alicevision.new/src/software/convert/main_importKnownPoses.cpp
--- alicevision/src/software/convert/main_importKnownPoses.cpp	2024-05-14 15:34:54.139869509 +0200
+++ alicevision.new/src/software/convert/main_importKnownPoses.cpp	2024-05-14 15:35:10.436002303 +0200
@@ -14,12 +14,11 @@
 
 #include <boost/program_options.hpp>
 #include <boost/system/error_code.hpp>
-#include <boost/filesystem.hpp>
 
 #include <algorithm>
+#include <filesystem>
 #include <string>
 #include <regex>
-
 #include <iostream>
 #include <list>
 
@@ -37,7 +36,7 @@
 
 namespace po = boost::program_options;
 namespace json = boost::property_tree;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 
 struct XMPData
diff -Naur alicevision/src/software/export/CMakeLists.txt alicevision.new/src/software/export/CMakeLists.txt
--- alicevision/src/software/export/CMakeLists.txt	2024-05-14 15:34:54.381871481 +0200
+++ alicevision.new/src/software/export/CMakeLists.txt	2024-05-14 15:35:10.436002303 +0200
@@ -15,7 +15,6 @@
                   aliceVision_sfmData
                   aliceVision_sfmDataIO
                   Boost::program_options
-                  Boost::filesystem
                   Boost::boost
                   Boost::timer
         )
@@ -32,7 +31,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
               Boost::boost
               Boost::timer
     )
@@ -48,7 +46,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
               Boost::boost
               Boost::timer
     )
@@ -64,7 +61,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
               Boost::boost
               Boost::timer
     )
@@ -80,7 +76,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
               Boost::boost
               Boost::timer
     )
@@ -96,7 +91,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
               Boost::boost
               Boost::timer
     )
@@ -127,7 +121,6 @@
                   aliceVision_sfmData
                   aliceVision_sfmDataIO
                   Boost::program_options
-                  Boost::filesystem
                   Boost::boost
                   Boost::timer
                   ${OPENIMAGEIO_LIBRARIES}
@@ -145,7 +138,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
               Boost::boost
               Boost::timer
     )
@@ -161,7 +153,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
               Boost::boost
               Boost::timer
     )
@@ -177,7 +168,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
     )
 
     # Export a SfM aliceVision scene to Matlab
@@ -191,7 +181,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
               Boost::boost
               Boost::timer
     )
@@ -204,7 +193,6 @@
             LINKS aliceVision_system
                   aliceVision_cmdline
                   aliceVision_mesh
-                  Boost::filesystem
                   Boost::program_options
                   usd
                   usdGeom
@@ -224,6 +212,5 @@
               aliceVision_sfmDataIO
               aliceVision_image
               Boost::program_options
-              Boost::filesystem
     )
 endif()
diff -Naur alicevision/src/software/export/main_exportAnimatedCamera.cpp alicevision.new/src/software/export/main_exportAnimatedCamera.cpp
--- alicevision/src/software/export/main_exportAnimatedCamera.cpp	2024-05-14 15:34:54.140869517 +0200
+++ alicevision.new/src/software/export/main_exportAnimatedCamera.cpp	2024-05-14 15:35:10.437002312 +0200
@@ -16,8 +16,8 @@
 #include <aliceVision/utils/regexFilter.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <cstdlib>
 #include <limits>
 #include <string>
@@ -31,7 +31,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 oiio::ROI computeRod(const camera::IntrinsicBase* intrinsic, bool correctPrincipalPoint)
 {
diff -Naur alicevision/src/software/export/main_exportColmap.cpp alicevision.new/src/software/export/main_exportColmap.cpp
--- alicevision/src/software/export/main_exportColmap.cpp	2024-05-14 15:34:54.140869517 +0200
+++ alicevision.new/src/software/export/main_exportColmap.cpp	2024-05-14 15:35:10.437002312 +0200
@@ -12,9 +12,9 @@
 #include <aliceVision/system/main.hpp>
 #include <aliceVision/cmdline/cmdline.hpp>
 
-#include <boost/filesystem.hpp>
 #include <boost/program_options.hpp>
 
+#include <filesystem>
 
 
 // These constants define the current software version.
@@ -25,7 +25,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 
 int aliceVision_main(int argc, char* argv[])
diff -Naur alicevision/src/software/export/main_exportDistortion.cpp alicevision.new/src/software/export/main_exportDistortion.cpp
--- alicevision/src/software/export/main_exportDistortion.cpp	2024-05-14 15:34:54.140869517 +0200
+++ alicevision.new/src/software/export/main_exportDistortion.cpp	2024-05-14 15:35:10.437002312 +0200
@@ -13,7 +13,6 @@
 #include <aliceVision/image/all.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
 #include <string>
 #include <sstream>
@@ -26,7 +25,6 @@
 #define ALICEVISION_SOFTWARE_VERSION_MINOR 0
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
 
 using namespace aliceVision;
 using namespace aliceVision::camera;
diff -Naur alicevision/src/software/export/main_exportKeypoints.cpp alicevision.new/src/software/export/main_exportKeypoints.cpp
--- alicevision/src/software/export/main_exportKeypoints.cpp	2024-05-14 15:34:54.140869517 +0200
+++ alicevision.new/src/software/export/main_exportKeypoints.cpp	2024-05-14 15:35:10.437002312 +0200
@@ -20,9 +20,9 @@
 #include <dependencies/vectorGraphics/svgDrawer.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
 #include <cstdlib>
+#include <filesystem>
 #include <string>
 #include <vector>
 #include <fstream>
@@ -40,7 +40,7 @@
 using namespace svg;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 int aliceVision_main(int argc, char ** argv)
 {
diff -Naur alicevision/src/software/export/main_exportMatches.cpp alicevision.new/src/software/export/main_exportMatches.cpp
--- alicevision/src/software/export/main_exportMatches.cpp	2024-05-14 15:34:54.141869525 +0200
+++ alicevision.new/src/software/export/main_exportMatches.cpp	2024-05-14 15:35:10.438002320 +0200
@@ -21,8 +21,8 @@
 #include <dependencies/vectorGraphics/svgDrawer.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <cstdlib>
 #include <string>
 #include <vector>
@@ -42,7 +42,7 @@
 using namespace svg;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 // Convert HUE color to RGB
 inline float hue2rgb(float p, float q, float t){
@@ -163,7 +163,7 @@
     std::string destFilename_I;
     std::string destFilename_J;
     {
-    boost::filesystem::path origImgPath(viewImagePathI);
+    fs::path origImgPath(viewImagePathI);
     std::string origFilename = origImgPath.stem().string();
     image::Image<image::RGBfColor> originalImage;
     image::readImage(viewImagePathI, originalImage, image::EImageColorSpace::LINEAR);
@@ -173,7 +173,7 @@
     }
 
     {
-    boost::filesystem::path origImgPath(viewImagePathJ);
+    fs::path origImgPath(viewImagePathJ);
     std::string origFilename = origImgPath.stem().string();
     image::Image<image::RGBfColor> originalImage;
     image::readImage(viewImagePathJ, originalImage, image::EImageColorSpace::LINEAR);
diff -Naur alicevision/src/software/export/main_exportMatlab.cpp alicevision.new/src/software/export/main_exportMatlab.cpp
--- alicevision/src/software/export/main_exportMatlab.cpp	2024-05-14 15:34:54.141869525 +0200
+++ alicevision.new/src/software/export/main_exportMatlab.cpp	2024-05-14 15:35:10.438002320 +0200
@@ -11,8 +11,8 @@
 #include <aliceVision/system/main.hpp>
 #include <aliceVision/cmdline/cmdline.hpp>
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <stdlib.h>
 #include <stdio.h>
 #include <cmath>
@@ -33,7 +33,7 @@
 using namespace aliceVision::sfmData;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 bool exportToMatlab(
   const SfMData & sfm_data,
diff -Naur alicevision/src/software/export/main_exportMeshlab.cpp alicevision.new/src/software/export/main_exportMeshlab.cpp
--- alicevision/src/software/export/main_exportMeshlab.cpp	2024-05-14 15:34:54.141869525 +0200
+++ alicevision.new/src/software/export/main_exportMeshlab.cpp	2024-05-14 15:35:10.438002320 +0200
@@ -12,8 +12,8 @@
 #include <aliceVision/system/main.hpp>
 #include <aliceVision/cmdline/cmdline.hpp>
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <fstream>
 
 // These constants define the current software version.
@@ -28,7 +28,7 @@
 using namespace aliceVision::sfmData;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 int aliceVision_main(int argc, char **argv)
 {
diff -Naur alicevision/src/software/export/main_exportMeshroomMaya.cpp alicevision.new/src/software/export/main_exportMeshroomMaya.cpp
--- alicevision/src/software/export/main_exportMeshroomMaya.cpp	2024-05-14 15:34:54.141869525 +0200
+++ alicevision.new/src/software/export/main_exportMeshroomMaya.cpp	2024-05-14 15:35:10.439002328 +0200
@@ -11,10 +11,10 @@
 #include <aliceVision/system/ProgressDisplay.hpp>
 #include <aliceVision/cmdline/cmdline.hpp>
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
 #include <OpenImageIO/imagebufalgo.h>
 
+#include <filesystem>
 #include <fstream>
 
 // These constants define the current software version.
@@ -25,7 +25,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 namespace oiio = OIIO;
 
 int aliceVision_main(int argc, char **argv)
diff -Naur alicevision/src/software/export/main_exportMVE2.cpp alicevision.new/src/software/export/main_exportMVE2.cpp
--- alicevision/src/software/export/main_exportMVE2.cpp	2024-05-14 15:34:54.141869525 +0200
+++ alicevision.new/src/software/export/main_exportMVE2.cpp	2024-05-14 15:35:10.437002312 +0200
@@ -12,8 +12,8 @@
 #include <aliceVision/system/main.hpp>
 #include <aliceVision/cmdline/cmdline.hpp>
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <stdlib.h>
 #include <stdio.h>
 #include <cmath>
@@ -34,7 +34,7 @@
 using namespace aliceVision::feature;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 /// Naive image bilinear resampling of an image for thumbnail generation
 template <typename ImageT>
@@ -148,8 +148,8 @@
       else // (no distortion)
       {
         // If extensions match, copy the PNG image
-        if (fs::extension(srcImage) == ".PNG" ||
-          fs::extension(srcImage) == ".png")
+        if (fs::path(srcImage).extension() == ".PNG" ||
+          fs::path(srcImage).extension() == ".png")
         {
           fs::copy_file(srcImage, dstImage);
         }
diff -Naur alicevision/src/software/export/main_exportMVSTexturing.cpp alicevision.new/src/software/export/main_exportMVSTexturing.cpp
--- alicevision/src/software/export/main_exportMVSTexturing.cpp	2024-05-14 15:34:54.141869525 +0200
+++ alicevision.new/src/software/export/main_exportMVSTexturing.cpp	2024-05-14 15:35:10.438002320 +0200
@@ -11,8 +11,8 @@
 #include <aliceVision/system/main.hpp>
 #include <aliceVision/cmdline/cmdline.hpp>
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <fstream>
 
 // These constants define the current software version.
@@ -26,7 +26,7 @@
 using namespace aliceVision::sfmData;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 int aliceVision_main(int argc, char **argv)
 {
diff -Naur alicevision/src/software/export/main_exportPMVS.cpp alicevision.new/src/software/export/main_exportPMVS.cpp
--- alicevision/src/software/export/main_exportPMVS.cpp	2024-05-14 15:34:54.142869533 +0200
+++ alicevision.new/src/software/export/main_exportPMVS.cpp	2024-05-14 15:35:10.439002328 +0200
@@ -12,8 +12,8 @@
 #include <aliceVision/system/main.hpp>
 #include <aliceVision/cmdline/cmdline.hpp>
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <stdlib.h>
 #include <stdio.h>
 #include <cmath>
@@ -33,7 +33,7 @@
 using namespace aliceVision::sfmData;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 bool exportToPMVSFormat(
   const SfMData & sfm_data,
@@ -134,8 +134,8 @@
       else // (no distortion)
       {
         // copy the image if extension match
-        if (fs::extension(srcImage) == ".JPG" ||
-          fs::extension(srcImage) == ".jpg")
+        if (fs::path(srcImage).extension() == ".JPG" ||
+          fs::path(srcImage).extension() == ".jpg")
         {
           fs::copy_file(srcImage, dstImage);
         }
diff -Naur alicevision/src/software/export/main_exportTracks.cpp alicevision.new/src/software/export/main_exportTracks.cpp
--- alicevision/src/software/export/main_exportTracks.cpp	2024-05-14 15:34:54.142869533 +0200
+++ alicevision.new/src/software/export/main_exportTracks.cpp	2024-05-14 15:35:10.439002328 +0200
@@ -26,7 +26,8 @@
 #include <dependencies/vectorGraphics/svgDrawer.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
+
+#include <filesystem>
 
 // These constants define the current software version.
 // They must be updated when the command line is changed.
@@ -41,7 +42,7 @@
 using namespace svg;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 int aliceVision_main(int argc, char ** argv)
 {
diff -Naur alicevision/src/software/export/main_exportUSD.cpp alicevision.new/src/software/export/main_exportUSD.cpp
--- alicevision/src/software/export/main_exportUSD.cpp	2024-05-14 15:34:54.142869533 +0200
+++ alicevision.new/src/software/export/main_exportUSD.cpp	2024-05-14 15:35:10.439002328 +0200
@@ -11,7 +11,6 @@
 #include <aliceVision/system/Timer.hpp>
 
 #include <boost/algorithm/string.hpp>
-#include <boost/filesystem.hpp>
 #include <boost/program_options.hpp>
 
 #include <pxr/base/tf/token.h>
@@ -28,13 +27,15 @@
 #include <pxr/usd/usdShade/materialBindingAPI.h>
 #include <pxr/usd/usdShade/shader.h>
 
+#include <filesystem>
+
 #define ALICEVISION_SOFTWARE_VERSION_MAJOR 1
 #define ALICEVISION_SOFTWARE_VERSION_MINOR 0
 
 using namespace aliceVision;
 
 namespace bpo = boost::program_options;
-namespace bfs = boost::filesystem;
+namespace fs = std::filesystem;
 
 PXR_NAMESPACE_USING_DIRECTIVE
 
@@ -144,7 +145,7 @@
     }
 
     const std::string extension = fileType == EUSDFileType::USDC || fileType == EUSDFileType::USDZ ? "usdc" : "usda";
-    const bfs::path stagePath = bfs::canonical(outputFolderPath) / ("texturedMesh." + extension);
+    const fs::path stagePath = fs::canonical(outputFolderPath) / ("texturedMesh." + extension);
     UsdStageRefPtr stage = UsdStage::CreateNew(stagePath.string());
     if (!stage)
     {
@@ -341,16 +342,16 @@
     stage->GetRootLayer()->Save();
 
     // Copy textures to output folder
-    const bfs::path sourceFolder = bfs::path(inputMeshPath).parent_path();
-    const bfs::path destinationFolder = bfs::canonical(outputFolderPath);
+    const fs::path sourceFolder = fs::path(inputMeshPath).parent_path();
+    const fs::path destinationFolder = fs::canonical(outputFolderPath);
 
     for (int i = 0; i < texturing.material.numAtlases(); ++i)
     {
         for (const auto& texture : texturing.material.getAllTextures())
         {
-            if (bfs::exists(sourceFolder / texture))
+            if (fs::exists(sourceFolder / texture))
             {
-                bfs::copy_file(sourceFolder / texture, destinationFolder / texture, bfs::copy_options::update_existing);
+                fs::copy_file(sourceFolder / texture, destinationFolder / texture, fs::copy_options::update_existing);
             }
         }
     }
@@ -358,7 +359,7 @@
     // write out usdz if requested
     if (fileType == EUSDFileType::USDZ)
     {
-        const bfs::path usdzPath = bfs::canonical(outputFolderPath) / "texturedMesh.usdz";
+        const fs::path usdzPath = fs::canonical(outputFolderPath) / "texturedMesh.usdz";
         UsdZipFileWriter writer = UsdZipFileWriter::CreateNew(usdzPath.string());
 
         if (!writer)
@@ -372,7 +373,7 @@
         {
             for (const auto& texture : texturing.material.getAllTextures())
             {
-                if (bfs::exists(destinationFolder / texture))
+                if (fs::exists(destinationFolder / texture))
                 {
                     writer.AddFile((destinationFolder / texture).string(), texture);
                 }
diff -Naur alicevision/src/software/pipeline/CMakeLists.txt alicevision.new/src/software/pipeline/CMakeLists.txt
--- alicevision/src/software/pipeline/CMakeLists.txt	2024-05-14 15:34:54.381871481 +0200
+++ alicevision.new/src/software/pipeline/CMakeLists.txt	2024-05-14 15:35:10.440002336 +0200
@@ -20,7 +20,6 @@
               aliceVision_sfmDataIO
               aliceVision_lensCorrectionProfile
               Boost::program_options
-              Boost::filesystem
               Boost::boost
     )
 
@@ -55,7 +54,6 @@
               aliceVision_sfmDataIO
               vlsift
               Boost::program_options
-              Boost::filesystem
               Boost::boost
               Boost::timer
     )
@@ -74,7 +72,6 @@
               aliceVision_sfmDataIO
               aliceVision_voctree
               Boost::program_options
-              Boost::filesystem
     )
 
     # Feature matching
@@ -91,7 +88,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
     )
 
     # Track builder
@@ -105,7 +101,6 @@
               aliceVision_sfmData
               aliceVision_track
               Boost::program_options
-              Boost::filesystem
               Boost::json
     )
 
@@ -120,7 +115,6 @@
               aliceVision_sfmData
               aliceVision_track
               Boost::program_options
-              Boost::filesystem
               Boost::json
     )
 
@@ -135,7 +129,6 @@
               aliceVision_sfmData
               aliceVision_track
               Boost::program_options
-              Boost::filesystem
               Boost::json
     )
 
@@ -151,7 +144,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
     )
 
     # Incremental SFM for pure rotation
@@ -166,7 +158,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
     )
 
     # SfM Triangulation
@@ -181,7 +172,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
     )
 
     # Global SfM
@@ -196,7 +186,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
     )
 
     # Compute structure from known camera poses
@@ -210,7 +199,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
     )
 
     # Calibrate a camera
@@ -224,7 +212,6 @@
                   aliceVision_system
                   aliceVision_cmdline
                   Boost::program_options
-                  Boost::filesystem
                   Boost::boost
         )
     endif()
@@ -239,7 +226,6 @@
               aliceVision_cmdline
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
               Boost::boost
               Boost::json
     )
@@ -271,7 +257,6 @@
               aliceVision_feature
               aliceVision_cmdline
               Boost::program_options
-              Boost::filesystem
               Boost::boost
               Boost::timer
     )
@@ -286,7 +271,6 @@
               aliceVision_sfmDataIO
               aliceVision_cmdline
               Boost::program_options
-              Boost::filesystem
               Boost::boost
               Boost::json
     )
@@ -305,7 +289,6 @@
               aliceVision_feature
               aliceVision_cmdline
               Boost::program_options
-              Boost::filesystem
               Boost::boost
               Boost::timer
     )
@@ -325,7 +308,6 @@
               aliceVision_feature
               aliceVision_cmdline
               Boost::program_options
-              Boost::filesystem
               Boost::boost
               Boost::timer
     )
@@ -345,7 +327,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
               Boost::boost
               Boost::timer
     )
@@ -365,7 +346,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
               Boost::boost
     )
 
@@ -466,7 +446,6 @@
                   aliceVision_sfmData
                   aliceVision_sfmDataIO
                   Boost::program_options
-                  Boost::filesystem
         )
 
         # Depth Map Filtering
@@ -482,7 +461,6 @@
                   aliceVision_sfmData
                   aliceVision_sfmDataIO
                   Boost::program_options
-                  Boost::filesystem
         )
     endif()
 
@@ -499,7 +477,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
     )
 
     if(ALICEVISION_HAVE_MESHSDFILTER)
@@ -514,7 +491,6 @@
                   MeshSDLibrary
                   Eigen3::Eigen
                   Boost::program_options
-                  Boost::filesystem
         )
 
         # Mesh Decimate
@@ -526,7 +502,6 @@
                   aliceVision_mvsUtils
                   OpenMesh
                   Boost::program_options
-                  Boost::filesystem
         )
     endif()
 
@@ -539,7 +514,6 @@
               aliceVision_mvsUtils
               aliceVision_mesh
               Boost::program_options
-              Boost::filesystem
     )
 
     # Mesh Masking
@@ -554,7 +528,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
     )
 
     # Mesh Resampling
@@ -566,7 +539,6 @@
               aliceVision_mvsUtils
               Geogram::geogram
               Boost::program_options
-              Boost::filesystem
     )
 
     # Texturing
@@ -582,7 +554,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
     )
 endif() # if(ALICEVISION_BUILD_MVS)
 
@@ -658,7 +629,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
     )
 
     alicevision_add_software(aliceVision_LdrToHdrCalibration
@@ -671,7 +641,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
     )
 
     alicevision_add_software(aliceVision_LdrToHdrMerge
@@ -684,7 +653,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
     )
 
 endif()
diff -Naur alicevision/src/software/pipeline/main_cameraCalibration.cpp alicevision.new/src/software/pipeline/main_cameraCalibration.cpp
--- alicevision/src/software/pipeline/main_cameraCalibration.cpp	2024-05-14 15:34:54.143869542 +0200
+++ alicevision.new/src/software/pipeline/main_cameraCalibration.cpp	2024-05-14 15:35:10.441002344 +0200
@@ -18,8 +18,6 @@
 #include <aliceVision/config.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
-#include <boost/filesystem/path.hpp>
 #include <boost/algorithm/string/case_conv.hpp>
 
 #include <opencv2/opencv.hpp>
@@ -28,6 +26,7 @@
 #include <opencv2/imgproc.hpp>
 #include <opencv2/calib3d.hpp>
 
+#include <filesystem>
 #include <stdio.h>
 #include <ctime>
 #include <cstdio>
@@ -45,13 +44,13 @@
 #define ALICEVISION_SOFTWARE_VERSION_MAJOR 1
 #define ALICEVISION_SOFTWARE_VERSION_MINOR 0
 
-namespace bfs = boost::filesystem;
+namespace fs = std::filesystem;
 namespace po = boost::program_options;
 
 int aliceVision_main(int argc, char** argv)
 {
     // Command line arguments
-    bfs::path inputPath;
+    fs::path inputPath;
     std::string outputFilename;
     std::string debugSelectedImgFolder;
     std::string debugRejectedImgFolder;
@@ -67,7 +66,7 @@
 
     po::options_description requiredParams("Required parameters");
     requiredParams.add_options()
-        ("input,i", po::value<bfs::path>(&inputPath)->required(),
+        ("input,i", po::value<fs::path>(&inputPath)->required(),
          "Input images in one of the following form:\n"
          " - folder containing images\n"
          " - image sequence like /path/to/seq.@.jpg\n"
diff -Naur alicevision/src/software/pipeline/main_cameraInit.cpp alicevision.new/src/software/pipeline/main_cameraInit.cpp
--- alicevision/src/software/pipeline/main_cameraInit.cpp	2024-05-14 15:34:54.144869550 +0200
+++ alicevision.new/src/software/pipeline/main_cameraInit.cpp	2024-05-14 15:35:10.442002352 +0200
@@ -18,12 +18,12 @@
 
 #include <boost/atomic/atomic_ref.hpp>
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 #include <boost/algorithm/string.hpp>
 #include <boost/regex.hpp>
 #include <boost/foreach.hpp>
 
 #include <iostream>
+#include <filesystem>
 #include <fstream>
 #include <sstream>
 #include <memory>
@@ -44,7 +44,7 @@
 using namespace aliceVision::sfmDataIO;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 
 /**
@@ -60,7 +60,7 @@
 {
   if(fs::is_regular_file(folderOrFile))
   {
-    std::string fileExtension = fs::extension(folderOrFile);
+    std::string fileExtension = fs::path(folderOrFile).extension().string();
     std::transform(fileExtension.begin(), fileExtension.end(), fileExtension.begin(), ::tolower);
     for(const std::string& extension: extensions)
     {
diff -Naur alicevision/src/software/pipeline/main_cameraLocalization.cpp alicevision.new/src/software/pipeline/main_cameraLocalization.cpp
--- alicevision/src/software/pipeline/main_cameraLocalization.cpp	2024-05-14 15:34:54.144869550 +0200
+++ alicevision.new/src/software/pipeline/main_cameraLocalization.cpp	2024-05-14 15:35:10.442002352 +0200
@@ -24,7 +24,6 @@
 #include <aliceVision/cmdline/cmdline.hpp>
 #include <aliceVision/utils/convert.hpp>
 
-#include <boost/filesystem.hpp>
 #include <boost/program_options.hpp> 
 #include <boost/accumulators/accumulators.hpp>
 #include <boost/accumulators/statistics/stats.hpp>
@@ -33,6 +32,7 @@
 #include <boost/accumulators/statistics/max.hpp>
 #include <boost/accumulators/statistics/sum.hpp>
 
+#include <filesystem>
 #include <iostream>
 #include <string>
 #include <vector>
@@ -50,7 +50,7 @@
 
 using namespace aliceVision;
 
-namespace bfs = boost::filesystem;
+namespace fs = std::filesystem;
 namespace bacc = boost::accumulators;
 namespace po = boost::program_options;
 
@@ -269,20 +269,20 @@
 
   // if the provided folder for visual debugging does not exist create it
   // recursively
-  if((!visualDebug.empty()) && (!bfs::exists(visualDebug)))
+  if((!visualDebug.empty()) && (!fs::exists(visualDebug)))
   {
-    bfs::create_directories(visualDebug);
+    fs::create_directories(visualDebug);
   }
  
   // this contains the full path and the root name of the file without the extension
   const bool wantsJsonOutput = exportJsonFile.empty();
 #if ALICEVISION_IS_DEFINED(ALICEVISION_HAVE_ALEMBIC)
-  std::string basenameAlembic = (bfs::path(exportJsonFile).parent_path() / bfs::path(exportJsonFile).stem()).string();
+  std::string basenameAlembic = (fs::path(exportJsonFile).parent_path() / fs::path(exportJsonFile).stem()).string();
 #endif
   std::string basenameJson;
   if(wantsJsonOutput)
   {
-    basenameJson = (bfs::path(exportJsonFile).parent_path() / bfs::path(exportJsonFile).stem()).string();
+    basenameJson = (fs::path(exportJsonFile).parent_path() / fs::path(exportJsonFile).stem()).string();
   }
 
   // load SfMData
diff -Naur alicevision/src/software/pipeline/main_checkerboardDetection.cpp alicevision.new/src/software/pipeline/main_checkerboardDetection.cpp
--- alicevision/src/software/pipeline/main_checkerboardDetection.cpp	2024-05-14 15:34:54.144869550 +0200
+++ alicevision.new/src/software/pipeline/main_checkerboardDetection.cpp	2024-05-14 15:35:10.442002352 +0200
@@ -17,7 +17,6 @@
 #include <OpenImageIO/imagebufalgo.h>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 #include <boost/property_tree/json_parser.hpp>
 
 // These constants define the current software version.
@@ -26,7 +25,6 @@
 #define ALICEVISION_SOFTWARE_VERSION_MINOR 0
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
 
 using namespace aliceVision;
 
diff -Naur alicevision/src/software/pipeline/main_computeStructureFromKnownPoses.cpp alicevision.new/src/software/pipeline/main_computeStructureFromKnownPoses.cpp
--- alicevision/src/software/pipeline/main_computeStructureFromKnownPoses.cpp	2024-05-14 15:34:54.145869558 +0200
+++ alicevision.new/src/software/pipeline/main_computeStructureFromKnownPoses.cpp	2024-05-14 15:35:10.442002352 +0200
@@ -17,7 +17,8 @@
 #include <aliceVision/config.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
+
+#include <filesystem>
 
 // These constants define the current software version.
 // They must be updated when the command line is changed.
@@ -27,7 +28,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 /// Compute the structure of a scene according existing camera poses.
 int aliceVision_main(int argc, char **argv)
@@ -144,7 +145,7 @@
   ALICEVISION_LOG_INFO("Structure estimation took (s): " << timer.elapsed() << "." << std::endl
     << "\t- # landmarks found: " << sfmData.getLandmarks().size());
 
-  if(fs::extension(outSfMDataFilename) != ".ply")
+  if(fs::path(outSfMDataFilename).extension() != ".ply")
   {
     sfmDataIO::Save(sfmData,
          (fs::path(outSfMDataFilename).parent_path() / (fs::path(outSfMDataFilename).stem().string() + ".ply")).string(),
diff -Naur alicevision/src/software/pipeline/main_featureExtraction.cpp alicevision.new/src/software/pipeline/main_featureExtraction.cpp
--- alicevision/src/software/pipeline/main_featureExtraction.cpp	2024-05-14 15:34:54.146869566 +0200
+++ alicevision.new/src/software/pipeline/main_featureExtraction.cpp	2024-05-14 15:35:10.443002360 +0200
@@ -22,8 +22,8 @@
 #include <aliceVision/cmdline/cmdline.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <string>
 #include <iostream>
 #include <functional>
@@ -37,7 +37,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 /// - Compute view image description (feature & descriptor extraction)
 /// - Export computed data
diff -Naur alicevision/src/software/pipeline/main_featureMatching.cpp alicevision.new/src/software/pipeline/main_featureMatching.cpp
--- alicevision/src/software/pipeline/main_featureMatching.cpp	2024-05-14 15:34:54.146869566 +0200
+++ alicevision.new/src/software/pipeline/main_featureMatching.cpp	2024-05-14 15:35:10.443002360 +0200
@@ -34,8 +34,8 @@
 #include <aliceVision/stl/stl.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <cstdlib>
 #include <fstream>
 #include <cctype>
@@ -55,7 +55,7 @@
 using namespace aliceVision::matchingImageCollection;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 void getStatsMap(const PairwiseMatches& map)
 {
diff -Naur alicevision/src/software/pipeline/main_globalSfM.cpp alicevision.new/src/software/pipeline/main_globalSfM.cpp
--- alicevision/src/software/pipeline/main_globalSfM.cpp	2024-05-14 15:34:54.146869566 +0200
+++ alicevision.new/src/software/pipeline/main_globalSfM.cpp	2024-05-14 15:35:10.443002360 +0200
@@ -16,8 +16,8 @@
 #include <aliceVision/cmdline/cmdline.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <cstdlib>
 
 // These constants define the current software version.
@@ -28,7 +28,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 int aliceVision_main(int argc, char **argv)
 {
diff -Naur alicevision/src/software/pipeline/main_imageMasking.cpp alicevision.new/src/software/pipeline/main_imageMasking.cpp
--- alicevision/src/software/pipeline/main_imageMasking.cpp	2024-05-14 15:34:54.146869566 +0200
+++ alicevision.new/src/software/pipeline/main_imageMasking.cpp	2024-05-14 15:35:10.443002360 +0200
@@ -17,9 +17,10 @@
 #include <OpenImageIO/imagebufalgo.h>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 #include <boost/algorithm/string/case_conv.hpp> 
 
+#include <filesystem>
+
 // These constants define the current software version.
 // They must be updated when the command line is changed.
 #define ALICEVISION_SOFTWARE_VERSION_MAJOR 1
@@ -28,7 +29,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 enum class EAlgorithm {
     HSV,
diff -Naur alicevision/src/software/pipeline/main_imageMatching.cpp alicevision.new/src/software/pipeline/main_imageMatching.cpp
--- alicevision/src/software/pipeline/main_imageMatching.cpp	2024-05-14 15:34:54.146869566 +0200
+++ alicevision.new/src/software/pipeline/main_imageMatching.cpp	2024-05-14 15:35:10.444002368 +0200
@@ -18,9 +18,9 @@
 #include <Eigen/Core>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
 #include <iostream>
+#include <filesystem>
 #include <fstream>
 #include <ostream>
 #include <string>
@@ -37,7 +37,7 @@
 using namespace aliceVision::imageMatching;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 int aliceVision_main(int argc, char** argv)
 {
diff -Naur alicevision/src/software/pipeline/main_incrementalSfM.cpp alicevision.new/src/software/pipeline/main_incrementalSfM.cpp
--- alicevision/src/software/pipeline/main_incrementalSfM.cpp	2024-05-14 15:34:54.147869574 +0200
+++ alicevision.new/src/software/pipeline/main_incrementalSfM.cpp	2024-05-14 15:35:10.444002368 +0200
@@ -21,9 +21,9 @@
 #include <aliceVision/sfm/utils/alignment.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
 #include <cstdlib>
+#include <filesystem>
 
 // These constants define the current software version.
 // They must be updated when the command line is changed.
@@ -33,7 +33,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 using namespace aliceVision::track;
 using namespace aliceVision::sfm;
 
diff -Naur alicevision/src/software/pipeline/main_LdrToHdrCalibration.cpp alicevision.new/src/software/pipeline/main_LdrToHdrCalibration.cpp
--- alicevision/src/software/pipeline/main_LdrToHdrCalibration.cpp	2024-05-14 15:34:54.142869533 +0200
+++ alicevision.new/src/software/pipeline/main_LdrToHdrCalibration.cpp	2024-05-14 15:35:10.440002336 +0200
@@ -29,13 +29,11 @@
 // Command line parameters
 #include <boost/algorithm/string.hpp>
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
-
-#include <sstream>
 
+#include <filesystem>
 #include <fstream>
 #include <map>
-
+#include <sstream>
 
 // These constants define the current software version.
 // They must be updated when the command line is changed.
@@ -46,7 +44,7 @@
 using namespace aliceVision::hdr;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 struct luminanceInfo
 {
diff -Naur alicevision/src/software/pipeline/main_LdrToHdrMerge.cpp alicevision.new/src/software/pipeline/main_LdrToHdrMerge.cpp
--- alicevision/src/software/pipeline/main_LdrToHdrMerge.cpp	2024-05-14 15:34:54.143869542 +0200
+++ alicevision.new/src/software/pipeline/main_LdrToHdrMerge.cpp	2024-05-14 15:35:10.441002344 +0200
@@ -23,7 +23,8 @@
 
 // Command line parameters
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
+
+#include <filesystem>
 #include <sstream>
 #include <iomanip>
 
@@ -35,7 +36,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 std::string getHdrImagePath(const std::string& outputPath, std::size_t g, const std::string& rootname = "")
 {
@@ -161,7 +162,7 @@
     omp_set_num_threads(hwc.getMaxThreads());
 
     // Analyze path
-    boost::filesystem::path path(sfmOutputDataFilepath);
+    fs::path path(sfmOutputDataFilepath);
     std::string outputPath = path.parent_path().string();
 
     // Read SfMData
@@ -369,7 +370,7 @@
                 }
                 if (!byPass)
                 {
-                    boost::filesystem::path p(targetViews[g]->getImage().getImagePath());
+                    fs::path p(targetViews[g]->getImage().getImagePath());
                     const std::string hdrImagePath = getHdrImagePath(outputPath, pos, keepSourceImageName ? p.stem().string() : "");
                     hdrView->getImage().setImagePath(hdrImagePath);
                 }
@@ -496,7 +497,7 @@
                 HDRimage = images[0];
             }
 
-            boost::filesystem::path p(targetView->getImage().getImagePath());
+            fs::path p(targetView->getImage().getImagePath());
             const std::string hdrImagePath = getHdrImagePath(outputPath, pos, keepSourceImageName ? p.stem().string() : "");
 
             // Write an image with parameters from the target view
diff -Naur alicevision/src/software/pipeline/main_LdrToHdrSampling.cpp alicevision.new/src/software/pipeline/main_LdrToHdrSampling.cpp
--- alicevision/src/software/pipeline/main_LdrToHdrSampling.cpp	2024-05-14 15:34:54.143869542 +0200
+++ alicevision.new/src/software/pipeline/main_LdrToHdrSampling.cpp	2024-05-14 15:35:10.441002344 +0200
@@ -29,13 +29,12 @@
 
 // Command line parameters
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
 #include <boost/accumulators/accumulators.hpp>
 #include <boost/accumulators/statistics.hpp>
 
 #include <sstream>
-
+#include <filesystem>
 #include <fstream>
 
 
@@ -48,7 +47,7 @@
 using namespace aliceVision::hdr;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 int aliceVision_main(int argc, char** argv)
 {
diff -Naur alicevision/src/software/pipeline/main_lightingCalibration.cpp alicevision.new/src/software/pipeline/main_lightingCalibration.cpp
--- alicevision/src/software/pipeline/main_lightingCalibration.cpp	2024-05-14 15:34:54.147869574 +0200
+++ alicevision.new/src/software/pipeline/main_lightingCalibration.cpp	2024-05-14 15:35:10.444002368 +0200
@@ -21,7 +21,6 @@
 
 #include <boost/algorithm/string.hpp>
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
 #include <iostream>
 #include <iomanip>
@@ -30,6 +29,7 @@
 #include <array>
 #include <sstream>
 #include <fstream>
+#include <filesystem>
 
 // These constants define the current software version.
 // They must be updated when the command line is changed.
@@ -38,7 +38,7 @@
 
 // Namespaces
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 using namespace aliceVision;
 
diff -Naur alicevision/src/software/pipeline/main_meshDecimate.cpp alicevision.new/src/software/pipeline/main_meshDecimate.cpp
--- alicevision/src/software/pipeline/main_meshDecimate.cpp	2024-05-14 15:34:54.147869574 +0200
+++ alicevision.new/src/software/pipeline/main_meshDecimate.cpp	2024-05-14 15:35:10.444002368 +0200
@@ -19,7 +19,8 @@
 #include <OpenMesh/Tools/Decimater/ModQuadricT.hh>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
+
+#include <filesystem>
 
 // These constants define the current software version.
 // They must be updated when the command line is changed.
@@ -28,7 +29,7 @@
 
 using namespace aliceVision;
 
-namespace bfs = boost::filesystem;
+namespace fs = std::filesystem;
 namespace po = boost::program_options;
 
 int aliceVision_main(int argc, char* argv[])
@@ -73,9 +74,9 @@
     }
 
 
-    bfs::path outDirectory = bfs::path(outputMeshPath).parent_path();
-    if(!bfs::is_directory(outDirectory))
-        bfs::create_directory(outDirectory);
+    fs::path outDirectory = fs::path(outputMeshPath).parent_path();
+    if(!fs::is_directory(outDirectory))
+        fs::create_directory(outDirectory);
 
     // Mesh type
     typedef OpenMesh::TriMesh_ArrayKernelT<>                      Mesh;
diff -Naur alicevision/src/software/pipeline/main_meshDenoising.cpp alicevision.new/src/software/pipeline/main_meshDenoising.cpp
--- alicevision/src/software/pipeline/main_meshDenoising.cpp	2024-05-14 15:34:54.147869574 +0200
+++ alicevision.new/src/software/pipeline/main_meshDenoising.cpp	2024-05-14 15:35:10.445002377 +0200
@@ -21,7 +21,8 @@
 #include <OpenMesh/Core/IO/IOManager.hh>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
+
+#include <filesystem>
 
 // These constants define the current software version.
 // They must be updated when the command line is changed.
@@ -30,7 +31,7 @@
 
 using namespace aliceVision;
 
-namespace bfs = boost::filesystem;
+namespace fs = std::filesystem;
 namespace po = boost::program_options;
 
 int aliceVision_main(int argc, char* argv[])
@@ -83,9 +84,9 @@
     }
 
 
-    bfs::path outDirectory = bfs::path(outputMeshPath).parent_path();
-    if(!bfs::is_directory(outDirectory))
-        bfs::create_directory(outDirectory);
+    fs::path outDirectory = fs::path(outputMeshPath).parent_path();
+    if(!fs::is_directory(outDirectory))
+        fs::create_directory(outDirectory);
 
 
     TriMesh inMesh;
diff -Naur alicevision/src/software/pipeline/main_meshFiltering.cpp alicevision.new/src/software/pipeline/main_meshFiltering.cpp
--- alicevision/src/software/pipeline/main_meshFiltering.cpp	2024-05-14 15:34:54.147869574 +0200
+++ alicevision.new/src/software/pipeline/main_meshFiltering.cpp	2024-05-14 15:35:10.445002377 +0200
@@ -13,7 +13,8 @@
 #include <aliceVision/mvsUtils/common.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
+
+#include <filesystem>
 
 // These constants define the current software version.
 // They must be updated when the command line is changed.
@@ -22,7 +23,7 @@
 
 using namespace aliceVision;
 
-namespace bfs = boost::filesystem;
+namespace fs = std::filesystem;
 namespace po = boost::program_options;
 
 enum class ESubsetType : unsigned char
@@ -158,9 +159,9 @@
     // check and set filtering subset type
     const ESubsetType filteringSubsetType = ESubsetType_stringToEnum(filteringSubsetTypeName);
 
-    bfs::path outDirectory = bfs::path(outputMeshPath).parent_path();
-    if(!bfs::is_directory(outDirectory))
-        bfs::create_directory(outDirectory);
+    fs::path outDirectory = fs::path(outputMeshPath).parent_path();
+    if(!fs::is_directory(outDirectory))
+        fs::create_directory(outDirectory);
 
     mesh::Texturing texturing;
     texturing.loadWithAtlas(inputMeshPath);
diff -Naur alicevision/src/software/pipeline/main_meshing.cpp alicevision.new/src/software/pipeline/main_meshing.cpp
--- alicevision/src/software/pipeline/main_meshing.cpp	2024-05-14 15:34:54.148869583 +0200
+++ alicevision.new/src/software/pipeline/main_meshing.cpp	2024-05-14 15:35:10.446002385 +0200
@@ -25,8 +25,8 @@
 #include <Eigen/Geometry>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <cmath>
 
 // These constants define the current software version.
@@ -36,7 +36,7 @@
 
 using namespace aliceVision;
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 namespace po = boost::program_options;
 
 enum EPartitioningMode
diff -Naur alicevision/src/software/pipeline/main_meshMasking.cpp alicevision.new/src/software/pipeline/main_meshMasking.cpp
--- alicevision/src/software/pipeline/main_meshMasking.cpp	2024-05-14 15:34:54.148869583 +0200
+++ alicevision.new/src/software/pipeline/main_meshMasking.cpp	2024-05-14 15:35:10.445002377 +0200
@@ -16,8 +16,8 @@
 #include <aliceVision/camera/cameraUndistortImage.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <memory>
 
 
@@ -29,7 +29,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 /**
  * @brief Basic cache system to manage masks.
diff -Naur alicevision/src/software/pipeline/main_meshResampling.cpp alicevision.new/src/software/pipeline/main_meshResampling.cpp
--- alicevision/src/software/pipeline/main_meshResampling.cpp	2024-05-14 15:34:54.148869583 +0200
+++ alicevision.new/src/software/pipeline/main_meshResampling.cpp	2024-05-14 15:35:10.445002377 +0200
@@ -21,7 +21,8 @@
 #include <geogram/basic/command_line_args.h>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
+
+#include <filesystem>
 
 // These constants define the current software version.
 // They must be updated when the command line is changed.
@@ -30,7 +31,7 @@
 
 using namespace aliceVision;
 
-namespace bfs = boost::filesystem;
+namespace fs = std::filesystem;
 namespace po = boost::program_options;
 
 int aliceVision_main(int argc, char* argv[])
@@ -76,9 +77,9 @@
         return EXIT_FAILURE;
     }
 
-    bfs::path outDirectory = bfs::path(outputMeshPath).parent_path();
-    if(!bfs::is_directory(outDirectory))
-        bfs::create_directory(outDirectory);
+    fs::path outDirectory = fs::path(outputMeshPath).parent_path();
+    if(!fs::is_directory(outDirectory))
+        fs::create_directory(outDirectory);
 
     GEO::initialize();
 
diff -Naur alicevision/src/software/pipeline/main_nodalSfM.cpp alicevision.new/src/software/pipeline/main_nodalSfM.cpp
--- alicevision/src/software/pipeline/main_nodalSfM.cpp	2024-05-14 15:34:54.148869583 +0200
+++ alicevision.new/src/software/pipeline/main_nodalSfM.cpp	2024-05-14 15:35:10.446002385 +0200
@@ -16,7 +16,6 @@
 #include <aliceVision/feature/imageDescriberCommon.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
 #include <aliceVision/robustEstimation/ACRansac.hpp>
 #include <aliceVision/multiview/RelativePoseKernel.hpp>
@@ -34,6 +33,7 @@
 #include <aliceVision/sfm/bundle/BundleAdjustmentSymbolicCeres.hpp>
 
 #include <cstdlib>
+#include <filesystem>
 #include <random>
 #include <regex>
 
@@ -50,7 +50,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 std::vector<boost::json::value> readJsons(std::istream& is, boost::json::error_code& ec)
 {
@@ -458,7 +458,7 @@
     std::vector<sfm::ReconstructedPair> reconstructedPairs;
     //Assuming the filename is pairs_ + a number with json extension
     const std::regex regex("pairs\\_[0-9]+\\.json");
-    for(fs::directory_entry & file : boost::make_iterator_range(fs::directory_iterator(pairsDirectory), {}))
+    for(auto const& file : fs::directory_iterator{pairsDirectory})
     {
         if (!std::regex_search(file.path().string(), regex))
         {
diff -Naur alicevision/src/software/pipeline/main_normalIntegration.cpp alicevision.new/src/software/pipeline/main_normalIntegration.cpp
--- alicevision/src/software/pipeline/main_normalIntegration.cpp	2024-05-14 15:34:54.149869591 +0200
+++ alicevision.new/src/software/pipeline/main_normalIntegration.cpp	2024-05-14 15:35:10.446002385 +0200
@@ -22,7 +22,6 @@
 
 #include <boost/algorithm/string.hpp>
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
 // Eigen
 #include <Eigen/Dense>
@@ -51,7 +50,6 @@
 int aliceVision_main(int argc, char **argv)
 {
     namespace po = boost::program_options;
-    namespace fs = boost::filesystem;
 
     system::Timer timer;
 
diff -Naur alicevision/src/software/pipeline/main_panoramaCompositing.cpp alicevision.new/src/software/pipeline/main_panoramaCompositing.cpp
--- alicevision/src/software/pipeline/main_panoramaCompositing.cpp	2024-05-14 15:34:54.149869591 +0200
+++ alicevision.new/src/software/pipeline/main_panoramaCompositing.cpp	2024-05-14 15:35:10.447002393 +0200
@@ -29,11 +29,11 @@
 #include <aliceVision/numeric/numeric.hpp>
 
 // IO
+#include <filesystem>
 #include <fstream>
 #include <algorithm>
 #include <boost/property_tree/ptree.hpp>
 #include <boost/property_tree/json_parser.hpp>
-#include <boost/filesystem.hpp>
 
 // These constants define the current software version.
 // They must be updated when the command line is changed.
@@ -44,7 +44,7 @@
 
 namespace po = boost::program_options;
 namespace bpt = boost::property_tree;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 size_t getCompositingOptimalScale(int width, int height)
 {
diff -Naur alicevision/src/software/pipeline/main_panoramaEstimation.cpp alicevision.new/src/software/pipeline/main_panoramaEstimation.cpp
--- alicevision/src/software/pipeline/main_panoramaEstimation.cpp	2024-05-14 15:34:54.149869591 +0200
+++ alicevision.new/src/software/pipeline/main_panoramaEstimation.cpp	2024-05-14 15:35:10.447002393 +0200
@@ -18,13 +18,13 @@
 #include <aliceVision/image/all.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
 #include <OpenImageIO/imageio.h>
 #include <OpenImageIO/imagebuf.h>
 #include <OpenImageIO/imagebufalgo.h>
 
 #include <cstdlib>
+#include <filesystem>
 
 // These constants define the current software version.
 // They must be updated when the command line is changed.
@@ -34,7 +34,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 int aliceVision_main(int argc, char** argv)
 {
diff -Naur alicevision/src/software/pipeline/main_panoramaInit.cpp alicevision.new/src/software/pipeline/main_panoramaInit.cpp
--- alicevision/src/software/pipeline/main_panoramaInit.cpp	2024-05-14 15:34:54.150869599 +0200
+++ alicevision.new/src/software/pipeline/main_panoramaInit.cpp	2024-05-14 15:35:10.447002393 +0200
@@ -15,9 +15,9 @@
 
 #include <random>
 #include <algorithm>
+#include <filesystem>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 #include <boost/property_tree/xml_parser.hpp>
 #include <boost/property_tree/ptree.hpp>
 
@@ -48,7 +48,7 @@
 } // namespace std
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 namespace pt = boost::property_tree;
 
 /**
@@ -642,8 +642,8 @@
         if(_debugDirectory.empty())
             return;
 
-        boost::filesystem::path filepath =
-            boost::filesystem::path(_debugDirectory) /
+        fs::path filepath =
+            fs::path(_debugDirectory) /
             (name + "_" + std::to_string(pyramid_id) + "_" + std::to_string(level) + ".exr");
         image::writeImage(filepath.string(), toSave, image::ImageWriteOptions());
     }
@@ -1196,7 +1196,7 @@
             std::vector<std::pair<std::string, int>> namesWithRank;
             for(const auto& v : sfmData.getViews())
             {
-                boost::filesystem::path path_image(v.second->getImage().getImagePath());
+                fs::path path_image(v.second->getImage().getImagePath());
                 namesWithRank.push_back(std::make_pair(path_image.stem().string(), v.first));
             }
             std::sort(namesWithRank.begin(), namesWithRank.end());
@@ -1320,7 +1320,7 @@
                 CircleDetector detector(intrinsic->w(), intrinsic->h(), 256);
                 if(debugFisheyeCircleEstimation)
                 {
-                    boost::filesystem::path path(sfmOutputDataFilepath);
+                    fs::path path(sfmOutputDataFilepath);
                     detector.setDebugDirectory(path.parent_path().string());
                 }
                 for(const auto& v : sfmData.getViews())
diff -Naur alicevision/src/software/pipeline/main_panoramaMerging.cpp alicevision.new/src/software/pipeline/main_panoramaMerging.cpp
--- alicevision/src/software/pipeline/main_panoramaMerging.cpp	2024-05-14 15:34:54.150869599 +0200
+++ alicevision.new/src/software/pipeline/main_panoramaMerging.cpp	2024-05-14 15:35:10.448002401 +0200
@@ -23,9 +23,9 @@
 // IO
 #include <fstream>
 #include <algorithm>
+#include <filesystem>
 #include <boost/property_tree/ptree.hpp>
 #include <boost/property_tree/json_parser.hpp>
-#include <boost/filesystem.hpp>
 
 // These constants define the current software version.
 // They must be updated when the command line is changed.
@@ -36,7 +36,7 @@
 
 namespace po = boost::program_options;
 namespace bpt = boost::property_tree;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 int aliceVision_main(int argc, char** argv)
 {
diff -Naur alicevision/src/software/pipeline/main_panoramaPostProcessing.cpp alicevision.new/src/software/pipeline/main_panoramaPostProcessing.cpp
--- alicevision/src/software/pipeline/main_panoramaPostProcessing.cpp	2024-05-14 15:34:54.150869599 +0200
+++ alicevision.new/src/software/pipeline/main_panoramaPostProcessing.cpp	2024-05-14 15:35:10.448002401 +0200
@@ -18,12 +18,11 @@
 
 #include <aliceVision/stl/mapUtils.hpp>
 
+#include <filesystem>
 #include <fstream>
 #include <algorithm>
 #include <boost/property_tree/ptree.hpp>
 #include <boost/property_tree/json_parser.hpp>
-#include <boost/filesystem.hpp>
-
 
 #include <OpenImageIO/imageio.h>
 #include <OpenImageIO/imagebuf.h>
@@ -39,7 +38,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 bool downscaleTriangle(image::Image<image::RGBAfColor> & smaller, const image::Image<image::RGBAfColor> & source)
 {
diff -Naur alicevision/src/software/pipeline/main_panoramaPrepareImages.cpp alicevision.new/src/software/pipeline/main_panoramaPrepareImages.cpp
--- alicevision/src/software/pipeline/main_panoramaPrepareImages.cpp	2024-05-14 15:34:54.150869599 +0200
+++ alicevision.new/src/software/pipeline/main_panoramaPrepareImages.cpp	2024-05-14 15:35:10.448002401 +0200
@@ -25,7 +25,7 @@
 
 /*Command line parameters*/
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
+#include <filesystem>
 #include <sstream>
 
 // These constants define the current software version.
@@ -36,7 +36,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 Eigen::Matrix3d getRotationForCode(int code)
 {
@@ -87,7 +87,7 @@
     }
 
     // Analyze path
-    boost::filesystem::path path(sfmOutputDataFilename);
+    fs::path path(sfmOutputDataFilename);
     std::string outputPath = path.parent_path().string();
 
     // Read sfm data
@@ -244,7 +244,7 @@
 
         // Prepare output file
         image::Image<image::RGBfColor> output;
-        const boost::filesystem::path origImgPath(v.second->getImage().getImagePath());
+        const fs::path origImgPath(v.second->getImage().getImagePath());
         const std::string origFilename = origImgPath.stem().string();
         const std::string rotatedImagePath = (fs::path(outputPath) / (origFilename + ".exr")).string();
         oiio::ParamValueList metadata = image::readImageMetadata(v.second->getImage().getImagePath());
diff -Naur alicevision/src/software/pipeline/main_panoramaSeams.cpp alicevision.new/src/software/pipeline/main_panoramaSeams.cpp
--- alicevision/src/software/pipeline/main_panoramaSeams.cpp	2024-05-14 15:34:54.150869599 +0200
+++ alicevision.new/src/software/pipeline/main_panoramaSeams.cpp	2024-05-14 15:35:10.449002409 +0200
@@ -25,11 +25,11 @@
 #include <aliceVision/system/main.hpp>
 
 // IO
+#include <filesystem>
 #include <fstream>
 #include <algorithm>
 #include <boost/property_tree/ptree.hpp>
 #include <boost/property_tree/json_parser.hpp>
-#include <boost/filesystem.hpp>
 #include <regex>
 
 // These constants define the current software version.
@@ -41,7 +41,7 @@
 
 namespace po = boost::program_options;
 namespace bpt = boost::property_tree;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 bool computeWTALabels(image::Image<IndexT> & labels, const std::vector<std::shared_ptr<sfmData::View>> & views, const std::string & inputPath, const std::pair<int, int> & panoramaSize, int downscale)
 {
@@ -226,7 +226,7 @@
     const std::regex pattern("([0-9]+)_([0-9]+).exr");
 
     std::map<IndexT, std::vector<std::string>> paths_per_view;
-    for (auto & iter : boost::filesystem::directory_iterator(p))
+    for (auto & iter : fs::directory_iterator(p))
     { 
         if (!fs::is_regular_file(iter))
         {
diff -Naur alicevision/src/software/pipeline/main_panoramaWarping.cpp alicevision.new/src/software/pipeline/main_panoramaWarping.cpp
--- alicevision/src/software/pipeline/main_panoramaWarping.cpp	2024-05-14 15:34:54.151869607 +0200
+++ alicevision.new/src/software/pipeline/main_panoramaWarping.cpp	2024-05-14 15:35:10.449002409 +0200
@@ -6,7 +6,6 @@
 
 // Reading command line options
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 #include <aliceVision/cmdline/cmdline.hpp>
 #include <aliceVision/system/main.hpp>
 
@@ -23,6 +22,8 @@
 #include <aliceVision/panorama/warper.hpp>
 #include <aliceVision/panorama/distance.hpp>
 
+#include <filesystem>
+
 // These constants define the current software version.
 // They must be updated when the command line is changed.
 #define ALICEVISION_SOFTWARE_VERSION_MAJOR 1
@@ -31,7 +32,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 bool computeOptimalPanoramaSize(std::pair<int, int>& optimalSize, const sfmData::SfMData& sfmData,
                                 const float ratioUpscale)
diff -Naur alicevision/src/software/pipeline/main_photometricStereo.cpp alicevision.new/src/software/pipeline/main_photometricStereo.cpp
--- alicevision/src/software/pipeline/main_photometricStereo.cpp	2024-05-14 15:34:54.151869607 +0200
+++ alicevision.new/src/software/pipeline/main_photometricStereo.cpp	2024-05-14 15:35:10.449002409 +0200
@@ -22,7 +22,6 @@
 
 #include <boost/algorithm/string.hpp>
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
 // Eigen
 #include <Eigen/Dense>
@@ -33,6 +32,7 @@
 #include <opencv2/core/eigen.hpp>
 #include <opencv2/imgproc/imgproc.hpp>
 
+#include <filesystem>
 #include <iostream>
 #include <iomanip>
 #include <string>
@@ -47,7 +47,7 @@
 #define ALICEVISION_SOFTWARE_VERSION_MINOR 0
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 using namespace aliceVision;
 
diff -Naur alicevision/src/software/pipeline/main_prepareDenseScene.cpp alicevision.new/src/software/pipeline/main_prepareDenseScene.cpp
--- alicevision/src/software/pipeline/main_prepareDenseScene.cpp	2024-05-14 15:34:54.151869607 +0200
+++ alicevision.new/src/software/pipeline/main_prepareDenseScene.cpp	2024-05-14 15:35:10.449002409 +0200
@@ -15,11 +15,11 @@
 #include <aliceVision/sfmDataIO/viewIO.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
 #include <stdlib.h>
 #include <stdio.h>
 #include <cmath>
+#include <filesystem>
 #include <vector>
 #include <set>
 #include <iterator>
@@ -39,7 +39,7 @@
 using namespace aliceVision::sfmDataIO;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 template <class ImageT, class MaskFuncT>
 void process(const std::string &dstColorImage, const IntrinsicBase* cam, const oiio::ParamValueList & metadata, const std::string & srcImage, bool evCorrection, float exposureCompensation, MaskFuncT && maskFunc)
diff -Naur alicevision/src/software/pipeline/main_relativePoseEstimating.cpp alicevision.new/src/software/pipeline/main_relativePoseEstimating.cpp
--- alicevision/src/software/pipeline/main_relativePoseEstimating.cpp	2024-05-14 15:34:54.151869607 +0200
+++ alicevision.new/src/software/pipeline/main_relativePoseEstimating.cpp	2024-05-14 15:35:10.450002417 +0200
@@ -34,7 +34,6 @@
 #include <aliceVision/geometry/lie.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 #include <boost/geometry.hpp>
 #include <boost/geometry/geometries/geometries.hpp>
 
@@ -50,7 +49,6 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
 
 
 bool getPoseStructure(Mat3& R, Vec3& t, std::vector<Vec3>& structure, std::vector<size_t>& newVecInliers, const Mat3& E,
diff -Naur alicevision/src/software/pipeline/main_rigCalibration.cpp alicevision.new/src/software/pipeline/main_rigCalibration.cpp
--- alicevision/src/software/pipeline/main_rigCalibration.cpp	2024-05-14 15:34:54.152869615 +0200
+++ alicevision.new/src/software/pipeline/main_rigCalibration.cpp	2024-05-14 15:35:10.450002417 +0200
@@ -21,7 +21,6 @@
 #include <aliceVision/system/main.hpp>
 #include <aliceVision/utils/convert.hpp>
 
-#include <boost/filesystem.hpp>
 #include <boost/program_options.hpp> 
 #include <boost/accumulators/accumulators.hpp>
 #include <boost/accumulators/statistics/stats.hpp>
@@ -30,6 +29,7 @@
 #include <boost/accumulators/statistics/max.hpp>
 #include <boost/accumulators/statistics/sum.hpp>
 
+#include <filesystem>
 #include <iostream>
 #include <string>
 #include <vector>
@@ -47,7 +47,7 @@
 
 using namespace aliceVision;
 
-namespace bfs = boost::filesystem;
+namespace fs = std::filesystem;
 namespace bacc = boost::accumulators;
 namespace po = boost::program_options;
 
@@ -309,9 +309,9 @@
     const std::string &feedPath = mediaPath[idCamera];
     // contains the folder where the video, the images or the filelist is
     const std::string subMediaFilepath = 
-        bfs::is_directory(bfs::path(mediaPath[idCamera])) ? 
+        fs::is_directory(fs::path(mediaPath[idCamera])) ? 
           (mediaPath[idCamera]) : 
-          (bfs::path(mediaPath[idCamera]).parent_path().string());
+          (fs::path(mediaPath[idCamera]).parent_path().string());
 
     // create the feedProvider
     dataio::FeedProvider feed(feedPath, calibFile);
diff -Naur alicevision/src/software/pipeline/main_rigLocalization.cpp alicevision.new/src/software/pipeline/main_rigLocalization.cpp
--- alicevision/src/software/pipeline/main_rigLocalization.cpp	2024-05-14 15:34:54.152869615 +0200
+++ alicevision.new/src/software/pipeline/main_rigLocalization.cpp	2024-05-14 15:35:10.450002417 +0200
@@ -21,7 +21,6 @@
 #include <aliceVision/system/main.hpp>
 #include <aliceVision/utils/convert.hpp>
 
-#include <boost/filesystem.hpp>
 #include <boost/program_options.hpp> 
 #include <boost/accumulators/accumulators.hpp>
 #include <boost/accumulators/statistics/stats.hpp>
@@ -31,6 +30,7 @@
 #include <boost/accumulators/statistics/sum.hpp>
 #include <boost/ptr_container/ptr_vector.hpp>
 
+#include <filesystem>
 #include <iostream>
 #include <string>
 #include <vector>
@@ -49,7 +49,7 @@
 
 using namespace aliceVision;
 
-namespace bfs = boost::filesystem;
+namespace fs = std::filesystem;
 namespace bacc = boost::accumulators;
 namespace po = boost::program_options;
 
@@ -306,7 +306,7 @@
   cameraExporters.reserve(numCameras);
 
   // this contains the full path and the root name of the file without the extension
-  const std::string basename = (bfs::path(exportAlembicFile).parent_path() / bfs::path(exportAlembicFile).stem()).string();
+  const std::string basename = (fs::path(exportAlembicFile).parent_path() / fs::path(exportAlembicFile).stem()).string();
 
   for(std::size_t i = 0; i < numCameras; ++i)
   {
@@ -326,9 +326,9 @@
     const std::string &feedPath = mediaPath[idCamera];
     // contains the folder where the video, the images or the filelist is
     subMediaFilepath[idCamera] = 
-        bfs::is_directory(bfs::path(mediaPath[idCamera])) ? 
+        fs::is_directory(fs::path(mediaPath[idCamera])) ? 
           (mediaPath[idCamera]) : 
-          (bfs::path(mediaPath[idCamera]).parent_path().string());
+          (fs::path(mediaPath[idCamera]).parent_path().string());
 
     // create the feedProvider
     feeders[idCamera] = new dataio::FeedProvider(feedPath, calibFile);
diff -Naur alicevision/src/software/pipeline/main_sfmBootstraping.cpp alicevision.new/src/software/pipeline/main_sfmBootstraping.cpp
--- alicevision/src/software/pipeline/main_sfmBootstraping.cpp	2024-05-14 15:34:54.152869615 +0200
+++ alicevision.new/src/software/pipeline/main_sfmBootstraping.cpp	2024-05-14 15:35:10.451002425 +0200
@@ -16,7 +16,6 @@
 #include <aliceVision/feature/imageDescriberCommon.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
 #include <aliceVision/sfm/pipeline/relativePoses.hpp>
 #include <aliceVision/sfmData/SfMData.hpp>
@@ -28,6 +27,7 @@
 #include <aliceVision/multiview/triangulation/triangulationDLT.hpp>
 
 #include <cstdlib>
+#include <filesystem>
 #include <random>
 #include <regex>
 
@@ -39,7 +39,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 std::vector<boost::json::value> readJsons(std::istream& is, boost::json::error_code& ec)
 {
@@ -382,7 +382,7 @@
     //Result of pair estimations are stored in multiple files
     std::vector<sfm::ReconstructedPair> reconstructedPairs;
     const std::regex regex("pairs\\_[0-9]+\\.json");
-    for(fs::directory_entry & file : boost::make_iterator_range(fs::directory_iterator(pairsDirectory), {}))
+    for(auto const& file : fs::directory_iterator{pairsDirectory})
     {
         if (!std::regex_search(file.path().string(), regex))
         {
diff -Naur alicevision/src/software/pipeline/main_sfmTriangulation.cpp alicevision.new/src/software/pipeline/main_sfmTriangulation.cpp
--- alicevision/src/software/pipeline/main_sfmTriangulation.cpp	2024-05-14 15:34:54.152869615 +0200
+++ alicevision.new/src/software/pipeline/main_sfmTriangulation.cpp	2024-05-14 15:35:10.451002425 +0200
@@ -19,9 +19,9 @@
 #include <aliceVision/sfm/bundle/BundleAdjustment.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
 #include <cstdlib>
+#include <filesystem>
 
 // These constants define the current software version.
 // They must be updated when the command line is changed.
@@ -31,7 +31,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 using namespace aliceVision::track;
 using namespace aliceVision::sfm;
 
diff -Naur alicevision/src/software/pipeline/main_sphereDetection.cpp alicevision.new/src/software/pipeline/main_sphereDetection.cpp
--- alicevision/src/software/pipeline/main_sphereDetection.cpp	2024-05-14 15:34:54.152869615 +0200
+++ alicevision.new/src/software/pipeline/main_sphereDetection.cpp	2024-05-14 15:35:10.451002425 +0200
@@ -17,8 +17,8 @@
 
 #include <boost/algorithm/string.hpp>
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <iostream>
 #include <numeric>
 
@@ -32,7 +32,7 @@
 #define ALICEVISION_SOFTWARE_VERSION_MAJOR 1
 #define ALICEVISION_SOFTWARE_VERSION_MINOR 0
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 namespace po = boost::program_options;
 
 using namespace aliceVision;
diff -Naur alicevision/src/software/pipeline/main_texturing.cpp alicevision.new/src/software/pipeline/main_texturing.cpp
--- alicevision/src/software/pipeline/main_texturing.cpp	2024-05-14 15:34:54.152869615 +0200
+++ alicevision.new/src/software/pipeline/main_texturing.cpp	2024-05-14 15:35:10.451002425 +0200
@@ -23,7 +23,8 @@
 #include <geogram/basic/common.h>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
+
+#include <filesystem>
 
 // These constants define the current software version.
 // They must be updated when the command line is changed.
@@ -32,10 +33,10 @@
 
 using namespace aliceVision;
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 namespace po = boost::program_options;
 
-bfs::path absolutePathNoExt(const bfs::path& p)
+fs::path absolutePathNoExt(const fs::path& p)
 {
     return p.parent_path() / p.stem();
 }
diff -Naur alicevision/src/software/pipeline/main_tracksBuilding.cpp alicevision.new/src/software/pipeline/main_tracksBuilding.cpp
--- alicevision/src/software/pipeline/main_tracksBuilding.cpp	2024-05-14 15:34:54.153869623 +0200
+++ alicevision.new/src/software/pipeline/main_tracksBuilding.cpp	2024-05-14 15:35:10.452002433 +0200
@@ -21,7 +21,6 @@
 #include <aliceVision/track/trackIO.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
 #include <cstdlib>
 
@@ -33,7 +32,6 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
 
 
 int aliceVision_main(int argc, char** argv)
diff -Naur alicevision/src/software/utils/CMakeLists.txt alicevision.new/src/software/utils/CMakeLists.txt
--- alicevision/src/software/utils/CMakeLists.txt	2024-05-14 15:34:54.382871490 +0200
+++ alicevision.new/src/software/utils/CMakeLists.txt	2024-05-14 15:35:10.452002433 +0200
@@ -122,7 +122,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
     )
 
     # Transform rig
@@ -138,7 +137,6 @@
                   aliceVision_system
                   aliceVision_cmdline
                   Boost::program_options
-                  Boost::filesystem
         )
     endif()
 
@@ -153,7 +151,6 @@
               aliceVision_sfmData
               aliceVision_sfmDataIO
               Boost::program_options
-              Boost::filesystem
     )
 
     # SfM alignment
@@ -259,7 +256,6 @@
               ${COINUTILS_LIBRARIES}
               ${OSI_LIBRARIES}
               Boost::program_options
-              Boost::filesystem
               Boost::boost
               Boost::timer
               ${LEMON_LIBRARY}
@@ -277,7 +273,6 @@
                   aliceVision_keyframe
                   ${OPENIMAGEIO_LIBRARIES}
                   Boost::program_options
-                  Boost::filesystem
         )
     endif()
 
@@ -304,7 +299,6 @@
                   aliceVision_sfmData
                   aliceVision_sfmDataIO
                   Boost::program_options
-                  Boost::filesystem
                   ${OpenCV_LIBS} # opencv_core  opencv_imgproc  opencv_video  opencv_imgcodecs  opencv_videoio  opencv_features2d  opencv_xfeatures2d
                   opencv_mcc
         )
@@ -333,7 +327,6 @@
                   aliceVision_sfmData
                   aliceVision_sfmDataIO
                   Boost::program_options
-                  Boost::filesystem
                   ${OpenCV_LIBS} # opencv_core  opencv_imgproc  opencv_video  opencv_imgcodecs  opencv_videoio  opencv_features2d  opencv_xfeatures2d
                   opencv_mcc
         )
@@ -356,7 +349,6 @@
               aliceVision_camera
               ${OPENIMAGEIO_LIBRARIES}
               Boost::program_options
-              Boost::filesystem
     )
 endif()
 
diff -Naur alicevision/src/software/utils/main_colorCheckerCorrection.cpp alicevision.new/src/software/utils/main_colorCheckerCorrection.cpp
--- alicevision/src/software/utils/main_colorCheckerCorrection.cpp	2024-05-14 15:34:54.153869623 +0200
+++ alicevision.new/src/software/utils/main_colorCheckerCorrection.cpp	2024-05-14 15:35:10.452002433 +0200
@@ -15,7 +15,6 @@
 #include <aliceVision/system/main.hpp>
 #include <aliceVision/config.hpp>
 
-#include <boost/filesystem.hpp>
 #include <boost/program_options.hpp>
 #include <boost/property_tree/ptree.hpp>
 #include <boost/property_tree/json_parser.hpp>
@@ -25,6 +24,7 @@
 #include <opencv2/imgcodecs.hpp>
 #include <opencv2/mcc.hpp>
 
+#include <filesystem>
 #include <string>
 #include <fstream>
 #include <vector>
@@ -37,7 +37,7 @@
 
 using namespace aliceVision;
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 namespace bpt = boost::property_tree;
 namespace po = boost::program_options;
 
@@ -280,7 +280,7 @@
                 const std::regex regex = utils::filterToRegex(inputExpression);
                 // Get supported files in inputPath directory which matches our regex filter
                 filesStrPaths = utils::getFilesPathsFromFolder(
-                    inputPath.parent_path().generic_string(), [&regex](const boost::filesystem::path& path) {
+                    inputPath.parent_path().generic_string(), [&regex](const fs::path& path) {
                         return image::isSupported(path.extension().string()) &&
                                std::regex_match(path.generic_string(), regex);
                     });
diff -Naur alicevision/src/software/utils/main_colorCheckerDetection.cpp alicevision.new/src/software/utils/main_colorCheckerDetection.cpp
--- alicevision/src/software/utils/main_colorCheckerDetection.cpp	2024-05-14 15:34:54.153869623 +0200
+++ alicevision.new/src/software/utils/main_colorCheckerDetection.cpp	2024-05-14 15:35:10.453002442 +0200
@@ -16,7 +16,6 @@
 
 #include <dependencies/vectorGraphics/svgDrawer.hpp>
 
-#include <boost/filesystem.hpp>
 #include <boost/program_options.hpp>
 #include <boost/property_tree/ptree.hpp>
 #include <boost/property_tree/json_parser.hpp>
@@ -26,6 +25,7 @@
 #include <opencv2/imgcodecs.hpp>
 #include <opencv2/mcc.hpp>
 
+#include <filesystem>
 #include <string>
 #include <fstream>
 #include <vector>
@@ -38,7 +38,7 @@
 
 using namespace aliceVision;
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 namespace bpt = boost::property_tree;
 namespace po = boost::program_options;
 
@@ -487,7 +487,7 @@
             const std::regex regex = utils::filterToRegex(inputExpression);
             // Get supported files in inputPath directory which matches our regex filter
             filesStrPaths = utils::getFilesPathsFromFolder(inputPath.parent_path().generic_string(),
-               [&regex](const boost::filesystem::path& path) {
+               [&regex](const fs::path& path) {
                  return image::isSupported(path.extension().string()) && std::regex_match(path.generic_string(), regex);
                }
             );
diff -Naur alicevision/src/software/utils/main_frustumFiltering.cpp alicevision.new/src/software/utils/main_frustumFiltering.cpp
--- alicevision/src/software/utils/main_frustumFiltering.cpp	2024-05-14 15:34:54.154869631 +0200
+++ alicevision.new/src/software/utils/main_frustumFiltering.cpp	2024-05-14 15:35:10.453002442 +0200
@@ -15,8 +15,8 @@
 #include <aliceVision/system/main.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <cstdlib>
 
 // These constants define the current software version.
@@ -28,7 +28,7 @@
 using namespace aliceVision::sfm;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 /// Build a list of pair that share visibility content from the SfMData structure
 PairSet BuildPairsFromStructureObservations(const sfmData::SfMData& sfmData)
diff -Naur alicevision/src/software/utils/main_generateSampleScene.cpp alicevision.new/src/software/utils/main_generateSampleScene.cpp
--- alicevision/src/software/utils/main_generateSampleScene.cpp	2024-05-14 15:34:54.154869631 +0200
+++ alicevision.new/src/software/utils/main_generateSampleScene.cpp	2024-05-14 15:35:10.453002442 +0200
@@ -11,7 +11,7 @@
 #include <aliceVision/sfmDataIO/sfmDataIO.hpp>
 #include <aliceVision/sfmDataIO/sceneSample.hpp>
 
-#include <boost/filesystem.hpp>
+#include <filesystem>
 #include <boost/program_options.hpp>
 
 // These constants define the current software version.
@@ -21,7 +21,7 @@
 
 using namespace aliceVision;
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 namespace po = boost::program_options;
 
 int aliceVision_main(int argc, char** argv)
diff -Naur alicevision/src/software/utils/main_imageProcessing.cpp alicevision.new/src/software/utils/main_imageProcessing.cpp
--- alicevision/src/software/utils/main_imageProcessing.cpp	2024-05-14 15:34:54.155869640 +0200
+++ alicevision.new/src/software/utils/main_imageProcessing.cpp	2024-05-14 15:35:10.454002450 +0200
@@ -20,7 +20,6 @@
 #include <aliceVision/lensCorrectionProfile/lcp.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 #include <boost/algorithm/string.hpp>
 #include <boost/foreach.hpp>
 
@@ -34,6 +33,7 @@
 #include <OpenImageIO/imagebufalgo.h>
 #include <OpenImageIO/color.h>
 
+#include <filesystem>
 #include <string>
 #include <cmath>
 #include <vector>
@@ -49,7 +49,7 @@
 
 using namespace aliceVision;
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 struct LensCorrectionParams
 {
@@ -881,7 +881,7 @@
     {
         // The file must match the file name and extension to be used as a metadata replacement.
         const std::vector<std::string> metadataFilePaths = utils::getFilesPathsFromFolders(
-            metadataFolders, [&filename](const boost::filesystem::path& path)
+            metadataFolders, [&filename](const fs::path& path)
             {
                 return path.filename().string() == filename;
             }
@@ -1428,7 +1428,7 @@
         if(inputExpression.empty())
         {
             // Get supported files
-            filesStrPaths = utils::getFilesPathsFromFolders(inputFolders, [](const boost::filesystem::path& path) {
+            filesStrPaths = utils::getFilesPathsFromFolders(inputFolders, [](const fs::path& path) {
                 return image::isSupported(path.extension().string());
             });
         }
@@ -1451,7 +1451,7 @@
                 const std::regex regex = utils::filterToRegex(inputExpression);
                 // Get supported files in inputPath directory which matches our regex filter
                 filesStrPaths = utils::getFilesPathsFromFolder(inputPath.parent_path().generic_string(), 
-                    [&regex](const boost::filesystem::path& path) {
+                    [&regex](const fs::path& path) {
                         return image::isSupported(path.extension().string()) && std::regex_match(path.generic_string(), regex);
                     }
                 );
diff -Naur alicevision/src/software/utils/main_importMiddlebury.cpp alicevision.new/src/software/utils/main_importMiddlebury.cpp
--- alicevision/src/software/utils/main_importMiddlebury.cpp	2024-05-14 15:34:54.155869640 +0200
+++ alicevision.new/src/software/utils/main_importMiddlebury.cpp	2024-05-14 15:35:10.454002450 +0200
@@ -13,8 +13,8 @@
 #include <aliceVision/system/main.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <iostream>
 #include <vector>
 #include <ostream>
@@ -30,7 +30,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace bfs = boost::filesystem;
+namespace fs = std::filesystem;
 
 
 /*
@@ -77,14 +77,14 @@
     }
 
     // check input file exist
-    if(!exists(bfs::path(middleburyFile)))
+    if(!exists(fs::path(middleburyFile)))
     {
         ALICEVISION_LOG_ERROR("File " << middleburyFile << " does not exist");
         return EXIT_FAILURE;
     }
 
     // get the base path
-    const auto basePath = bfs::path(middleburyFile).parent_path().string();
+    const auto basePath = fs::path(middleburyFile).parent_path().string();
 
     // parse file
     const auto sfmData =
diff -Naur alicevision/src/software/utils/main_keyframeSelection.cpp alicevision.new/src/software/utils/main_keyframeSelection.cpp
--- alicevision/src/software/utils/main_keyframeSelection.cpp	2024-05-14 15:34:54.155869640 +0200
+++ alicevision.new/src/software/utils/main_keyframeSelection.cpp	2024-05-14 15:35:10.454002450 +0200
@@ -11,8 +11,8 @@
 #include <aliceVision/system/main.hpp>
 
 #include <boost/program_options.hpp> 
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <string>
 #include <vector>
 
@@ -24,7 +24,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 const std::string supportedExtensions = "none, exr, jpg, png";
 
diff -Naur alicevision/src/software/utils/main_lightingEstimation.cpp alicevision.new/src/software/utils/main_lightingEstimation.cpp
--- alicevision/src/software/utils/main_lightingEstimation.cpp	2024-05-14 15:34:54.155869640 +0200
+++ alicevision.new/src/software/utils/main_lightingEstimation.cpp	2024-05-14 15:35:10.455002458 +0200
@@ -18,8 +18,8 @@
 #include <OpenImageIO/imagebufalgo_util.h>
 
 #include <boost/program_options.hpp> 
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <string>
 #include <vector>
 
@@ -31,7 +31,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 enum class EAlbedoEstimation
 {
diff -Naur alicevision/src/software/utils/main_mergeMeshes.cpp alicevision.new/src/software/utils/main_mergeMeshes.cpp
--- alicevision/src/software/utils/main_mergeMeshes.cpp	2024-05-14 15:34:54.155869640 +0200
+++ alicevision.new/src/software/utils/main_mergeMeshes.cpp	2024-05-14 15:35:10.455002458 +0200
@@ -10,7 +10,6 @@
 #include <aliceVision/system/Timer.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
 #include <geogram/mesh/mesh.h>
 #include <geogram/mesh/mesh_io.h>
@@ -23,6 +22,7 @@
 #include <geogram/basic/command_line_args.h>
 
 #include <iostream>
+#include <filesystem>
 #include <fstream>
 #include <ostream>
 #include <string>
@@ -35,7 +35,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 enum class EOperationType : unsigned char
 {
diff -Naur alicevision/src/software/utils/main_qualityEvaluation.cpp alicevision.new/src/software/utils/main_qualityEvaluation.cpp
--- alicevision/src/software/utils/main_qualityEvaluation.cpp	2024-05-14 15:34:54.155869640 +0200
+++ alicevision.new/src/software/utils/main_qualityEvaluation.cpp	2024-05-14 15:35:10.455002458 +0200
@@ -18,8 +18,8 @@
 #include <dependencies/htmlDoc/htmlDoc.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <cstdlib>
 #include <iostream>
 
@@ -31,7 +31,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 int aliceVision_main(int argc, char **argv)
 {
diff -Naur alicevision/src/software/utils/main_sfmColorHarmonize.cpp alicevision.new/src/software/utils/main_sfmColorHarmonize.cpp
--- alicevision/src/software/utils/main_sfmColorHarmonize.cpp	2024-05-14 15:34:54.156869648 +0200
+++ alicevision.new/src/software/utils/main_sfmColorHarmonize.cpp	2024-05-14 15:35:10.455002458 +0200
@@ -13,9 +13,9 @@
 #include <software/utils/sfmColorHarmonize/colorHarmonizeEngineGlobal.hpp>
 
 #include <boost/program_options.hpp>
-#include <boost/filesystem.hpp>
 
 #include <cstdlib>
+#include <filesystem>
 #include <memory>
 
 // These constants define the current software version.
@@ -26,7 +26,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 int aliceVision_main( int argc, char **argv )
 {
diff -Naur alicevision/src/software/utils/main_sfmDistances.cpp alicevision.new/src/software/utils/main_sfmDistances.cpp
--- alicevision/src/software/utils/main_sfmDistances.cpp	2024-05-14 15:34:54.156869648 +0200
+++ alicevision.new/src/software/utils/main_sfmDistances.cpp	2024-05-14 15:35:10.455002458 +0200
@@ -14,8 +14,8 @@
 #include <boost/program_options.hpp>
 #include <boost/algorithm/string/split.hpp>
 #include <boost/algorithm/string/classification.hpp>
-#include <boost/filesystem.hpp>
 
+#include <filesystem>
 #include <string>
 #include <sstream>
 #include <vector>
@@ -29,7 +29,7 @@
 using namespace aliceVision;
 
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 /**
  * @brief Alignment method enum
diff -Naur alicevision/src/software/utils/main_split360Images.cpp alicevision.new/src/software/utils/main_split360Images.cpp
--- alicevision/src/software/utils/main_split360Images.cpp	2024-05-14 15:34:54.157869656 +0200
+++ alicevision.new/src/software/utils/main_split360Images.cpp	2024-05-14 15:35:10.456002466 +0200
@@ -18,7 +18,6 @@
 #include <dependencies/vectorGraphics/svgDrawer.hpp>
 #include <aliceVision/panorama/sphericalMapping.hpp>
 
-#include <boost/filesystem.hpp>
 #include <boost/program_options.hpp>
 #include <boost/math/constants/constants.hpp>
 
@@ -29,6 +28,7 @@
 #include <string>
 #include <iostream>
 #include <iterator>
+#include <filesystem>
 #include <fstream>
 #include <vector>
 #include <memory>
@@ -40,7 +40,7 @@
 
 using namespace aliceVision;
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 namespace po = boost::program_options;
 namespace oiio = OIIO;
 
@@ -490,7 +490,7 @@
             // - a SfMData file (in that case we split the views)
             if (fs::is_directory(path))
             {
-                for (fs::directory_entry& entry : boost::make_iterator_range(fs::directory_iterator(path), {}))
+                for (auto const& entry : fs::directory_iterator{path})
                 {
                     imagePaths.push_back(entry.path().string());
                 }
diff -Naur alicevision/src/software/utils/main_voctreeQueryUtility.cpp alicevision.new/src/software/utils/main_voctreeQueryUtility.cpp
--- alicevision/src/software/utils/main_voctreeQueryUtility.cpp	2024-05-14 15:34:54.158869664 +0200
+++ alicevision.new/src/software/utils/main_voctreeQueryUtility.cpp	2024-05-14 15:35:10.456002466 +0200
@@ -26,6 +26,7 @@
 
 #include <iostream>
 #include <fstream>
+#include <filesystem>
 #include <ostream>
 #include <string>
 #include <chrono>
@@ -40,7 +41,7 @@
 
 using namespace boost::accumulators;
 namespace po = boost::program_options;
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 using namespace aliceVision;
 using namespace aliceVision::feature;
 
diff -Naur alicevision/src/software/utils/precisionEvaluationToGt.hpp alicevision.new/src/software/utils/precisionEvaluationToGt.hpp
--- alicevision/src/software/utils/precisionEvaluationToGt.hpp	2024-05-14 15:34:54.158869664 +0200
+++ alicevision.new/src/software/utils/precisionEvaluationToGt.hpp	2024-05-14 15:35:10.456002466 +0200
@@ -14,12 +14,11 @@
 #include <dependencies/htmlDoc/htmlDoc.hpp>
 #include <dependencies/vectorGraphics/svgDrawer.hpp>
 
-#include <boost/filesystem.hpp>
-
+#include <filesystem>
 #include <vector>
 #include <algorithm>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision
 {
diff -Naur alicevision/src/software/utils/sfmColorHarmonize/colorHarmonizeEngineGlobal.cpp alicevision.new/src/software/utils/sfmColorHarmonize/colorHarmonizeEngineGlobal.cpp
--- alicevision/src/software/utils/sfmColorHarmonize/colorHarmonizeEngineGlobal.cpp	2024-05-14 15:34:54.158869664 +0200
+++ alicevision.new/src/software/utils/sfmColorHarmonize/colorHarmonizeEngineGlobal.cpp	2024-05-14 15:35:10.457002474 +0200
@@ -36,9 +36,10 @@
 #include <iterator>
 #include <algorithm>
 #include <functional>
+#include <filesystem>
 #include <sstream>
 
-namespace fs = boost::filesystem;
+namespace fs = std::filesystem;
 
 namespace aliceVision {
 
