From 8e2694eeb50688c2c8f855f0f65fc5a75ef6f7fa Mon Sep 17 00:00:00 2001
From: Grigory Ustinov <grenka@altlinux.org>
Date: Thu, 7 Mar 2019 17:27:47 +0300
Subject: [PATCH] Fix Werror=catch-value for gcc8

---
 lib/src/tokens.cc               |  2 +-
 lib/tests/concatenation_test.cc |  4 ++--
 lib/tests/conf_parser_test.cc   | 12 ++++++------
 3 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/lib/src/tokens.cc b/lib/src/tokens.cc
index cf1f93d..1d1a165 100644
--- a/lib/src/tokens.cc
+++ b/lib/src/tokens.cc
@@ -101,7 +101,7 @@ namespace hocon {
             return other_problem.what() == what() &&
                    other_problem.message() == message() &&
                    other_problem.suggest_quotes() == suggest_quotes();
-        } catch (bad_cast ex){
+        } catch (bad_cast &ex){
             return false;
         }
     }
diff --git a/lib/tests/concatenation_test.cc b/lib/tests/concatenation_test.cc
index 4c465c5..4a636a2 100644
--- a/lib/tests/concatenation_test.cc
+++ b/lib/tests/concatenation_test.cc
@@ -299,7 +299,7 @@ TEST_CASE("concatenation") {
     SECTION("concatenate object substitutions with quoted space") {
         REQUIRE_THROWS_AS(
             parse_config(R"(foo = { a : 1}, bar = { b : 2 }, x = ${foo}"  "${bar})")->resolve(),
-            config_exception
+            config_exception&
         );
     }
 
@@ -308,7 +308,7 @@ TEST_CASE("concatenation") {
     SECTION("concatenate list substitutions with quoted space") {
         REQUIRE_THROWS_AS(
             parse_config(R"(foo = [1], bar = [2], x = ${foo}"  "${bar})")->resolve(),
-            config_exception
+            config_exception&
         );
     }
 
diff --git a/lib/tests/conf_parser_test.cc b/lib/tests/conf_parser_test.cc
index d7a019d..93c4f40 100644
--- a/lib/tests/conf_parser_test.cc
+++ b/lib/tests/conf_parser_test.cc
@@ -38,7 +38,7 @@ static shared_value parse(string s) {
 TEST_CASE("invalid conf throws") {
     for (auto const& invalid : whitespace_variations(invalid_conf(), false)) {
         CAPTURE(invalid.test);
-        REQUIRE_THROWS_AS(parse(invalid.test), config_exception);
+        REQUIRE_THROWS_AS(parse(invalid.test), config_exception&);
     }
 }
 
@@ -117,8 +117,8 @@ TEST_CASE("path parsing") {
     REQUIRE(path(vector<string>{"1", "2", "3", "4"}) == parse_path("1.2.3.4"));
 
     for (string invalid : {"", " ", "  \n   \n  ", "a.", ".b", "a..b", "a${b}c", "\"\".", ".\"\""}) {
-        REQUIRE_THROWS_AS(parse_without_resolving("[${"+invalid+"}]"), bad_path_exception);
-        REQUIRE_THROWS_AS(path_parser::parse_path(invalid), bad_path_exception);
+        REQUIRE_THROWS_AS(parse_without_resolving("[${"+invalid+"}]"), bad_path_exception&);
+        REQUIRE_THROWS_AS(path_parser::parse_path(invalid), bad_path_exception&);
     }
 }
 
@@ -244,9 +244,9 @@ TEST_CASE("implied comma handling") {
     auto no_newline_at_end = parse_config("a : b");
     REQUIRE("b" == no_newline_at_end->get_string("a"));
 
-    REQUIRE_THROWS_AS(parse_config("{ a : y b : z }"), config_exception);
+    REQUIRE_THROWS_AS(parse_config("{ a : y b : z }"), config_exception&);
 
-    REQUIRE_THROWS_AS(parse_config(R"({ "a" : "y" "b" : "z" })"), config_exception);
+    REQUIRE_THROWS_AS(parse_config(R"({ "a" : "y" "b" : "z" })"), config_exception&);
 
     // with no newline or comma, we do value concatenation
     auto no_newline_in_array = parse_config(" { c : [ 1 2 3 ] } ");
@@ -642,7 +642,7 @@ TEST_CASE("include file with extension") {
     auto conf = config::parse_string("include file(\"" + fixture_path("test01.conf") + "\")");
 
     REQUIRE(42u == conf->get_int("ints.fortyTwo"));
-    REQUIRE_THROWS_AS(conf->get_int("fromJson1"), config_exception);
+    REQUIRE_THROWS_AS(conf->get_int("fromJson1"), config_exception&);
 }
 
 TEST_CASE("include file whitespace inside parens") {
