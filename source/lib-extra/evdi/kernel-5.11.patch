diff -Naur evdi-1.7.2/module/evdi_drv.c evdi-1.7.2.new/module/evdi_drv.c
--- evdi-1.7.2/module/evdi_drv.c	2020-12-12 12:01:33.000000000 +0100
+++ evdi-1.7.2.new/module/evdi_drv.c	2021-02-16 16:10:47.388568047 +0100
@@ -48,11 +48,13 @@
 			  DRM_UNLOCKED),
 };
 
+#if KERNEL_VERSION(5, 11, 0) > LINUX_VERSION_CODE
 static const struct vm_operations_struct evdi_gem_vm_ops = {
 	.fault = evdi_gem_fault,
 	.open = drm_gem_vm_open,
 	.close = drm_gem_vm_close,
 };
+#endif
 
 static const struct file_operations evdi_driver_fops = {
 	.owner = THIS_MODULE,
@@ -87,17 +89,26 @@
 			 | DRIVER_ATOMIC,
 #endif
 	.unload = evdi_driver_unload,
+#if KERNEL_VERSION(5, 11, 0) > LINUX_VERSION_CODE
 	.preclose = evdi_driver_preclose,
+#endif
 
 	.postclose = evdi_driver_postclose,
 
 	/* gem hooks */
-#if KERNEL_VERSION(5, 9, 0) <= LINUX_VERSION_CODE
-	.gem_free_object_unlocked = evdi_gem_free_object,
-#else
+#if KERNEL_VERSION(5, 9, 0) > LINUX_VERSION_CODE
+	// In 5.9 and below we have gem_free_object
 	.gem_free_object = evdi_gem_free_object,
+#elif KERNEL_VERSION(5, 10, 0) >= LINUX_VERSION_CODE
+	// In 5.9 and 5.10 this is called gem_free_object_unlocked
+	.gem_free_object_unlocked = evdi_gem_free_object,
+	// Note that gem_free_object_unlocked no longer exists in 5.11 - it needs to be added to the gem object instead
 #endif
+#if KERNEL_VERSION(5, 11, 0) > LINUX_VERSION_CODE
+    // In 5.11+, this is set in the object instance
 	.gem_vm_ops = &evdi_gem_vm_ops,
+#endif
+
 
 	.dumb_create = evdi_dumb_create,
 	.dumb_map_offset = evdi_gem_mmap,
@@ -111,8 +122,11 @@
 	.prime_fd_to_handle = drm_gem_prime_fd_to_handle,
 	.gem_prime_import = drm_gem_prime_import,
 	.prime_handle_to_fd = drm_gem_prime_handle_to_fd,
+#if KERNEL_VERSION(5, 11, 0) > LINUX_VERSION_CODE
+	// In kernel 5.11, these have been moved to the object instance
 	.gem_prime_export = drm_gem_prime_export,
 	.gem_prime_get_sg_table = evdi_prime_get_sg_table,
+#endif
 	.gem_prime_import_sg_table = evdi_prime_import_sg_table,
 
 	.enable_vblank = evdi_enable_vblank,
diff -Naur evdi-1.7.2/module/evdi_gem.c evdi-1.7.2.new/module/evdi_gem.c
--- evdi-1.7.2/module/evdi_gem.c	2020-12-12 12:01:33.000000000 +0100
+++ evdi-1.7.2.new/module/evdi_gem.c	2021-02-16 16:08:04.140702464 +0100
@@ -18,6 +18,17 @@
 #include <linux/dma-buf.h>
 #include <drm/drm_cache.h>
 
+void evdi_gem_free_object(struct drm_gem_object *gem_obj);
+
+#if KERNEL_VERSION(5, 11, 0) <= LINUX_VERSION_CODE
+static const struct vm_operations_struct evdi_gem_vm_ops = {
+	.fault = evdi_gem_fault,
+	.open = drm_gem_vm_open,
+	.close = drm_gem_vm_close,
+};
+#endif
+
+
 uint32_t evdi_gem_object_handle_lookup(struct drm_file *filp,
 				       struct drm_gem_object *obj)
 {
@@ -41,6 +52,9 @@
 					      size_t size)
 {
 	struct evdi_gem_object *obj;
+#if KERNEL_VERSION(5, 11, 0) <= LINUX_VERSION_CODE
+	struct drm_gem_object_funcs *funcs;
+#endif
 
 	obj = kzalloc(sizeof(*obj), GFP_KERNEL);
 	if (obj == NULL)
@@ -51,6 +65,21 @@
 		return NULL;
 	}
 
+#if KERNEL_VERSION(5, 11, 0) <= LINUX_VERSION_CODE
+	funcs = kzalloc(sizeof(struct drm_gem_object_funcs), GFP_KERNEL);
+	if (funcs == NULL) {
+		kfree(obj);
+		return NULL;
+	}
+	funcs->free = evdi_gem_free_object;
+	funcs->vm_ops = &evdi_gem_vm_ops;
+	// This is just setting the default drm_gem_prime_export kernel function, so wouldn't NULL also work?
+	funcs->export = drm_gem_prime_export;
+	funcs->get_sg_table = evdi_prime_get_sg_table;
+
+	obj->base.funcs = funcs;
+#endif
+
 #if KERNEL_VERSION(5, 4, 0) <= LINUX_VERSION_CODE || defined(EL8)
 	dma_resv_init(&obj->_resv);
 #else
@@ -182,11 +211,19 @@
 
 int evdi_gem_vmap(struct evdi_gem_object *obj)
 {
+#if KERNEL_VERSION(5, 11, 0) <= LINUX_VERSION_CODE
+	struct dma_buf_map map;
+#endif
 	int page_count = obj->base.size / PAGE_SIZE;
 	int ret;
 
 	if (obj->base.import_attach) {
+#if KERNEL_VERSION(5, 11, 0) > LINUX_VERSION_CODE
 		obj->vmapping = dma_buf_vmap(obj->base.import_attach->dmabuf);
+#else
+		dma_buf_vmap(obj->base.import_attach->dmabuf, &map);
+		obj->vmapping = map.vaddr;
+#endif
 		if (!obj->vmapping)
 			return -ENOMEM;
 		return 0;
@@ -239,6 +276,12 @@
 	reservation_object_fini(&obj->_resv);
 #endif
 	obj->resv = NULL;
+
+#if KERNEL_VERSION(5, 11, 0) <= LINUX_VERSION_CODE
+	// We allocated this in evdi_gem_alloc_object
+	kfree(obj->base.funcs);
+#endif
+
 }
 
 /*
diff -Naur evdi-1.7.2/module/evdi_modeset.c evdi-1.7.2.new/module/evdi_modeset.c
--- evdi-1.7.2/module/evdi_modeset.c	2020-12-12 12:01:33.000000000 +0100
+++ evdi-1.7.2.new/module/evdi_modeset.c	2021-02-16 16:08:04.141702469 +0100
@@ -56,7 +56,11 @@
 
 static void evdi_crtc_atomic_flush(
 	struct drm_crtc *crtc
+#if KERNEL_VERSION(5, 11, 0) > LINUX_VERSION_CODE
 	, __always_unused struct drm_crtc_state *old_state
+#else
+	, __always_unused struct drm_atomic_state *old_state
+#endif
 	)
 {
 	struct drm_crtc_state *state = crtc->state;
diff -Naur evdi-1.7.2/module/Makefile evdi-1.7.2.new/module/Makefile
--- evdi-1.7.2/module/Makefile	2020-12-12 12:01:33.000000000 +0100
+++ evdi-1.7.2.new/module/Makefile	2021-02-16 16:08:04.138702453 +0100
@@ -17,7 +17,7 @@
 
 KERN_DIR := /lib/modules/$(KERNELRELEASE)/build
 
-ccflags-y := -Iinclude/drm $(EL8FLAG)
+ccflags-y := -Iinclude/drm $(EL8FLAG) -DCONFIG_DRM_LEGACY
 evdi-y := evdi_drv.o evdi_modeset.o evdi_connector.o evdi_encoder.o evdi_main.o evdi_fb.o evdi_gem.o evdi_painter.o evdi_params.o evdi_cursor.o evdi_debug.o
 evdi-$(CONFIG_COMPAT) += evdi_ioc32.o
 obj-m := evdi.o
@@ -41,7 +41,7 @@
 # Note: this can be removed once it is in kernel tree and Kconfig is properly used
 CONFIG_DRM_EVDI := m
 LINUXINCLUDE := $(subst -I,-isystem,$(LINUXINCLUDE))
-ccflags-y := -isystem include/drm $(CFLAGS) $(EL8FLAG)
+ccflags-y := -isystem include/drm $(CFLAGS) $(EL8FLAG) -DCONFIG_DRM_LEGACY
 evdi-y := evdi_drv.o evdi_modeset.o evdi_connector.o evdi_encoder.o evdi_main.o evdi_fb.o evdi_gem.o evdi_painter.o evdi_params.o evdi_cursor.o evdi_debug.o
 evdi-$(CONFIG_COMPAT) += evdi_ioc32.o
 obj-$(CONFIG_DRM_EVDI) := evdi.o
