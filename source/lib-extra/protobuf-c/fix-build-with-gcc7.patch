diff -Naur protobuf-c-1.3.0/protoc-c/c_file.cc protobuf-c-1.3.0.new/protoc-c/c_file.cc
--- protobuf-c-1.3.0/protoc-c/c_file.cc	2017-08-05 23:41:36.000000000 +0200
+++ protobuf-c-1.3.0.new/protoc-c/c_file.cc	2018-06-25 15:33:49.810983454 +0200
@@ -245,7 +245,7 @@
   for (int i = 0; i < file_->dependency_count(); i++) {
     const FileDescriptor* dependency = file_->dependency(i);
     // Open the dependency's namespace.
-    vector<string> dependency_package_parts;
+    std::vector<string> dependency_package_parts;
     SplitStringUsing(dependency->package(), ".", &dependency_package_parts);
     // Declare its BuildDescriptors() function.
     printer->Print(
diff -Naur protobuf-c-1.3.0/protoc-c/c_file.h protobuf-c-1.3.0.new/protoc-c/c_file.h
--- protobuf-c-1.3.0/protoc-c/c_file.h	2017-08-05 23:41:36.000000000 +0200
+++ protobuf-c-1.3.0.new/protoc-c/c_file.h	2018-06-25 15:33:49.811983457 +0200
@@ -104,7 +104,7 @@
   scoped_array<scoped_ptr<ExtensionGenerator> > extension_generators_;
 
   // E.g. if the package is foo.bar, package_parts_ is {"foo", "bar"}.
-  vector<string> package_parts_;
+  std::vector<string> package_parts_;
 
   GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FileGenerator);
 };
diff -Naur protobuf-c-1.3.0/protoc-c/c_generator.cc protobuf-c-1.3.0.new/protoc-c/c_generator.cc
--- protobuf-c-1.3.0/protoc-c/c_generator.cc	2017-08-05 23:41:36.000000000 +0200
+++ protobuf-c-1.3.0.new/protoc-c/c_generator.cc	2018-06-25 15:33:49.811983457 +0200
@@ -76,17 +76,17 @@
 namespace compiler {
 namespace c {
 
-// Parses a set of comma-delimited name/value pairs, e.g.:
+// Parses a set of comma-delimited name/value std::pairs, e.g.:
 //   "foo=bar,baz,qux=corge"
-// parses to the pairs:
+// parses to the std::pairs:
 //   ("foo", "bar"), ("baz", ""), ("qux", "corge")
-void ParseOptions(const string& text, vector<pair<string, string> >* output) {
-  vector<string> parts;
+void ParseOptions(const string& text, std::vector<std::pair<string, string> >* output) {
+  std::vector<string> parts;
   SplitStringUsing(text, ",", &parts);
 
   for (unsigned i = 0; i < parts.size(); i++) {
     string::size_type equals_pos = parts[i].find_first_of('=');
-    pair<string, string> value;
+    std::pair<string, string> value;
     if (equals_pos == string::npos) {
       value.first = parts[i];
       value.second = "";
@@ -105,7 +105,7 @@
                             const string& parameter,
                             OutputDirectory* output_directory,
                             string* error) const {
-  vector<pair<string, string> > options;
+  std::vector<std::pair<string, string> > options;
   ParseOptions(parameter, &options);
 
   // -----------------------------------------------------------------
diff -Naur protobuf-c-1.3.0/protoc-c/c_helpers.cc protobuf-c-1.3.0.new/protoc-c/c_helpers.cc
--- protobuf-c-1.3.0/protoc-c/c_helpers.cc	2017-08-05 23:41:36.000000000 +0200
+++ protobuf-c-1.3.0.new/protoc-c/c_helpers.cc	2018-06-25 15:33:49.813983465 +0200
@@ -177,7 +177,7 @@
 }
 
 string FullNameToLower(const string &full_name) {
-  vector<string> pieces;
+  std::vector<string> pieces;
   SplitStringUsing(full_name, ".", &pieces);
   string rv = "";
   for (unsigned i = 0; i < pieces.size(); i++) {
@@ -188,7 +188,7 @@
   return rv;
 }
 string FullNameToUpper(const string &full_name) {
-  vector<string> pieces;
+  std::vector<string> pieces;
   SplitStringUsing(full_name, ".", &pieces);
   string rv = "";
   for (unsigned i = 0; i < pieces.size(); i++) {
@@ -199,7 +199,7 @@
   return rv;
 }
 string FullNameToC(const string &full_name) {
-  vector<string> pieces;
+  std::vector<string> pieces;
   SplitStringUsing(full_name, ".", &pieces);
   string rv = "";
   for (unsigned i = 0; i < pieces.size(); i++) {
@@ -214,7 +214,7 @@
 {
    if (!comment.empty())
    {
-      vector<string> comment_lines;
+      std::vector<string> comment_lines;
       SplitStringUsing (comment, "\r\n", &comment_lines);
       printer->Print ("/*\n");
       for (int i = 0; i < comment_lines.size(); i++)
@@ -503,8 +503,8 @@
 
 void SplitStringUsing(const string& full,
                       const char* delim,
-                      vector<string>* result) {
-  std::back_insert_iterator< vector<string> > it(*result);
+                      std::vector<string>* result) {
+  std::back_insert_iterator< std::vector<string> > it(*result);
   SplitStringToIteratorUsing(full, delim, it);
 }
 
