diff -Naur protobuf-c-1.4.1/configure.ac protobuf-c-1.4.1.new/configure.ac
--- protobuf-c-1.4.1/configure.ac	2022-07-11 03:33:59.000000000 +0200
+++ protobuf-c-1.4.1.new/configure.ac	2023-08-30 17:23:04.330083618 +0200
@@ -78,6 +78,14 @@
 
   AX_CXX_COMPILE_STDCXX(11, noext, mandatory)
 
+# now checking 4.22.x protobuf, if so, set cxx as 17
+  AS_IF([pkg-config --atleast-version 4.22.0 protobuf],[AX_CXX_COMPILE_STDCXX(17, noext, mandatory)])
+
+  AS_IF([pkg-config --atleast-version 4.22.0 protobuf],
+    [PKG_CHECK_MODULES([ABSL_LOG_INTERNAL_CHECK_OP], [absl_log_internal_check_op],
+       [PKG_CHECK_MODULES([ABSL_LOG_RAW_HASH_SET], [absl_raw_hash_set], [], [AC_MSG_ERROR([Missing absl_raw_hash_set library.])])],
+       [AC_MSG_ERROR([Missing absl_log_internal_check_op library.])])])
+
   PKG_CHECK_MODULES([protobuf], [protobuf >= 3.0.0],
     [proto3_supported=yes],
     [PKG_CHECK_MODULES([protobuf], [protobuf >= 2.6.0])]
diff -Naur protobuf-c-1.4.1/Makefile.am protobuf-c-1.4.1.new/Makefile.am
--- protobuf-c-1.4.1/Makefile.am	2022-07-11 03:33:59.000000000 +0200
+++ protobuf-c-1.4.1.new/Makefile.am	2023-08-30 17:23:04.327083593 +0200
@@ -20,7 +20,7 @@
 	-I${top_builddir} \
 	-I${top_srcdir}
 AM_CFLAGS = ${my_CFLAGS}
-AM_LDFLAGS =
+AM_LDFLAGS = ${ABSL_LOG_INTERNAL_CHECK_OP_LIBS} ${ABSL_LOG_RAW_HASH_SET_LIBS}
 
 # code coverage
 
diff -Naur protobuf-c-1.4.1/protoc-c/c_bytes_field.h protobuf-c-1.4.1.new/protoc-c/c_bytes_field.h
--- protobuf-c-1.4.1/protoc-c/c_bytes_field.h	2022-07-11 03:33:59.000000000 +0200
+++ protobuf-c-1.4.1.new/protoc-c/c_bytes_field.h	2023-08-30 17:23:04.327083593 +0200
@@ -88,7 +88,6 @@
  private:
   std::map<std::string, std::string> variables_;
 
-  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(BytesFieldGenerator);
 };
 
 
diff -Naur protobuf-c-1.4.1/protoc-c/c_enum_field.h protobuf-c-1.4.1.new/protoc-c/c_enum_field.h
--- protobuf-c-1.4.1/protoc-c/c_enum_field.h	2022-07-11 03:33:59.000000000 +0200
+++ protobuf-c-1.4.1.new/protoc-c/c_enum_field.h	2023-08-30 17:23:04.327083593 +0200
@@ -86,7 +86,6 @@
  private:
   std::map<std::string, std::string> variables_;
 
-  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EnumFieldGenerator);
 };
 
 
diff -Naur protobuf-c-1.4.1/protoc-c/c_enum.h protobuf-c-1.4.1.new/protoc-c/c_enum.h
--- protobuf-c-1.4.1/protoc-c/c_enum.h	2022-07-11 03:33:59.000000000 +0200
+++ protobuf-c-1.4.1.new/protoc-c/c_enum.h	2023-08-30 17:23:04.327083593 +0200
@@ -107,7 +107,6 @@
   const EnumDescriptor* descriptor_;
   std::string dllexport_decl_;
 
-  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EnumGenerator);
 };
 
 }  // namespace c
diff -Naur protobuf-c-1.4.1/protoc-c/c_extension.h protobuf-c-1.4.1.new/protoc-c/c_extension.h
--- protobuf-c-1.4.1/protoc-c/c_extension.h	2022-07-11 03:33:59.000000000 +0200
+++ protobuf-c-1.4.1.new/protoc-c/c_extension.h	2023-08-30 17:23:04.327083593 +0200
@@ -99,7 +99,6 @@
   std::string type_traits_;
   std::string dllexport_decl_;
 
-  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ExtensionGenerator);
 };
 
 }  // namespace c
diff -Naur protobuf-c-1.4.1/protoc-c/c_field.cc protobuf-c-1.4.1.new/protoc-c/c_field.cc
--- protobuf-c-1.4.1/protoc-c/c_field.cc	2022-07-11 03:33:59.000000000 +0200
+++ protobuf-c-1.4.1.new/protoc-c/c_field.cc	2023-08-30 17:23:04.328083601 +0200
@@ -231,7 +231,7 @@
 
 const FieldGenerator& FieldGeneratorMap::get(
     const FieldDescriptor* field) const {
-  GOOGLE_CHECK_EQ(field->containing_type(), descriptor_);
+  ABSL_CHECK_EQ(field->containing_type(), descriptor_);
   return *field_generators_[field->index()];
 }
 
diff -Naur protobuf-c-1.4.1/protoc-c/c_field.h protobuf-c-1.4.1.new/protoc-c/c_field.h
--- protobuf-c-1.4.1/protoc-c/c_field.h	2022-07-11 03:33:59.000000000 +0200
+++ protobuf-c-1.4.1.new/protoc-c/c_field.h	2023-08-30 17:23:04.328083601 +0200
@@ -104,8 +104,6 @@
                                             const std::string &descriptor_addr) const;
   const FieldDescriptor *descriptor_;
 
- private:
-  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FieldGenerator);
 };
 
 // Convenience class which constructs FieldGenerators for a Descriptor.
@@ -122,7 +120,6 @@
 
   static FieldGenerator* MakeGenerator(const FieldDescriptor* field);
 
-  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FieldGeneratorMap);
 };
 
 }  // namespace c
diff -Naur protobuf-c-1.4.1/protoc-c/c_file.cc protobuf-c-1.4.1.new/protoc-c/c_file.cc
--- protobuf-c-1.4.1/protoc-c/c_file.cc	2022-07-11 03:33:59.000000000 +0200
+++ protobuf-c-1.4.1.new/protoc-c/c_file.cc	2023-08-30 17:23:04.330083618 +0200
@@ -119,7 +119,7 @@
 
   int min_header_version = 1000000;
 #if defined(HAVE_PROTO3)
-  if (file_->syntax() == FileDescriptor::SYNTAX_PROTO3) {
+  if (FileDescriptorLegacy(file_).syntax() == FileDescriptorLegacy::SYNTAX_PROTO3) {
     min_header_version = 1003000;
   }
 #endif
diff -Naur protobuf-c-1.4.1/protoc-c/c_file.h protobuf-c-1.4.1.new/protoc-c/c_file.h
--- protobuf-c-1.4.1/protoc-c/c_file.h	2022-07-11 03:33:59.000000000 +0200
+++ protobuf-c-1.4.1.new/protoc-c/c_file.h	2023-08-30 17:23:04.328083601 +0200
@@ -104,7 +104,6 @@
   std::unique_ptr<std::unique_ptr<ServiceGenerator>[]> service_generators_;
   std::unique_ptr<std::unique_ptr<ExtensionGenerator>[]> extension_generators_;
 
-  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FileGenerator);
 };
 
 }  // namespace c
diff -Naur protobuf-c-1.4.1/protoc-c/c_generator.h protobuf-c-1.4.1.new/protoc-c/c_generator.h
--- protobuf-c-1.4.1/protoc-c/c_generator.h	2022-07-11 03:33:59.000000000 +0200
+++ protobuf-c-1.4.1.new/protoc-c/c_generator.h	2023-08-30 17:23:04.328083601 +0200
@@ -94,8 +94,6 @@
                 OutputDirectory* output_directory,
                 std::string* error) const;
 
- private:
-  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CGenerator);
 };
 
 }  // namespace c
diff -Naur protobuf-c-1.4.1/protoc-c/c_helpers.cc protobuf-c-1.4.1.new/protoc-c/c_helpers.cc
--- protobuf-c-1.4.1/protoc-c/c_helpers.cc	2022-07-11 03:33:59.000000000 +0200
+++ protobuf-c-1.4.1.new/protoc-c/c_helpers.cc	2023-08-30 17:23:04.328083601 +0200
@@ -286,7 +286,7 @@
 
 std::set<std::string> MakeKeywordsMap() {
   std::set<std::string> result;
-  for (int i = 0; i < GOOGLE_ARRAYSIZE(kKeywordList); i++) {
+  for (int i = 0; i < ABSL_ARRAYSIZE(kKeywordList); i++) {
     result.insert(kKeywordList[i]);
   }
   return result;
@@ -548,7 +548,7 @@
   std::unique_ptr<char[]> dest(new char[dest_length]);
   const int len = CEscapeInternal(src.data(), src.size(),
                                   dest.get(), dest_length, false);
-  GOOGLE_DCHECK_GE(len, 0);
+  ABSL_DCHECK_GE(len, 0);
   return std::string(dest.get(), len);
 }
 
diff -Naur protobuf-c-1.4.1/protoc-c/c_helpers.h protobuf-c-1.4.1.new/protoc-c/c_helpers.h
--- protobuf-c-1.4.1/protoc-c/c_helpers.h	2022-07-11 03:33:59.000000000 +0200
+++ protobuf-c-1.4.1.new/protoc-c/c_helpers.h	2023-08-30 17:23:04.331083626 +0200
@@ -67,6 +67,7 @@
 #include <vector>
 #include <sstream>
 #include <google/protobuf/descriptor.h>
+#include <google/protobuf/descriptor_legacy.h>
 #include <protobuf-c/protobuf-c.pb.h>
 #include <google/protobuf/io/printer.h>
 
@@ -172,7 +173,7 @@
 // This wrapper is needed to be able to compile against protobuf2.
 inline int FieldSyntax(const FieldDescriptor* field) {
 #ifdef HAVE_PROTO3
-  return field->file()->syntax() == FileDescriptor::SYNTAX_PROTO3 ? 3 : 2;
+  return FileDescriptorLegacy(field->file()).syntax() == FileDescriptorLegacy::SYNTAX_PROTO3 ? 3 : 2;
 #else
   return 2;
 #endif
diff -Naur protobuf-c-1.4.1/protoc-c/c_message.cc protobuf-c-1.4.1.new/protoc-c/c_message.cc
--- protobuf-c-1.4.1/protoc-c/c_message.cc	2022-07-11 03:33:59.000000000 +0200
+++ protobuf-c-1.4.1.new/protoc-c/c_message.cc	2023-08-30 17:23:04.329083609 +0200
@@ -499,7 +499,7 @@
 	  // NOTE: not supported by protobuf
 	  vars["maybe_static"] = "";
 	  vars["field_dv_ctype"] = "{ ... }";
-	  GOOGLE_LOG(DFATAL) << "Messages can't have default values!";
+	  ABSL_LOG(FATAL) << "Messages can't have default values!";
 	  break;
 	case FieldDescriptor::CPPTYPE_STRING:
 	  if (fd->type() == FieldDescriptor::TYPE_BYTES || opt.string_as_bytes())
@@ -521,7 +521,7 @@
 	    break;
 	  }
 	default:
-	  GOOGLE_LOG(DFATAL) << "Unknown CPPTYPE";
+	  ABSL_LOG(FATAL) << "Unknown CPPTYPE";
 	  break;
 	}
 	if (!already_defined)
diff -Naur protobuf-c-1.4.1/protoc-c/c_message_field.h protobuf-c-1.4.1.new/protoc-c/c_message_field.h
--- protobuf-c-1.4.1/protoc-c/c_message_field.h	2022-07-11 03:33:59.000000000 +0200
+++ protobuf-c-1.4.1.new/protoc-c/c_message_field.h	2023-08-30 17:23:04.329083609 +0200
@@ -83,9 +83,6 @@
   std::string GetDefaultValue(void) const;
   void GenerateStaticInit(io::Printer* printer) const;
 
- private:
-
-  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MessageFieldGenerator);
 };
 
 
diff -Naur protobuf-c-1.4.1/protoc-c/c_message.h protobuf-c-1.4.1.new/protoc-c/c_message.h
--- protobuf-c-1.4.1/protoc-c/c_message.h	2022-07-11 03:33:59.000000000 +0200
+++ protobuf-c-1.4.1.new/protoc-c/c_message.h	2023-08-30 17:23:04.329083609 +0200
@@ -137,7 +137,6 @@
   std::unique_ptr<std::unique_ptr<EnumGenerator>[]> enum_generators_;
   std::unique_ptr<std::unique_ptr<ExtensionGenerator>[]> extension_generators_;
 
-  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MessageGenerator);
 };
 
 }  // namespace c
diff -Naur protobuf-c-1.4.1/protoc-c/c_primitive_field.cc protobuf-c-1.4.1.new/protoc-c/c_primitive_field.cc
--- protobuf-c-1.4.1/protoc-c/c_primitive_field.cc	2022-07-11 03:33:59.000000000 +0200
+++ protobuf-c-1.4.1.new/protoc-c/c_primitive_field.cc	2023-08-30 17:23:04.329083609 +0200
@@ -99,7 +99,7 @@
     case FieldDescriptor::TYPE_STRING  :
     case FieldDescriptor::TYPE_BYTES   :
     case FieldDescriptor::TYPE_GROUP   :
-    case FieldDescriptor::TYPE_MESSAGE : GOOGLE_LOG(FATAL) << "not a primitive type"; break;
+    case FieldDescriptor::TYPE_MESSAGE : ABSL_LOG(FATAL) << "not a primitive type"; break;
 
     // No default because we want the compiler to complain if any new
     // types are added.
@@ -143,7 +143,7 @@
     case FieldDescriptor::CPPTYPE_BOOL:
       return descriptor_->default_value_bool() ? "1" : "0";
     default:
-      GOOGLE_LOG(DFATAL) << "unexpected CPPTYPE in c_primitive_field";
+      ABSL_LOG(FATAL) << "unexpected CPPTYPE in c_primitive_field";
       return "UNEXPECTED_CPPTYPE";
   }
 }
@@ -197,7 +197,7 @@
     case FieldDescriptor::TYPE_STRING  :
     case FieldDescriptor::TYPE_BYTES   :
     case FieldDescriptor::TYPE_GROUP   :
-    case FieldDescriptor::TYPE_MESSAGE : GOOGLE_LOG(FATAL) << "not a primitive type"; break;
+    case FieldDescriptor::TYPE_MESSAGE : ABSL_LOG(FATAL) << "not a primitive type"; break;
 
     // No default because we want the compiler to complain if any new
     // types are added.
diff -Naur protobuf-c-1.4.1/protoc-c/c_primitive_field.h protobuf-c-1.4.1.new/protoc-c/c_primitive_field.h
--- protobuf-c-1.4.1/protoc-c/c_primitive_field.h	2022-07-11 03:33:59.000000000 +0200
+++ protobuf-c-1.4.1.new/protoc-c/c_primitive_field.h	2023-08-30 17:23:04.329083609 +0200
@@ -83,9 +83,6 @@
   std::string GetDefaultValue(void) const;
   void GenerateStaticInit(io::Printer* printer) const;
 
- private:
-
-  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PrimitiveFieldGenerator);
 };
 
 }  // namespace c
diff -Naur protobuf-c-1.4.1/protoc-c/c_service.h protobuf-c-1.4.1.new/protoc-c/c_service.h
--- protobuf-c-1.4.1/protoc-c/c_service.h	2022-07-11 03:33:59.000000000 +0200
+++ protobuf-c-1.4.1.new/protoc-c/c_service.h	2023-08-30 17:23:04.329083609 +0200
@@ -101,7 +101,6 @@
   const ServiceDescriptor* descriptor_;
   std::map<std::string, std::string> vars_;
 
-  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ServiceGenerator);
 };
 
 }  // namespace c
diff -Naur protobuf-c-1.4.1/protoc-c/c_string_field.h protobuf-c-1.4.1.new/protoc-c/c_string_field.h
--- protobuf-c-1.4.1/protoc-c/c_string_field.h	2022-07-11 03:33:59.000000000 +0200
+++ protobuf-c-1.4.1.new/protoc-c/c_string_field.h	2023-08-30 17:23:04.330083618 +0200
@@ -88,7 +88,6 @@
  private:
   std::map<std::string, std::string> variables_;
 
-  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(StringFieldGenerator);
 };
 
 
