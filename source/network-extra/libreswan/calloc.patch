From 19eb4a08e400e05167aed2201222be4b1c18fd3a Mon Sep 17 00:00:00 2001
From: Daiki Ueno <dueno@redhat.com>
Date: Thu, 25 Apr 2024 14:13:01 +0900
Subject: [PATCH] libipsecconf: Use custom memory allocation functions
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The parser previously directly used bare calloc and free for
filenames. This switches to using alloc_things and pfree for better
tracking of memory allocation.

This also fixes the following compiler warning when building on Fedora
rawhide (Fedora 41):

  parser.lex: In function ‘glob_include’:
  parser.lex:198:44: error: ‘calloc’ sizes specified with ‘sizeof’ in the earlier argument and not in the later argument [-Werror=calloc-transposed-args]
    198 |         stacktop->fileglob = calloc(sizeof(char *), count + 1);
        |                                            ^~~~
  parser.lex:198:44: note: earlier argument should specify number of elements, later size of each element
  cc1: all warnings being treated as errors

Signed-off-by: Daiki Ueno <dueno@redhat.com>
Signed-off-by: Andrew Cagney <cagney@gnu.org>
---
 lib/libipsecconf/parser.lex | 24 +++++++++---------------
 1 file changed, 9 insertions(+), 15 deletions(-)

diff --git a/lib/libipsecconf/parser.lex b/lib/libipsecconf/parser.lex
index 2a0e0303d9a..9b0f984400f 100644
--- a/lib/libipsecconf/parser.lex
+++ b/lib/libipsecconf/parser.lex
@@ -46,6 +46,7 @@ YY_DECL;
 #include "ipsecconf/parserlast.h"
 #include "lswlog.h"
 #include "lswglob.h"
+#include "lswalloc.h"
 
 #define MAX_INCLUDE_DEPTH	10
 
@@ -92,27 +93,23 @@ void parser_y_init (const char *name, FILE *f)
 	ic_private.stack[0].line = 1;
 	ic_private.stack[0].once = true;
 	ic_private.stack[0].file = f;
-	ic_private.stack[0].filename = strdup(name);
+	ic_private.stack[0].filename = clone_str(name, "filename");
 	stacktop = &ic_private.stack[0];
 	ic_private.stack_ptr = 0;
 }
 
 static void parser_y_close(struct ic_inputsource *iis)
 {
-	if (iis->filename != NULL) {
-		free(iis->filename);
-		iis->filename = NULL;
-	}
+	pfreeany(iis->filename);
 	if (iis->file != NULL) {
 		fclose(iis->file);
 		iis->file = NULL;
 	}
 	if (iis->fileglob != NULL) {
 		for (char **p = iis->fileglob; *p; p++) {
-			free(*p);
+			pfree(*p);
 		}
-		free(iis->fileglob);
-		iis->fileglob = NULL;
+		pfreeany(iis->fileglob);
 	}
 }
 
@@ -137,14 +134,11 @@ static bool parser_y_nextglobfile(struct ic_inputsource *iis, struct logger *log
 		fclose(iis->file);
 		iis->file = NULL;
 	}
-	if (iis->filename != NULL) {
-		free(iis->filename);
-		iis->filename = NULL;
-	}
+	pfreeany(iis->filename);
 
 	iis->line = 1;
 	iis->once = true;
-	iis->filename = strdup(iis->fileglob[fcnt]);
+	iis->filename = clone_str(iis->fileglob[fcnt], "fileglob");
 
 	/* open the file */
 	FILE *f = fopen(iis->filename, "r");
@@ -195,9 +189,9 @@ static void glob_include(unsigned count, char **files,
 	stacktop->filename = NULL;
 	stacktop->fileglobcnt = 0;
 
-	stacktop->fileglob = calloc(sizeof(char *), count + 1);
+	stacktop->fileglob = alloc_things(char *, count + 1, "globs");
 	for (unsigned i = 0; i < count; i++) {
-		stacktop->fileglob[i] = strdup(files[i]);
+		stacktop->fileglob[i] = clone_str(files[i], "glob");
 	}
 	stacktop->fileglob[count] = NULL;
 
