https://chromium.googlesource.com/chromium/src/+/b74d5e6b91ccdf8b2518ef733d75c04823979d18
[PA] Use std::nullptr_t instead of nullptr_t

nullptr_t is not part of C until C23, while std::nullptr_t is part of
C++11. Meanwhile, the GN cflags_c value is set to C11.

Bug: 957519,pdfium:2097
Change-Id: Ib3db790ed1368e8f335c95561fe906780add745c
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5014522
Reviewed-by: Benoit Lize <lizeb@chromium.org>
Commit-Queue: Lei Zhang <thestig@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1223002}

diff --git a/base/allocator/partition_allocator/src/partition_alloc/partition_alloc_base/strings/safe_sprintf.h b/base/allocator/partition_allocator/src/partition_alloc/partition_alloc_base/strings/safe_sprintf.h
index a2f62ac..2d62f65e 100644
--- a/base/allocator/partition_allocator/src/partition_alloc/partition_alloc_base/strings/safe_sprintf.h
+++ b/base/allocator/partition_allocator/src/partition_alloc/partition_alloc_base/strings/safe_sprintf.h

@@ -5,10 +5,11 @@
 #ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_SRC_PARTITION_ALLOC_PARTITION_ALLOC_BASE_STRINGS_SAFE_SPRINTF_H_
 #define BASE_ALLOCATOR_PARTITION_ALLOCATOR_SRC_PARTITION_ALLOC_PARTITION_ALLOC_BASE_STRINGS_SAFE_SPRINTF_H_
 
-#include <stddef.h>
 #include <stdint.h>
 #include <stdlib.h>
 
+#include <cstddef>
+
 #include "build/build_config.h"
 
 #if BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)
@@ -178,18 +179,20 @@
     integer.width = sizeof(long long);
   }
 
-  // nullptr_t would be ambiguous between char* and const char*; to get
+  // std::nullptr_t would be ambiguous between char* and const char*; to get
   // consistent behavior with NULL, which prints with all three of %d, %p, and
   // %s, treat it as an integer zero internally.
   //
   // Warning: don't just do Arg(NULL) here because in some libcs, NULL is an
-  // alias for nullptr!
-  Arg(nullptr_t p) : type(INT) {
+  // alias for std::nullptr!
+  //
+  // NOLINTNEXTLINE(runtime/explicit)
+  Arg(std::nullptr_t p) : type(INT) {
     integer.i = 0;
     // Internally, SafeSprintf expects to represent nulls as integers whose
     // width is equal to sizeof(NULL), which is not necessarily equal to
-    // sizeof(nullptr_t) - eg, on Windows, NULL is defined to 0 (with size 4)
-    // while nullptr_t is of size 8.
+    // sizeof(std::nullptr_t) - eg, on Windows, NULL is defined to 0 (with size
+    // 4) while std::nullptr_t is of size 8.
     integer.width = sizeof(NULL);
   }
