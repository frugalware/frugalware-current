diff -up chromium-81.0.4044.92/gpu/config/gpu_finch_features.cc.omv~ chromium-81.0.4044.92/gpu/config/gpu_finch_features.cc
--- chromium-81.0.4044.92/gpu/config/gpu_finch_features.cc.omv~	2020-04-14 21:45:54.420225847 +0200
+++ chromium-81.0.4044.92/gpu/config/gpu_finch_features.cc	2020-04-14 21:51:07.452169158 +0200
@@ -25,9 +25,10 @@ const base::Feature kDisableSurfaceContr
 // Enable GPU Rasterization by default. This can still be overridden by
 // --force-gpu-rasterization or --disable-gpu-rasterization.
 #if defined(OS_MACOSX) || defined(OS_WIN) || defined(OS_CHROMEOS) || \
-    defined(OS_ANDROID) || defined(OS_FUCHSIA)
+    defined(OS_ANDROID) || defined(OS_FUCHSIA) || defined(OS_LINUX)
 // DefaultEnableGpuRasterization has launched on Mac, Windows, ChromeOS, and
-// Android.
+// Android. And of course it works on Linux too, just because Google hates Linux
+// doesn't mean we have to.
 const base::Feature kDefaultEnableGpuRasterization{
     "DefaultEnableGpuRasterization", base::FEATURE_ENABLED_BY_DEFAULT};
 #else
@@ -37,7 +38,7 @@ const base::Feature kDefaultEnableGpuRas
 
 // Enable out of process rasterization by default.  This can still be overridden
 // by --enable-oop-rasterization or --disable-oop-rasterization.
-#if defined(OS_ANDROID) || defined(OS_CHROMEOS) || defined(OS_MACOSX)
+#if defined(OS_ANDROID) || defined(OS_CHROMEOS) || defined(OS_MACOSX) || defined(OS_LINUX)
 const base::Feature kDefaultEnableOopRasterization{
     "DefaultEnableOopRasterization", base::FEATURE_ENABLED_BY_DEFAULT};
 #else
@@ -58,7 +59,7 @@ const base::Feature kGpuProcessHighPrior
 #endif
 
 // Use ThreadPriority::DISPLAY for GPU main, viz compositor and IO threads.
-#if defined(OS_ANDROID) || defined(OS_CHROMEOS) || defined(OS_WIN)
+#if defined(OS_ANDROID) || defined(OS_CHROMEOS) || defined(OS_WIN) || defined(OS_LINUX)
 const base::Feature kGpuUseDisplayThreadPriority{
     "GpuUseDisplayThreadPriority", base::FEATURE_ENABLED_BY_DEFAULT};
 #else
