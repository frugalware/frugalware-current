diff -up chromium-81.0.4044.92/media/gpu/vaapi/vaapi_video_decode_accelerator.cc.28~ chromium-81.0.4044.92/media/gpu/vaapi/vaapi_video_decode_accelerator.cc
--- chromium-81.0.4044.92/media/gpu/vaapi/vaapi_video_decode_accelerator.cc.28~	2020-04-03 06:11:34.000000000 +0200
+++ chromium-81.0.4044.92/media/gpu/vaapi/vaapi_video_decode_accelerator.cc	2020-04-14 16:27:40.623165963 +0200
@@ -712,6 +712,7 @@ void VaapiVideoDecodeAccelerator::Assign
   // |vpp_vaapi_wrapper_| for VaapiPicture to DownloadFromSurface() the VA's
   // internal decoded frame.
   if (buffer_allocation_mode_ != BufferAllocationMode::kNone &&
+      buffer_allocation_mode_ != BufferAllocationMode::kWrapVdpau &&
       !vpp_vaapi_wrapper_) {
     vpp_vaapi_wrapper_ = VaapiWrapper::Create(
         VaapiWrapper::kVideoProcess, VAProfileNone,
@@ -743,7 +744,8 @@ void VaapiVideoDecodeAccelerator::Assign
             : gfx::Size();
 
     std::unique_ptr<VaapiPicture> picture = vaapi_picture_factory_->Create(
-        (buffer_allocation_mode_ == BufferAllocationMode::kNone)
+        ((buffer_allocation_mode_ == BufferAllocationMode::kNone) ||
+	 (buffer_allocation_mode_ == BufferAllocationMode::kWrapVdpau))
             ? vaapi_wrapper_
             : vpp_vaapi_wrapper_,
         make_context_current_cb_, bind_image_cb_, buffer, size_to_bind);
@@ -1199,6 +1201,12 @@ VaapiVideoDecodeAccelerator::GetSupporte
 
 VaapiVideoDecodeAccelerator::BufferAllocationMode
 VaapiVideoDecodeAccelerator::DecideBufferAllocationMode() {
+  // NVIDIA blobs use VDPAU
+  if (VaapiWrapper::GetImplementationType() == VAImplementation::kNVIDIAVDPAU) {
+    LOG(INFO) << "VA-API driver on VDPAU backend";
+    return BufferAllocationMode::kWrapVdpau;
+  }
+
   // TODO(crbug.com/912295): Enable a better BufferAllocationMode for IMPORT
   // |output_mode_| as well.
   if (output_mode_ == VideoDecodeAccelerator::Config::OutputMode::IMPORT)
@@ -1211,7 +1219,7 @@ VaapiVideoDecodeAccelerator::DecideBuffe
   // depends on the bitstream and sometimes it's not enough to cover the amount
   // of frames needed by the client pipeline (see b/133733739).
   // TODO(crbug.com/911754): Enable for VP9 Profile 2.
-  if (IsGeminiLakeOrLater() &&
+  if (false && IsGeminiLakeOrLater() &&
       (profile_ == VP9PROFILE_PROFILE0 || profile_ == VP8PROFILE_ANY)) {
     // Add one to the reference frames for the one being currently egressed, and
     // an extra allocation for both |client_| and |decoder_|, see
diff -up chromium-81.0.4044.92/media/gpu/vaapi/vaapi_video_decode_accelerator.h.28~ chromium-81.0.4044.92/media/gpu/vaapi/vaapi_video_decode_accelerator.h
--- chromium-81.0.4044.92/media/gpu/vaapi/vaapi_video_decode_accelerator.h.28~	2020-04-03 06:11:34.000000000 +0200
+++ chromium-81.0.4044.92/media/gpu/vaapi/vaapi_video_decode_accelerator.h	2020-04-14 16:24:00.916251409 +0200
@@ -208,6 +208,7 @@ class MEDIA_GPU_EXPORT VaapiVideoDecodeA
     // Using |client_|s provided PictureBuffers and as many internally
     // allocated.
     kNormal,
+    kWrapVdpau,
   };
 
   // Decides the concrete buffer allocation mode, depending on the hardware
diff -up chromium-81.0.4044.92/media/gpu/vaapi/vaapi_wrapper.cc.28~ chromium-81.0.4044.92/media/gpu/vaapi/vaapi_wrapper.cc
--- chromium-81.0.4044.92/media/gpu/vaapi/vaapi_wrapper.cc.28~	2020-04-03 06:11:34.000000000 +0200
+++ chromium-81.0.4044.92/media/gpu/vaapi/vaapi_wrapper.cc	2020-04-14 16:24:00.916251409 +0200
@@ -133,6 +133,9 @@ media::VAImplementation VendorStringToIm
   } else if (base::StartsWith(va_vendor_string, "Intel iHD driver",
                               base::CompareCase::SENSITIVE)) {
     return media::VAImplementation::kIntelIHD;
+  } else if (base::StartsWith(va_vendor_string, "Splitted-Desktop Systems VDPAU",
+                              base::CompareCase::SENSITIVE)) {
+    return media::VAImplementation::kNVIDIAVDPAU;
   }
   return media::VAImplementation::kOther;
 }
diff -up chromium-81.0.4044.92/media/gpu/vaapi/vaapi_wrapper.h.28~ chromium-81.0.4044.92/media/gpu/vaapi/vaapi_wrapper.h
--- chromium-81.0.4044.92/media/gpu/vaapi/vaapi_wrapper.h.28~	2020-04-03 06:11:34.000000000 +0200
+++ chromium-81.0.4044.92/media/gpu/vaapi/vaapi_wrapper.h	2020-04-14 16:24:00.916251409 +0200
@@ -80,6 +80,7 @@ enum class VAImplementation {
   kIntelIHD,
   kOther,
   kInvalid,
+  kNVIDIAVDPAU,
 };
 
 // This class handles VA-API calls and ensures proper locking of VA-API calls
