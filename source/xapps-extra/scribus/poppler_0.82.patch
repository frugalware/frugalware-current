diff -Naur scribus-1.5.5/scribus/plugins/import/pdf/importpdfconfig.h scribus-1.5.5.new/scribus/plugins/import/pdf/importpdfconfig.h
--- scribus-1.5.5/scribus/plugins/import/pdf/importpdfconfig.h	2019-07-31 00:34:51.000000000 +0200
+++ scribus-1.5.5.new/scribus/plugins/import/pdf/importpdfconfig.h	2019-11-03 23:37:34.372173811 +0100
@@ -52,4 +52,10 @@
 #define POPPLER_REF
 #endif
 
+#if POPPLER_ENCODED_VERSION >= POPPLER_VERSION_ENCODE(0, 82, 0)
+#define POPPLER_CONST_082 const
+#else
+#define POPPLER_CONST_082
+#endif
+
 #endif
diff -Naur scribus-1.5.5/scribus/plugins/import/pdf/slaoutput.cpp scribus-1.5.5.new/scribus/plugins/import/pdf/slaoutput.cpp
--- scribus-1.5.5/scribus/plugins/import/pdf/slaoutput.cpp	2019-07-31 00:34:51.000000000 +0200
+++ scribus-1.5.5.new/scribus/plugins/import/pdf/slaoutput.cpp	2019-11-03 23:37:34.373173818 +0100
@@ -1606,7 +1606,7 @@
 			ite->PoLine = out.copy();
 			ite->ClipEdited = true;
 			ite->FrameType = 3;
-			ite->setWidthHeight(wh.x(),wh.y());
+			ite->setWidthHeight(wh.x(), wh.y());
 			m_doc->adjustItemSize(ite);
 			if (m_Elements->count() != 0)
 			{
@@ -2471,7 +2471,7 @@
 				out.translate(-ite->xPos(), -ite->yPos());
 				ite->PoLine = out.copy();
 				FPoint wh = getMaxClipF(&ite->PoLine);
-				ite->setWidthHeight(wh.x(),wh.y());
+				ite->setWidthHeight(wh.x(), wh.y());
 				ite->setTextFlowMode(PageItem::TextFlowDisabled);
 				ite->ScaleType   = true;
 				m_doc->adjustItemSize(ite);
@@ -2613,7 +2613,7 @@
 				out.translate(-ite->xPos(), -ite->yPos());
 				ite->PoLine = out.copy();
 				FPoint wh = getMaxClipF(&ite->PoLine);
-				ite->setWidthHeight(wh.x(),wh.y());
+				ite->setWidthHeight(wh.x(), wh.y());
 				ite->setTextFlowMode(PageItem::TextFlowDisabled);
 				ite->ScaleType   = true;
 				m_doc->adjustItemSize(ite);
@@ -2762,7 +2762,7 @@
 				out.translate(-ite->xPos(), -ite->yPos());
 				ite->PoLine = out.copy();
 				FPoint wh = getMaxClipF(&ite->PoLine);
-				ite->setWidthHeight(wh.x(),wh.y());
+				ite->setWidthHeight(wh.x(), wh.y());
 				ite->setTextFlowMode(PageItem::TextFlowDisabled);
 				ite->ScaleType   = true;
 				m_doc->adjustItemSize(ite);
@@ -2784,7 +2784,7 @@
 	delete[] mbuffer;
 }
 
-void SlaOutputDev::drawImage(GfxState *state, Object *ref, Stream *str, int width, int height, GfxImageColorMap *colorMap, GBool interpolate, int *maskColors, GBool inlineImg)
+void SlaOutputDev::drawImage(GfxState *state, Object *ref, Stream *str, int width, int height, GfxImageColorMap *colorMap, GBool interpolate, POPPLER_CONST_082 int* maskColors, GBool inlineImg)
 {
 	ImageStream * imgStr = new ImageStream(str, width, colorMap->getNumPixelComps(), colorMap->getBits());
 //	qDebug() << "Image Components" << colorMap->getNumPixelComps() << "Mask" << maskColors;
@@ -3365,7 +3365,7 @@
 		fontsrc->unref();
 }
 
-void SlaOutputDev::drawChar(GfxState *state, double x, double y, double dx, double dy, double originX, double originY, CharCode code, int nBytes, Unicode *u, int uLen)
+void SlaOutputDev::drawChar(GfxState *state, double x, double y, double dx, double dy, double originX, double originY, CharCode code, int nBytes, POPPLER_CONST_082 Unicode *u, int uLen)
 {
 	double x1, y1, x2, y2;
 	int render;
@@ -3452,7 +3452,7 @@
 	}
 }
 
-GBool SlaOutputDev::beginType3Char(GfxState *state, double x, double y, double dx, double dy, CharCode code, Unicode *u, int uLen)
+GBool SlaOutputDev::beginType3Char(GfxState *state, double x, double y, double dx, double dy, CharCode code, POPPLER_CONST_082 Unicode *u, int uLen)
 {
 //	qDebug() << "beginType3Char";
 	GfxFont *gfxFont;
diff -Naur scribus-1.5.5/scribus/plugins/import/pdf/slaoutput.h scribus-1.5.5.new/scribus/plugins/import/pdf/slaoutput.h
--- scribus-1.5.5/scribus/plugins/import/pdf/slaoutput.h	2019-07-31 00:34:51.000000000 +0200
+++ scribus-1.5.5.new/scribus/plugins/import/pdf/slaoutput.h	2019-11-03 23:37:34.373173818 +0100
@@ -229,7 +229,7 @@
 
 	//----- image drawing
 	void drawImageMask(GfxState *state, Object *ref, Stream *str, int width, int height, GBool invert, GBool interpolate, GBool inlineImg) override;
-	void drawImage(GfxState *state, Object *ref, Stream *str, int width, int height, GfxImageColorMap *colorMap, GBool interpolate, int *maskColors, GBool inlineImg) override;
+	void drawImage(GfxState *state, Object *ref, Stream *str, int width, int height, GfxImageColorMap *colorMap, GBool interpolate, POPPLER_CONST_082 int *maskColors, GBool inlineImg) override;
 	void drawSoftMaskedImage(GfxState *state, Object *ref, Stream *str,
 				   int width, int height,
 				   GfxImageColorMap *colorMap,
@@ -261,8 +261,8 @@
 	//----- text drawing
 	void  beginTextObject(GfxState *state) override;
 	void  endTextObject(GfxState *state) override;
-	void  drawChar(GfxState *state, double /*x*/, double /*y*/, double /*dx*/, double /*dy*/, double /*originX*/, double /*originY*/, CharCode /*code*/, int /*nBytes*/, Unicode * /*u*/, int /*uLen*/) override;
-	GBool beginType3Char(GfxState * /*state*/, double /*x*/, double /*y*/, double /*dx*/, double /*dy*/, CharCode /*code*/, Unicode * /*u*/, int /*uLen*/) override;
+	void  drawChar(GfxState *state, double /*x*/, double /*y*/, double /*dx*/, double /*dy*/, double /*originX*/, double /*originY*/, CharCode /*code*/, int /*nBytes*/, POPPLER_CONST_082 Unicode * /*u*/, int /*uLen*/) override;
+	GBool beginType3Char(GfxState * /*state*/, double /*x*/, double /*y*/, double /*dx*/, double /*dy*/, CharCode /*code*/, POPPLER_CONST_082 Unicode * /*u*/, int /*uLen*/) override;
 	void  endType3Char(GfxState * /*state*/) override;
 	void  type3D0(GfxState * /*state*/, double /*wx*/, double /*wy*/) override;
 	void  type3D1(GfxState * /*state*/, double /*wx*/, double /*wy*/, double /*llx*/, double /*lly*/, double /*urx*/, double /*ury*/) override;
