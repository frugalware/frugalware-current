--- a/src/VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c
+++ b/src/VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c
@@ -2310,8 +2310,13 @@
             {
                 vboxNetFltDumpPacket(pSG, true, "host", (fDst & INTNETTRUNKDIR_WIRE) ? 0 : 1);
                 Log6(("vboxNetFltPortOsXmit: pBuf->cb dump:\n%.*Rhxd\n", sizeof(pBuf->cb), pBuf->cb));
+# if RTLNX_VER_MAX(5, 18, 0)
                 Log6(("vboxNetFltPortOsXmit: netif_rx_ni(%p)\n", pBuf));
                 err = netif_rx_ni(pBuf);
+#else
+                Log6(("vboxNetFltPortOsXmit: netif_rx(%p)\n", pBuf));
+                err = netif_rx(pBuf);
+#endif
                 if (err)
                     rc = RTErrConvertFromErrno(err);
             }
--- a/src/VBox/Additions/linux/sharedfolders/regops.c
+++ b/src/VBox/Additions/linux/sharedfolders/regops.c
@@ -3824,5 +3824,7 @@
     .writepage      = vbsf_writepage,
     /** @todo Need .writepages if we want msync performance...  */
-#if RTLNX_VER_MIN(2,5,12)
+#if RTLNX_VER_MIN(5,18,0)
+    .dirty_folio = filemap_dirty_folio,
+#elif RTLNX_VER_MIN(2,5,12)
     .set_page_dirty = __set_page_dirty_buffers,
 #endif
--- a/src/VBox/HostDrivers/Support/SUPDrv.cpp
+++ b/src/VBox/HostDrivers/Support/SUPDrv.cpp
@@ -1752,5 +1752,13 @@
             /* execute */
             pReq->u.Out.cFunctions = RT_ELEMENTS(g_aFunctions);
+
+            /* In 5.18.0, memcpy became a wrapper which does fortify checks
+             * before triggering __underlying_memcpy() call. We do not pass these checks here,
+             * so bypass them for now.  */
+#if RTLNX_VER_MIN(5,18,0)
+            __underlying_memcpy(&pReq->u.Out.aFunctions[0], g_aFunctions, sizeof(g_aFunctions));
+#else
             memcpy(&pReq->u.Out.aFunctions[0], g_aFunctions, sizeof(g_aFunctions));
+#endif
             pReq->Hdr.rc = VINF_SUCCESS;
             return 0;

