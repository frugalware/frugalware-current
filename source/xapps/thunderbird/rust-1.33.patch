diff -up thunderbird-60.5.3/servo/components/style/gecko/regen_atoms.py.rust-1.33-build thunderbird-60.5.3/servo/components/style/gecko/regen_atoms.py
--- thunderbird-60.5.3/servo/components/style/gecko/regen_atoms.py.rust-1.33-build	2019-03-04 19:17:31.000000000 +0100
+++ thunderbird-60.5.3/servo/components/style/gecko/regen_atoms.py	2019-03-13 15:05:58.965726109 +0100
@@ -202,6 +202,7 @@ RULE_TEMPLATE = ('("{atom}") =>\n  '
                  ' }}}};')
 
 MACRO = '''
+/// Returns a static atom by passing the literal string it represents.
 #[macro_export]
 macro_rules! atom {{
 {}
diff -up thunderbird-60.5.3/servo/components/style/gecko_string_cache/namespace.rs.rust-1.33-build thunderbird-60.5.3/servo/components/style/gecko_string_cache/namespace.rs
--- thunderbird-60.5.3/servo/components/style/gecko_string_cache/namespace.rs.rust-1.33-build	2019-03-04 19:17:27.000000000 +0100
+++ thunderbird-60.5.3/servo/components/style/gecko_string_cache/namespace.rs	2019-03-13 15:05:58.966726107 +0100
@@ -11,6 +11,7 @@ use std::fmt;
 use std::ops::Deref;
 use string_cache::{Atom, WeakAtom};
 
+/// Macro text
 #[macro_export]
 macro_rules! ns {
     () => { $crate::string_cache::Namespace(atom!("")) };
diff -up thunderbird-60.5.3/servo/components/style/properties/properties.mako.rs.rust-1.33-build thunderbird-60.5.3/servo/components/style/properties/properties.mako.rs
--- thunderbird-60.5.3/servo/components/style/properties/properties.mako.rs.rust-1.33-build	2019-03-04 19:17:30.000000000 +0100
+++ thunderbird-60.5.3/servo/components/style/properties/properties.mako.rs	2019-03-13 15:05:58.966726107 +0100
@@ -55,6 +55,7 @@ use style_adjuster::StyleAdjuster;
 
 pub use self::declaration_block::*;
 
+/// Generated
 #[cfg(feature = "gecko")]
 #[macro_export]
 macro_rules! property_name {
@@ -3852,7 +3853,7 @@ impl fmt::Debug for AliasId {
     }
 }
 
-// NOTE(emilio): Callers are responsible to deal with prefs.
+/// Callers are responsible to deal with prefs.
 #[macro_export]
 macro_rules! css_properties_accessors {
     ($macro_name: ident) => {
@@ -3875,6 +3876,7 @@ macro_rules! css_properties_accessors {
     }
 }
 
+/// Neco
 #[macro_export]
 macro_rules! longhand_properties_idents {
     ($macro_name: ident) => {
diff -up thunderbird-60.5.3/servo/components/style_traits/values.rs.rust-1.33-build thunderbird-60.5.3/servo/components/style_traits/values.rs
--- thunderbird-60.5.3/servo/components/style_traits/values.rs.rust-1.33-build	2019-03-04 19:17:27.000000000 +0100
+++ thunderbird-60.5.3/servo/components/style_traits/values.rs	2019-03-13 15:37:34.077560034 +0100
@@ -135,6 +135,7 @@ where
     }
 }
 
+/// Neco
 #[macro_export]
 macro_rules! serialize_function {
     ($dest: expr, $name: ident($( $arg: expr, )+)) => {
@@ -404,7 +405,7 @@ impl_to_css_for_predefined_type!(::csspa
 impl_to_css_for_predefined_type!(::cssparser::Color);
 impl_to_css_for_predefined_type!(::cssparser::UnicodeRange);
 
-#[macro_export]
+/// Define an enum type with unit variants that each correspond to a CSS keyword.
 macro_rules! define_css_keyword_enum {
     (pub enum $name:ident { $($variant:ident = $css:expr,)+ }) => {
         #[allow(missing_docs)]
