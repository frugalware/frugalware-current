# Compiling Time: 0.01 SBU
# Maintainer: DeX77 <dex77@frugalware.org>

_chromiumver=66.0.3359.181
_nodever=10.2.0
pkgname=electron
pkgver=3.1.2
pkgrel=1
pkgdesc='Build cross platform desktop apps with web technologies'
archs=('x86_64')
groups=('xlib-extra')
url='https://electronjs.org/'
license=('MIT' 'custom')
depends=('gtk+3' 'libxscrnsaver' 'nss' 'ffmpeg>=4.1' 'libxslt' 'snappy' 'libatomic' 'c-ares')
makedepends=('clang' 'git' 'gperf' 'jsoncpp' 'libnotify' 'llvm' 'ninja' 'nodejs' \
	'pciutils' 'python' 'wget' 'yasm' 'libatomic' 'libwebp' 'libevent' \
	'ca-certificates' 'cups' 'x11-protos' 'libxscrnsaver' 'libkrb5' \
	'gn' 'mesa-dri-drivers')
_F_github_tag_v=yes
_F_github_up2date_path="releases/latest"
_F_scm_type=git
_F_scm_url="https://github.com/electron/electron.git"
_F_scm_tag="v${pkgver}"
_F_scm_git_cloneopts=" --recurse-submodules"
Finclude scm github
source=(https://s3.amazonaws.com/github-janky-artifacts/libchromiumcontent/linux/src/${_chromiumver}/src.tar.bz2
	'breakpad-glibc2.26.patch'
        'electron.desktop'
        'default_app-icon.patch'
        'dont-bootstrap-libchromiumcontent.patch'
        'dont-update-submodules.patch'
        'dont-use-sysroot.patch'
        'no-whole-archive.patch'
        'use-system-ffmpeg.patch'
        'gyp-no-rpath.patch'
        'libchromiumcontent-fix-v8-patches.patch'
        'libchromiumcontent-settings.patch'
        'libchromiumcontent-sort-filenames.patch'
        'libchromiumcontent-static-library-only.patch'
        'libchromiumcontent-use-system-tools.patch'
        'chromium-use-system-ffmpeg.patch'
	'libchromiumcontent-remove-useless-patches.patch'
	'no-clang-plugins.patch'
	'allow-root-build.patch')
sha1sums=('b791dfecd5580e081d3f242a077b4b6dde695605' \
          '8ee22299a37328173d005225399be00f4bd1417b' \
          '10b2dd0747bd1fc1c6a8f988d589e7fee8b6a9a0' \
          'e4a588f31481454875ef28f53915d8150ac79af1' \
          '148b0b165fa7e48ce9b79568db3fbacb1b207d29' \
          'cf263a966ae47a05f49cbfb6f7bdfba6ad1abefb' \
          '57199b9b05a25f1ea6daf3199de7e8e3a0d05eac' \
          'c3ac460c9feb7b9ce053c2d253b6105dcff93169' \
          'fc91c965b3d6324432c05cca14e7d722f18877b2' \
          '8b4a08611372098f77ba58beda9a72bcdc5ad995' \
          'c864c340253619470e4cf9f0a36e13dd56a2828f' \
          'c20824193d33cffe62cfdd8830cd881e02f6873f' \
          '012eb26310dc07dcd3404b851cbeaa64c455d6c2' \
          '14a57007f32060995ec21a01beb57ca1028da2da' \
          'eb662f7398a42258e4bf40c949fa0cac805e4303' \
          '5a14ebf0db2dae202ffe7eeb4e8cb7e6762c9c5b' \
          '0bff03be4da9b2d4af3826a1ba3706f08bbbeb01' \
          '72dcd06efb092e78a4825eb9b84ba81001bb2682' \
          '69f402d716d85f076a66cb8ed000e6c05e73796e')

_system_libs=( 'flac'
                'libdrm'
                'libjpeg'
                'libxslt'
                'snappy'
                'yasm'
                'libxml'
                'zlib')

build() {
	export LC_ALL=en_US.UTF-8
	Funpack_scm

	Fcd
	Fpatch default_app-icon.patch  # Icon from .desktop file
	Fpatch use-system-ffmpeg.patch
	Fpatch dont-update-submodules.patch
	Fpatch dont-use-sysroot.patch
	Fpatch dont-bootstrap-libchromiumcontent.patch
	Fpatch no-whole-archive.patch
	Fpatch no-clang-plugins.patch

	# Add extra libraries for unbundling, remove unneeded libraries
	sed -e "s/'-lexpat',/'-lexpat', '<\!@(pkg-config --libs-only-l libavcodec libavformat libavutil libevent flac harfbuzz-icu libjpeg jsoncpp minizip libpulse snappy libwebpdemux libwebpmux libxml-2.0 libxslt zlib)', '-latomic',/" \
		-e 's/ gconf-2.0//' \
		-i brightray/brightray.gyp


	Fexec cd "${Fsrcdir}"/electron/vendor/
	Fexec rm -rf breakpad
	Fexec git clone https://github.com/electron/chromium-breakpad.git --depth=1 breakpad || Fdie
	Fexec cd "${Fsrcdir}"/electron/vendor/breakpad || Fdie
	Fpatch breakpad-glibc2.26.patch
	Fexec rm -rf src
	Fexec git clone https://chromium.googlesource.com/breakpad/breakpad/src --depth=1 || Fdie

	Fexec cd "${Fsrcdir}"/electron/vendor/
	Fexec rm -rf gyp
	Fexec git clone https://github.com/electron/gyp.git --depth=1 || Fdie
	Fexec cd gyp
	# Remove a useless $ORIGIN/lib/ rpath from the electron binary
	Fpatch gyp-no-rpath.patch

	Fexec cd "${Fsrcdir}"/electron/vendor/ || Fdie
	Fexec rm -rf libchromiumcontent || Fdie
	Fexec git clone https://github.com/electron/libchromiumcontent.git --branch "$pkgname-$pkgver"|| Fdie
	Fexec cd libchromiumcontent || Fdie

	Fpatch libchromiumcontent-remove-useless-patches.patch
	Fpatch libchromiumcontent-settings.patch
	Fpatch libchromiumcontent-sort-filenames.patch  # deterministic build
	Fpatch libchromiumcontent-use-system-tools.patch
	Fpatch libchromiumcontent-static-library-only.patch

	Fexec cd vendor || Fdie
	Fexec rm -rf pyyaml
	Fexec git clone https://github.com/yaml/pyyaml.git --depth=1 || Fdie
	Fexec cd .. || Fdie

	Fexec mv "${Fsrcdir}"/src . || Fdie

	Fexec rm -r patches/common/ffmpeg || Fdie
	Fexec cd "${Fsrcdir}"/electron/vendor/ || Fdie
        Fexec rm -rf node || Fdie
        Fexec git clone https://github.com/electron/node.git --branch electron-node-v${_nodever}|| Fdie

	Fexec cd "${Fsrcdir}"/electron/vendor/ || Fdie
        Fexec rm -rf pdf_viewer || Fdie
        Fexec git clone https://github.com/electron/pdf-viewer.git pdf_viewer --depth=1 || Fdie

	Fexec cd "${Fsrcdir}"/electron/vendor/pdf_viewer/vendor || Fdie
	Fexec rm -rf grit || Fdie
	Fexec git clone https://chromium.googlesource.com/chromium/src/tools/grit.git --depth=1 || Fdie


	Fexec cd "${Fsrcdir}"/electron/vendor/libchromiumcontent/src || Fdie
	Fpatch chromium-use-system-ffmpeg.patch

	for lib in "${_system_libs[@]}" libjpeg_turbo; do
	find -type f -path "*third_party/${lib}/*" \
		\! -path "*third_party/${lib}/chromium/*" \
		\! -path "*third_party/${lib}/google/*" \
		\! -path "*base/third_party/icu/*" \
		\! -regex '.*\.\(gn\|gni\|isolate\|py\)' \
		-delete
	done
	Fexec python build/linux/unbundle/replace_gn_files.py --system-libraries "${_system_libs[@]}" || Fdie

	# Create sysmlink to system Node.js
	Fexec mkdir -p third_party/node/linux/node-linux-x64/bin || Fdie
	Fexec ln -sf /usr/bin/node third_party/node/linux/node-linux-x64/bin || Fdie

	export CC=clang
	export CXX=clang++
	export AR=ar
	export NM=nm

	Fexec cd "${Fsrcdir}/electron/vendor/libchromiumcontent" || Fdie

	Fexec script/update -t x64 --skip_gclient || Fdie
	Fexec script/build -t x64 -c static_library || Fdie
	Fexec script/create-dist -c static_library --no_zip -t x64 || Fdie

	cd "${Fsrcdir}"/electron
	Fpatch allow-root-build.patch
	export LDFLAGS="${LDFLAGS} -Wl,-z,noexecstack -L/usr/lib"
	distdir="${Fsrcdir}/electron/vendor/libchromiumcontent/dist/main"
	Fexec script/bootstrap.py --verbose \
		--clang_dir=/usr \
		--libcc_source_path="${distdir}/src" \
		--libcc_shared_library_path="${distdir}/shared_library" \
		--libcc_static_library_path="${distdir}/static_library" || Fdie

	Fexec script/build.py -c Release --ninja-path=ninja || Fdie

	Fmkdir usr/lib/electron
	_cc="${Fsrcdir}"/electron/vendor/libchromiumcontent/dist/main

	Fexec cd out/R || Fdie
	Finstallrel 644 usr/lib/electron/blink_image_resources_200_percent.pak
	Finstallrel 644 usr/lib/electron/content_resources_200_percent.pak
	Finstallrel 644 usr/lib/electron/content_shell.pak
	Finstallrel 644 usr/lib/electron/icudtl.dat
	Finstallrel 644 usr/lib/electron/natives_blob.bin
	Finstallrel 644 usr/lib/electron/ui_resources_200_percent.pak
	Finstallrel 644 usr/lib/electron/views_resources_200_percent.pak
	Finstallrel 755 usr/lib/electron/electron
	Finstallrel 755 usr/lib/electron/v8_context_snapshot.bin
	Fln ../lib/electron/electron usr/bin/electron

	# namcap warning: Referenced library 'libnode.so' is an uninstalled dependency
	# Fixable by moving libnode.so to /usr/lib
	Finstallrel 644 libnode.so usr/lib/electron
	Fcprel locales usr/lib/electron/
	Fcprel resources usr/lib/electron/
	Fexec cd ../.. || Fdie

	echo -n "v${pkgver}" > "${Fdestdir}"/usr/lib/electron/version

	# Install .desktop and icon file
	Finstall 644 usr/share/applications/electron.desktop
	Finstallrel 644 default_app/icon.png \
		usr/share/pixmaps/electron.png  # hicolor has no 1024x1024

	# Install Node headers
	_headers_dest="${Fdestdir}/usr/lib/electron/node"
	install -d -m755 "${_headers_dest}"
	cd "${Fsrcdir}"/electron/vendor/node
	find src deps/http_parser deps/zlib deps/uv deps/npm \
		-name "*.gypi" \
		-exec install -D -m644 '{}' "${_headers_dest}/{}" \; \
		-or -name "*.h" \
		-exec install -D -m644 '{}' "${_headers_dest}/{}" \;
	install -m644 {common,config}.gypi "${_headers_dest}"
	cd "${_cc}"/src
	find v8 -name "*.h" \
		-exec install -D -m644 '{}' "${_headers_dest}/deps/{}" \;

}
