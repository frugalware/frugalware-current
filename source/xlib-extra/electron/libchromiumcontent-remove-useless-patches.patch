--- a/patches/common/v8/.patches.yaml
+++ b/patches/common/v8/.patches.yaml
@@ -22,11 +22,6 @@
   file: dcheck.patch
   description: null
 -
-  owners: nitsakh
-  file: disable-warning-win.patch
-  description:
-    Disable unit test windows build warning
--
   owners: alexeykuzmin
   file: backport_b767cde1e7.patch
   description: Node 10.0.0 needs it.
--- a/patches/common/v8/backport_23652c5f.patch
+++ b/patches/common/v8/backport_23652c5f.patch
@@ -55,107 +55,3 @@
    ~JSONTraceWriter();
    void AppendTraceEvent(TraceObject* trace_event) override;
    void Flush() override;
-diff --git a/test/cctest/libplatform/test-tracing.cc b/test/cctest/libplatform/test-tracing.cc
-index da202057de..b949785bcf 100644
---- a/test/cctest/libplatform/test-tracing.cc
-+++ b/test/cctest/libplatform/test-tracing.cc
-@@ -128,44 +128,42 @@ TEST(TestTraceBufferRingBuffer) {
-   delete ring_buffer;
- }
- 
--TEST(TestJSONTraceWriter) {
--  std::ostringstream stream;
--  // Create a scope for the tracing controller to terminate the trace writer.
--  {
--    v8::Platform* old_platform = i::V8::GetCurrentPlatform();
--    std::unique_ptr<v8::Platform> default_platform(
--        v8::platform::NewDefaultPlatform());
--    i::V8::SetPlatformForTesting(default_platform.get());
--    auto tracing =
--        base::make_unique<v8::platform::tracing::TracingController>();
--    v8::platform::tracing::TracingController* tracing_controller =
--        tracing.get();
--    static_cast<v8::platform::DefaultPlatform*>(default_platform.get())
--        ->SetTracingController(std::move(tracing));
--    TraceWriter* writer = TraceWriter::CreateJSONTraceWriter(stream);
-+void PopulateJSONWriter(TraceWriter* writer) {
-+  v8::Platform* old_platform = i::V8::GetCurrentPlatform();
-+  std::unique_ptr<v8::Platform> default_platform(
-+      v8::platform::NewDefaultPlatform());
-+  i::V8::SetPlatformForTesting(default_platform.get());
-+  auto tracing = base::make_unique<v8::platform::tracing::TracingController>();
-+  v8::platform::tracing::TracingController* tracing_controller = tracing.get();
-+  static_cast<v8::platform::DefaultPlatform*>(default_platform.get())
-+      ->SetTracingController(std::move(tracing));
- 
--    TraceBuffer* ring_buffer =
--        TraceBuffer::CreateTraceBufferRingBuffer(1, writer);
--    tracing_controller->Initialize(ring_buffer);
--    TraceConfig* trace_config = new TraceConfig();
--    trace_config->AddIncludedCategory("v8-cat");
--    tracing_controller->StartTracing(trace_config);
-+  TraceBuffer* ring_buffer =
-+      TraceBuffer::CreateTraceBufferRingBuffer(1, writer);
-+  tracing_controller->Initialize(ring_buffer);
-+  TraceConfig* trace_config = new TraceConfig();
-+  trace_config->AddIncludedCategory("v8-cat");
-+  tracing_controller->StartTracing(trace_config);
- 
--    TraceObject trace_object;
--    trace_object.InitializeForTesting(
--        'X', tracing_controller->GetCategoryGroupEnabled("v8-cat"), "Test0",
--        v8::internal::tracing::kGlobalScope, 42, 123, 0, nullptr, nullptr,
--        nullptr, nullptr, TRACE_EVENT_FLAG_HAS_ID, 11, 22, 100, 50, 33, 44);
--    writer->AppendTraceEvent(&trace_object);
--    trace_object.InitializeForTesting(
--        'Y', tracing_controller->GetCategoryGroupEnabled("v8-cat"), "Test1",
--        v8::internal::tracing::kGlobalScope, 43, 456, 0, nullptr, nullptr,
--        nullptr, nullptr, 0, 55, 66, 110, 55, 77, 88);
--    writer->AppendTraceEvent(&trace_object);
--    tracing_controller->StopTracing();
--    i::V8::SetPlatformForTesting(old_platform);
--  }
-+  TraceObject trace_object;
-+  trace_object.InitializeForTesting(
-+      'X', tracing_controller->GetCategoryGroupEnabled("v8-cat"), "Test0",
-+      v8::internal::tracing::kGlobalScope, 42, 123, 0, nullptr, nullptr,
-+      nullptr, nullptr, TRACE_EVENT_FLAG_HAS_ID, 11, 22, 100, 50, 33, 44);
-+  writer->AppendTraceEvent(&trace_object);
-+  trace_object.InitializeForTesting(
-+      'Y', tracing_controller->GetCategoryGroupEnabled("v8-cat"), "Test1",
-+      v8::internal::tracing::kGlobalScope, 43, 456, 0, nullptr, nullptr,
-+      nullptr, nullptr, 0, 55, 66, 110, 55, 77, 88);
-+  writer->AppendTraceEvent(&trace_object);
-+  tracing_controller->StopTracing();
-+  i::V8::SetPlatformForTesting(old_platform);
-+}
- 
-+TEST(TestJSONTraceWriter) {
-+  std::ostringstream stream;
-+  TraceWriter* writer = TraceWriter::CreateJSONTraceWriter(stream);
-+  PopulateJSONWriter(writer);
-   std::string trace_str = stream.str();
-   std::string expected_trace_str =
-       "{\"traceEvents\":[{\"pid\":11,\"tid\":22,\"ts\":100,\"tts\":50,"
-@@ -177,6 +175,21 @@ TEST(TestJSONTraceWriter) {
-   CHECK_EQ(expected_trace_str, trace_str);
- }
- 
-+TEST(TestJSONTraceWriterWithCustomtag) {
-+  std::ostringstream stream;
-+  TraceWriter* writer = TraceWriter::CreateJSONTraceWriter(stream, "customTag");
-+  PopulateJSONWriter(writer);
-+  std::string trace_str = stream.str();
-+  std::string expected_trace_str =
-+      "{\"customTag\":[{\"pid\":11,\"tid\":22,\"ts\":100,\"tts\":50,"
-+      "\"ph\":\"X\",\"cat\":\"v8-cat\",\"name\":\"Test0\",\"dur\":33,"
-+      "\"tdur\":44,\"id\":\"0x2a\",\"args\":{}},{\"pid\":55,\"tid\":66,"
-+      "\"ts\":110,\"tts\":55,\"ph\":\"Y\",\"cat\":\"v8-cat\",\"name\":"
-+      "\"Test1\",\"dur\":77,\"tdur\":88,\"args\":{}}]}";
-+
-+  CHECK_EQ(expected_trace_str, trace_str);
-+}
-+
- TEST(TestTracingController) {
-   v8::Platform* old_platform = i::V8::GetCurrentPlatform();
-   std::unique_ptr<v8::Platform> default_platform(
--- a/patches/common/v8/backport_2eb23a17.patch
+++ b/patches/common/v8/backport_2eb23a17.patch
@@ -709,300 +709,3 @@
    F(SystemBreak, 0, 1)                        \
    F(TraceEnter, 0, 1)                         \
    F(TraceExit, 1, 1)                          \
-diff --git a/test/cctest/test-typedarrays.cc b/test/cctest/test-typedarrays.cc
-index 7ec9197b65..bab6e0f2f6 100644
---- a/test/cctest/test-typedarrays.cc
-+++ b/test/cctest/test-typedarrays.cc
-@@ -117,12 +117,12 @@ void TestSpeciesProtector(char* code,
- 
-       v8::internal::Isolate* i_isolate =
-           reinterpret_cast<v8::internal::Isolate*>(isolate);
--      CHECK(i_isolate->IsSpeciesLookupChainIntact());
-+      CHECK(i_isolate->IsTypedArraySpeciesLookupChainIntact());
-       CompileRun(code);
-       if (invalidates_species_protector) {
--        CHECK(!i_isolate->IsSpeciesLookupChainIntact());
-+        CHECK(!i_isolate->IsTypedArraySpeciesLookupChainIntact());
-       } else {
--        CHECK(i_isolate->IsSpeciesLookupChainIntact());
-+        CHECK(i_isolate->IsTypedArraySpeciesLookupChainIntact());
-       }
- 
-       v8::Local<v8::Value> my_typed_array = CompileRun("MyTypedArray");
-diff --git a/test/mjsunit/es6/array-species-constructor-accessor.js b/test/mjsunit/es6/array-species-constructor-accessor.js
-index 7ebf328a8a..7185d98b58 100644
---- a/test/mjsunit/es6/array-species-constructor-accessor.js
-+++ b/test/mjsunit/es6/array-species-constructor-accessor.js
-@@ -18,7 +18,7 @@ assertEquals(1, x.concat([1])[0]);
- class MyArray extends Array { }
- 
- Object.defineProperty(x, 'constructor', {get() { return MyArray; }});
--assertFalse(%SpeciesProtector());
-+assertFalse(%ArraySpeciesProtector());
- 
- assertEquals(MyArray, x.map(()=>{}).constructor);
- assertEquals(MyArray, x.filter(()=>{}).constructor);
-diff --git a/test/mjsunit/es6/array-species-constructor-delete.js b/test/mjsunit/es6/array-species-constructor-delete.js
-index fff22a2a8c..3b85d52565 100644
---- a/test/mjsunit/es6/array-species-constructor-delete.js
-+++ b/test/mjsunit/es6/array-species-constructor-delete.js
-@@ -19,7 +19,7 @@ class MyArray extends Array { }
- 
- Object.prototype.constructor = MyArray;
- delete Array.prototype.constructor;
--assertFalse(%SpeciesProtector());
-+assertFalse(%ArraySpeciesProtector());
- 
- assertEquals(MyArray, x.map(()=>{}).constructor);
- assertEquals(MyArray, x.filter(()=>{}).constructor);
-diff --git a/test/mjsunit/es6/array-species-constructor.js b/test/mjsunit/es6/array-species-constructor.js
-index 0d888f46ee..07e897d458 100644
---- a/test/mjsunit/es6/array-species-constructor.js
-+++ b/test/mjsunit/es6/array-species-constructor.js
-@@ -18,7 +18,7 @@ assertEquals(1, x.concat([1])[0]);
- class MyArray extends Array { }
- 
- x.constructor = MyArray;
--assertFalse(%SpeciesProtector());
-+assertFalse(%ArraySpeciesProtector());
- 
- assertEquals(MyArray, x.map(()=>{}).constructor);
- assertEquals(MyArray, x.filter(()=>{}).constructor);
-diff --git a/test/mjsunit/es6/array-species-delete.js b/test/mjsunit/es6/array-species-delete.js
-index 16a2fa26f9..2f0f50a1b2 100644
---- a/test/mjsunit/es6/array-species-delete.js
-+++ b/test/mjsunit/es6/array-species-delete.js
-@@ -19,7 +19,7 @@ class MyArray extends Array { }
- 
- Object.prototype[Symbol.species] = MyArray;
- delete Array[Symbol.species];
--assertFalse(%SpeciesProtector());
-+assertFalse(%ArraySpeciesProtector());
- 
- assertEquals(MyArray, x.map(()=>{}).constructor);
- assertEquals(MyArray, x.filter(()=>{}).constructor);
-diff --git a/test/mjsunit/es6/array-species-modified.js b/test/mjsunit/es6/array-species-modified.js
-index 58feb31669..d5a707997a 100644
---- a/test/mjsunit/es6/array-species-modified.js
-+++ b/test/mjsunit/es6/array-species-modified.js
-@@ -18,7 +18,7 @@ assertEquals(1, x.concat([1])[0]);
- class MyArray extends Array { }
- 
- Object.defineProperty(Array, Symbol.species, {value: MyArray});
--assertFalse(%SpeciesProtector());
-+assertFalse(%ArraySpeciesProtector());
- 
- assertEquals(MyArray, x.map(()=>{}).constructor);
- assertEquals(MyArray, x.filter(()=>{}).constructor);
-diff --git a/test/mjsunit/es6/array-species-parent-constructor.js b/test/mjsunit/es6/array-species-parent-constructor.js
-index b4fb1d56e3..8a861fb05d 100644
---- a/test/mjsunit/es6/array-species-parent-constructor.js
-+++ b/test/mjsunit/es6/array-species-parent-constructor.js
-@@ -18,7 +18,7 @@ assertEquals(1, x.concat([1])[0]);
- class MyArray extends Array { }
- 
- Array.prototype.constructor = MyArray;
--assertFalse(%SpeciesProtector());
-+assertFalse(%ArraySpeciesProtector());
- 
- assertEquals(MyArray, x.map(()=>{}).constructor);
- assertEquals(MyArray, x.filter(()=>{}).constructor);
-diff --git a/test/mjsunit/es6/array-species-proto.js b/test/mjsunit/es6/array-species-proto.js
-index 6b55881cd6..d8e2ae5ddd 100644
---- a/test/mjsunit/es6/array-species-proto.js
-+++ b/test/mjsunit/es6/array-species-proto.js
-@@ -18,7 +18,7 @@ assertEquals(1, x.concat([1])[0]);
- class MyArray extends Array { }
- 
- x.__proto__ = MyArray.prototype;
--assertTrue(%SpeciesProtector());
-+assertTrue(%ArraySpeciesProtector());
- 
- assertEquals(MyArray, x.map(()=>{}).constructor);
- assertEquals(MyArray, x.filter(()=>{}).constructor);
-diff --git a/test/mjsunit/harmony/regexp-named-captures.js b/test/mjsunit/harmony/regexp-named-captures.js
-index 72041b99bf..aab8393392 100644
---- a/test/mjsunit/harmony/regexp-named-captures.js
-+++ b/test/mjsunit/harmony/regexp-named-captures.js
-@@ -425,7 +425,7 @@ function toSlowMode(re) {
- {
-   const re = /./;
-   const result = re.exec("a");
--  assertTrue(%SpeciesProtector());
-+  assertTrue(%ArraySpeciesProtector());
-   assertEquals(result.__proto__, Array.prototype);
-   assertTrue(result.hasOwnProperty('groups'));
-   assertArrayEquals(["a"], result);
-@@ -433,7 +433,7 @@ function toSlowMode(re) {
-   assertEquals(undefined, result.groups);
- 
-   Array.prototype.groups = { a: "b" };
--  assertTrue(%SpeciesProtector());
-+  assertTrue(%ArraySpeciesProtector());
-   assertEquals("$<a>", "a".replace(re, "$<a>"));
-   Array.prototype.groups = undefined;
- }
-@@ -441,7 +441,7 @@ function toSlowMode(re) {
- {
-   const re = toSlowMode(/./);
-   const result = re.exec("a");
--  assertTrue(%SpeciesProtector());
-+  assertTrue(%ArraySpeciesProtector());
-   assertEquals(result.__proto__, Array.prototype);
-   assertTrue(result.hasOwnProperty('groups'));
-   assertArrayEquals(["a"], result);
-@@ -449,7 +449,7 @@ function toSlowMode(re) {
-   assertEquals(undefined, result.groups);
- 
-   Array.prototype.groups = { a: "b" };
--  assertTrue(%SpeciesProtector());
-+  assertTrue(%ArraySpeciesProtector());
-   assertEquals("$<a>", "a".replace(re, "$<a>"));
-   Array.prototype.groups = undefined;
- }
-@@ -457,7 +457,7 @@ function toSlowMode(re) {
- {
-   const re = /(?<a>a).|(?<x>x)/;
-   const result = re.exec("ab");
--  assertTrue(%SpeciesProtector());
-+  assertTrue(%ArraySpeciesProtector());
-   assertEquals(result.__proto__, Array.prototype);
-   assertTrue(result.hasOwnProperty('groups'));
-   assertArrayEquals(["ab", "a", undefined], result);
-@@ -467,7 +467,7 @@ function toSlowMode(re) {
-   // a is a matched named capture, b is an unmatched named capture, and z
-   // is not a named capture.
-   Array.prototype.groups = { a: "b", x: "y", z: "z" };
--  assertTrue(%SpeciesProtector());
-+  assertTrue(%ArraySpeciesProtector());
-   assertEquals("a", "ab".replace(re, "$<a>"));
-   assertEquals("", "ab".replace(re, "$<x>"));
-   assertEquals("", "ab".replace(re, "$<z>"));
-@@ -477,7 +477,7 @@ function toSlowMode(re) {
- {
-   const re = toSlowMode(/(?<a>a).|(?<x>x)/);
-   const result = re.exec("ab");
--  assertTrue(%SpeciesProtector());
-+  assertTrue(%ArraySpeciesProtector());
-   assertEquals(result.__proto__, Array.prototype);
-   assertTrue(result.hasOwnProperty('groups'));
-   assertArrayEquals(["ab", "a", undefined], result);
-@@ -487,7 +487,7 @@ function toSlowMode(re) {
-   // a is a matched named capture, b is an unmatched named capture, and z
-   // is not a named capture.
-   Array.prototype.groups = { a: "b", x: "y", z: "z" };
--  assertTrue(%SpeciesProtector());
-+  assertTrue(%ArraySpeciesProtector());
-   assertEquals("a", "ab".replace(re, "$<a>"));
-   assertEquals("", "ab".replace(re, "$<x>"));
-   assertEquals("", "ab".replace(re, "$<z>"));
-@@ -506,13 +506,13 @@ function toSlowMode(re) {
- 
-   const re = new FakeRegExp();
-   const result = re.exec("ab");
--  assertTrue(%SpeciesProtector());
-+  assertTrue(%ArraySpeciesProtector());
-   assertEquals(result.__proto__, Array.prototype);
-   assertFalse(result.hasOwnProperty('groups'));
- 
-   Array.prototype.groups = { a: "b" };
-   Array.prototype.groups.__proto__.b = "c";
--  assertTrue(%SpeciesProtector());
-+  assertTrue(%ArraySpeciesProtector());
-   assertEquals("b", "ab".replace(re, "$<a>"));
-   assertEquals("c", "ab".replace(re, "$<b>"));
-   Array.prototype.groups = undefined;
-@@ -531,7 +531,7 @@ function toSlowMode(re) {
- 
-   const re = new FakeRegExp();
-   const result = re.exec("ab");
--  assertTrue(%SpeciesProtector());
-+  assertTrue(%ArraySpeciesProtector());
-   assertEquals(result.__proto__, Array.prototype);
-   assertTrue(result.hasOwnProperty('groups'));
-   assertEquals({ a: "b" }, result.groups);
-diff --git a/test/mjsunit/keyed-store-generic.js b/test/mjsunit/keyed-store-generic.js
-index c2c48dd96d..e5d6ab41f2 100644
---- a/test/mjsunit/keyed-store-generic.js
-+++ b/test/mjsunit/keyed-store-generic.js
-@@ -16,7 +16,7 @@ f("make it generic", 0, 0);
- 
- (function TestSpeciesProtector() {
-   function MyArray() {}
--  assertTrue(%SpeciesProtector());
-+  assertTrue(%ArraySpeciesProtector());
-   f(Array.prototype, "constructor", MyArray);
--  assertFalse(%SpeciesProtector());
-+  assertFalse(%ArraySpeciesProtector());
- })();
-diff --git a/tools/v8heapconst.py b/tools/v8heapconst.py
-index 5659cdd03c..b4a98dcc11 100644
---- a/tools/v8heapconst.py
-+++ b/tools/v8heapconst.py
-@@ -322,34 +322,35 @@ KNOWN_OBJECTS = {
-   ("OLD_SPACE", 0x02519): "TerminationException",
-   ("OLD_SPACE", 0x02579): "OptimizedOut",
-   ("OLD_SPACE", 0x025d1): "StaleRegister",
--  ("OLD_SPACE", 0x02651): "EmptyByteArray",
--  ("OLD_SPACE", 0x02661): "EmptyFixedUint8Array",
--  ("OLD_SPACE", 0x02681): "EmptyFixedInt8Array",
--  ("OLD_SPACE", 0x026a1): "EmptyFixedUint16Array",
--  ("OLD_SPACE", 0x026c1): "EmptyFixedInt16Array",
--  ("OLD_SPACE", 0x026e1): "EmptyFixedUint32Array",
--  ("OLD_SPACE", 0x02701): "EmptyFixedInt32Array",
--  ("OLD_SPACE", 0x02721): "EmptyFixedFloat32Array",
--  ("OLD_SPACE", 0x02741): "EmptyFixedFloat64Array",
--  ("OLD_SPACE", 0x02761): "EmptyFixedUint8ClampedArray",
--  ("OLD_SPACE", 0x027c1): "EmptyScript",
--  ("OLD_SPACE", 0x02849): "ManyClosuresCell",
--  ("OLD_SPACE", 0x02859): "EmptySloppyArgumentsElements",
--  ("OLD_SPACE", 0x02879): "EmptySlowElementDictionary",
--  ("OLD_SPACE", 0x028c1): "EmptyOrderedHashMap",
--  ("OLD_SPACE", 0x028e9): "EmptyOrderedHashSet",
--  ("OLD_SPACE", 0x02911): "EmptyPropertyCell",
--  ("OLD_SPACE", 0x02939): "EmptyWeakCell",
--  ("OLD_SPACE", 0x029a9): "NoElementsProtector",
--  ("OLD_SPACE", 0x029d1): "IsConcatSpreadableProtector",
--  ("OLD_SPACE", 0x029e1): "SpeciesProtector",
--  ("OLD_SPACE", 0x02a09): "StringLengthProtector",
--  ("OLD_SPACE", 0x02a19): "FastArrayIterationProtector",
--  ("OLD_SPACE", 0x02a29): "ArrayIteratorProtector",
--  ("OLD_SPACE", 0x02a51): "ArrayBufferNeuteringProtector",
--  ("OLD_SPACE", 0x02ac9): "InfinityValue",
--  ("OLD_SPACE", 0x02ad9): "MinusZeroValue",
--  ("OLD_SPACE", 0x02ae9): "MinusInfinityValue",
-+  ("OLD_SPACE", 0x02661): "EmptyByteArray",
-+  ("OLD_SPACE", 0x02681): "EmptyFixedUint8Array",
-+  ("OLD_SPACE", 0x026a1): "EmptyFixedInt8Array",
-+  ("OLD_SPACE", 0x026c1): "EmptyFixedUint16Array",
-+  ("OLD_SPACE", 0x026e1): "EmptyFixedInt16Array",
-+  ("OLD_SPACE", 0x02701): "EmptyFixedUint32Array",
-+  ("OLD_SPACE", 0x02721): "EmptyFixedInt32Array",
-+  ("OLD_SPACE", 0x02741): "EmptyFixedFloat32Array",
-+  ("OLD_SPACE", 0x02761): "EmptyFixedFloat64Array",
-+  ("OLD_SPACE", 0x02781): "EmptyFixedUint8ClampedArray",
-+  ("OLD_SPACE", 0x027e1): "EmptyScript",
-+  ("OLD_SPACE", 0x02879): "ManyClosuresCell",
-+  ("OLD_SPACE", 0x02889): "EmptySloppyArgumentsElements",
-+  ("OLD_SPACE", 0x028a9): "EmptySlowElementDictionary",
-+  ("OLD_SPACE", 0x028f1): "EmptyOrderedHashMap",
-+  ("OLD_SPACE", 0x02919): "EmptyOrderedHashSet",
-+  ("OLD_SPACE", 0x02951): "EmptyPropertyCell",
-+  ("OLD_SPACE", 0x02979): "EmptyWeakCell",
-+  ("OLD_SPACE", 0x029e9): "NoElementsProtector",
-+  ("OLD_SPACE", 0x02a11): "IsConcatSpreadableProtector",
-+  ("OLD_SPACE", 0x02a21): "ArraySpeciesProtector",
-+  ("OLD_SPACE", 0x02a49): "TypedArraySpeciesProtector",
-+  ("OLD_SPACE", 0x02a71): "PromiseSpeciesProtector",
-+  ("OLD_SPACE", 0x02a99): "StringLengthProtector",
-+  ("OLD_SPACE", 0x02aa9): "ArrayIteratorProtector",
-+  ("OLD_SPACE", 0x02ad1): "ArrayBufferNeuteringProtector",
-+  ("OLD_SPACE", 0x02b59): "InfinityValue",
-+  ("OLD_SPACE", 0x02b69): "MinusZeroValue",
-+  ("OLD_SPACE", 0x02b79): "MinusInfinityValue",
- }
- 
- # List of known V8 Frame Markers.
--- 
-2.11.0 (Apple Git-81)
-
--- a/patches/common/v8/backport_39d546a.patch
+++ b/patches/common/v8/backport_39d546a.patch
@@ -42,43 +42,3 @@
  MaybeLocal<String> Value::ToString(Local<Context> context) const {
    auto obj = Utils::OpenHandle(this);
    if (obj->IsString()) return ToApiHandle<String>(obj);
-diff --git a/test/cctest/test-api.cc b/test/cctest/test-api.cc
-index 54afc61f4c..b7483a7c5e 100644
---- a/test/cctest/test-api.cc
-+++ b/test/cctest/test-api.cc
-@@ -27239,6 +27239,35 @@ TEST(ImportMeta) {
-   CHECK(result->StrictEquals(Local<v8::Value>::Cast(v8::Utils::ToLocal(meta))));
- }
- 
-+TEST(GetModuleNamespace) {
-+  LocalContext context;
-+  v8::Isolate* isolate = context->GetIsolate();
-+  v8::HandleScope scope(isolate);
-+
-+  Local<String> url = v8_str("www.google.com");
-+  Local<String> source_text = v8_str("export default 5; export const a = 10;");
-+  v8::ScriptOrigin origin(url, Local<v8::Integer>(), Local<v8::Integer>(),
-+                          Local<v8::Boolean>(), Local<v8::Integer>(),
-+                          Local<v8::Value>(), Local<v8::Boolean>(),
-+                          Local<v8::Boolean>(), True(isolate));
-+  v8::ScriptCompiler::Source source(source_text, origin);
-+  Local<Module> module =
-+      v8::ScriptCompiler::CompileModule(isolate, &source).ToLocalChecked();
-+  module->InstantiateModule(context.local(), UnexpectedModuleResolveCallback)
-+      .ToChecked();
-+  module->Evaluate(context.local()).ToLocalChecked();
-+
-+  Local<Value> ns_val = module->GetModuleNamespace();
-+  CHECK(ns_val->IsModuleNamespaceObject());
-+  Local<Object> ns = ns_val.As<Object>();
-+  CHECK(ns->Get(context.local(), v8_str("default"))
-+            .ToLocalChecked()
-+            ->StrictEquals(v8::Number::New(isolate, 5)));
-+  CHECK(ns->Get(context.local(), v8_str("a"))
-+            .ToLocalChecked()
-+            ->StrictEquals(v8::Number::New(isolate, 10)));
-+}
-+
- TEST(GlobalTemplateWithDoubleProperty) {
-   v8::Isolate* isolate = CcTest::isolate();
-   v8::HandleScope handle_scope(isolate);
--- a/patches/common/v8/backport_9fb02b526.patch
+++ b/patches/common/v8/backport_9fb02b526.patch
@@ -73,42 +73,3 @@
      }
  
      raw_holder = GetCompatibleReceiver(isolate, *fun_data, *js_receiver);
-diff --git a/test/cctest/test-api.cc b/test/cctest/test-api.cc
-index 7887cbfa75..0605f439e5 100644
---- a/test/cctest/test-api.cc
-+++ b/test/cctest/test-api.cc
-@@ -1088,6 +1088,34 @@ THREADED_PROFILED_TEST(FunctionTemplate) {
-   TestFunctionTemplateAccessor(construct_callback, Return239Callback);
- }
- 
-+static void FunctionCallbackForProxyTest(
-+    const v8::FunctionCallbackInfo<Value>& info) {
-+  info.GetReturnValue().Set(info.This());
-+}
-+
-+THREADED_TEST(FunctionTemplateWithProxy) {
-+  LocalContext env;
-+  v8::Isolate* isolate = env->GetIsolate();
-+  v8::HandleScope scope(isolate);
-+
-+  v8::Local<v8::FunctionTemplate> function_template =
-+      v8::FunctionTemplate::New(isolate, FunctionCallbackForProxyTest);
-+  v8::Local<v8::Function> function =
-+      function_template->GetFunction(env.local()).ToLocalChecked();
-+  CHECK((*env)->Global()->Set(env.local(), v8_str("f"), function).FromJust());
-+  v8::Local<v8::Value> proxy =
-+      CompileRun("var proxy = new Proxy({}, {}); proxy");
-+  CHECK(proxy->IsProxy());
-+
-+  v8::Local<v8::Value> result = CompileRun("f(proxy)");
-+  CHECK(result->Equals(env.local(), (*env)->Global()).FromJust());
-+
-+  result = CompileRun("f.call(proxy)");
-+  CHECK(result->Equals(env.local(), proxy).FromJust());
-+
-+  result = CompileRun("Reflect.apply(f, proxy, [1])");
-+  CHECK(result->Equals(env.local(), proxy).FromJust());
-+}
- 
- static void SimpleCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
-   ApiTestFuzzer::Fuzz();
