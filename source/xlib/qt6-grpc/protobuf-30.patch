diff --git a/src/tools/qtgrpcgen/qgrpcgenerator.cpp b/src/tools/qtgrpcgen/qgrpcgenerator.cpp
index 6c205648..046b35b1 100644
--- a/src/tools/qtgrpcgen/qgrpcgenerator.cpp
+++ b/src/tools/qtgrpcgen/qgrpcgenerator.cpp
@@ -87,19 +87,19 @@ std::set<std::string> QGrpcGenerator::GetInternalIncludes(const FileDescriptor *
         for (int j = 0; j < service->method_count(); ++j) {
             const MethodDescriptor *method = service->method(j);
             if (method->input_type()->file() != service->file()) {
-                includes.insert(utils::removeFileSuffix(method->input_type()->file()->name())
+                includes.insert(utils::removeFileSuffix(std::string(method->input_type()->file()->name()))
                                 + fullSuffix);
             }
 
             if (method->output_type()->file() != service->file()) {
-                includes.insert(utils::removeFileSuffix(method->output_type()->file()->name())
+                includes.insert(utils::removeFileSuffix(std::string(method->output_type()->file()->name()))
                                 + fullSuffix);
             }
         }
     }
     if (file->message_type_count() > 0) {
         includes.insert(common::generateRelativeFilePath(file,
-                                                         utils::extractFileBasename(file->name()))
+                                                         utils::extractFileBasename(std::string(file->name())))
                         + fullSuffix);
     }
     return includes;
@@ -128,7 +128,7 @@ void QGrpcGenerator::GenerateQmlClientServices(
 
     const std::string qmlPrefix = "qml";
 
-    const std::string basename = utils::extractFileBasename(file->name()) +
+    const std::string basename = utils::extractFileBasename(std::string(file->name())) +
         GrpcTemplates::GrpcClientFileSuffix() + CommonTemplates::ProtoFileSuffix();
     const std::string qmlBasename = qmlPrefix + basename;
 
@@ -174,7 +174,7 @@ bool QGrpcGenerator::GenerateClientServices(const FileDescriptor *file,
     if (file->service_count() <= 0)
         return true;
 
-    const std::string basename = utils::extractFileBasename(file->name()) +
+    const std::string basename = utils::extractFileBasename(std::string(file->name())) +
         GrpcTemplates::GrpcClientFileSuffix() + CommonTemplates::ProtoFileSuffix();
     std::string identifier = utils::toValidIdentifier(basename);
     const std::string realtivePath = common::generateRelativeFilePath(file, basename);
diff --git a/src/tools/qtprotobufgen/enumdeclarationprinter.cpp b/src/tools/qtprotobufgen/enumdeclarationprinter.cpp
index a3f5274d..99bbee18 100644
--- a/src/tools/qtprotobufgen/enumdeclarationprinter.cpp
+++ b/src/tools/qtprotobufgen/enumdeclarationprinter.cpp
@@ -44,7 +44,7 @@ void EnumDeclarationPrinter::printEnum()
     int numValues = m_descriptor->value_count();
     for (int j = 0; j < numValues; ++j) {
         const EnumValueDescriptor *valueDescr = m_descriptor->value(j);
-        m_printer->Print({ { "enumvalue", common::qualifiedCppName(valueDescr->name()) },
+        m_printer->Print({ { "enumvalue", common::qualifiedCppName(std::string(valueDescr->name())) },
                            { "value", std::to_string(valueDescr->number()) } },
                          CommonTemplates::EnumFieldTemplate());
     }
diff --git a/src/tools/qtprotobufgen/messagedeclarationprinter.cpp b/src/tools/qtprotobufgen/messagedeclarationprinter.cpp
index 452d023b..fc913477 100644
--- a/src/tools/qtprotobufgen/messagedeclarationprinter.cpp
+++ b/src/tools/qtprotobufgen/messagedeclarationprinter.cpp
@@ -442,7 +442,7 @@ void MessageDeclarationPrinter::printQEnums()
         Indent();
         for (int j = 0; j < enumDescr->value_count(); ++j) {
             const auto *valueDescr = enumDescr->value(j);
-            m_printer->Print({ { "enumvalue", common::qualifiedCppName(valueDescr->name()) },
+            m_printer->Print({ { "enumvalue", common::qualifiedCppName(std::string(valueDescr->name())) },
                                { "value", std::to_string(valueDescr->number()) } },
                              CommonTemplates::EnumFieldTemplate());
         }
@@ -464,7 +464,7 @@ void MessageDeclarationPrinter::printOneofEnums()
                 for (int j = 0; j < oneofDescr->field_count(); ++j) {
                     const auto *valueDescr = oneofDescr->field(j);
                     m_printer->Print({ { "enumvalue",
-                                         utils::capitalizeAsciiName(valueDescr->camelcase_name()) },
+                                         utils::capitalizeAsciiName(std::string(valueDescr->camelcase_name())) },
                                        { "value", std::to_string(valueDescr->number()) } },
                                      CommonTemplates::EnumFieldTemplate());
                 }
diff --git a/src/tools/qtprotobufgen/messagedefinitionprinter.cpp b/src/tools/qtprotobufgen/messagedefinitionprinter.cpp
index 3ac81249..cf33aa08 100644
--- a/src/tools/qtprotobufgen/messagedefinitionprinter.cpp
+++ b/src/tools/qtprotobufgen/messagedefinitionprinter.cpp
@@ -257,7 +257,7 @@ void MessageDefinitionPrinter::printUintData(const char *templateString)
             { "field_number", std::to_string(field->number()) },
             { "property_index", std::to_string(propertyIndex) },
             { "field_flags", common::collectFieldFlags(field) },
-            { "json_name", field->json_name() },
+            { "json_name", std::string(field->json_name()) },
         };
 
         // Oneof and optional properties generate additional has<FieldName> property next to the
@@ -278,7 +278,7 @@ void MessageDefinitionPrinter::printCharData()
     m_printer->Print("// char_data\n");
 
     m_printer->Print("/* metadata char_data: */\n\"");
-    m_printer->Print(m_descriptor->full_name().c_str());
+    m_printer->Print(std::string(m_descriptor->full_name()).c_str());
     m_printer->Print("\\0\" /* = full message name */\n");
 
     m_printer->Print("/* field char_data: */\n\"");
diff --git a/src/tools/qtprotobufgen/qprotobufgenerator.cpp b/src/tools/qtprotobufgen/qprotobufgenerator.cpp
index d9d13a34..19f44afc 100644
--- a/src/tools/qtprotobufgen/qprotobufgenerator.cpp
+++ b/src/tools/qtprotobufgen/qprotobufgenerator.cpp
@@ -47,7 +47,7 @@ void QProtobufGenerator::GenerateSources(const FileDescriptor *file,
     assert(file != nullptr);
     assert(generatorContext != nullptr);
 
-    std::string basename = utils::extractFileBasename(file->name());
+    std::string basename = utils::extractFileBasename(std::string(file->name()));
     std::string identifier = utils::toValidIdentifier(basename);
     std::string relativePath = common::generateRelativeFilePath(file, basename);
     std::unique_ptr<io::ZeroCopyOutputStream> sourceStream(
@@ -114,7 +114,7 @@ void QProtobufGenerator::GenerateHeader(const FileDescriptor *file,
     assert(file != nullptr);
     assert(generatorContext != nullptr);
 
-    const std::string basename = utils::extractFileBasename(file->name()) +
+    const std::string basename = utils::extractFileBasename(std::string(file->name())) +
         CommonTemplates::ProtoFileSuffix();
     std::string identifier = utils::toValidIdentifier(basename);
     std::string relativePath = common::generateRelativeFilePath(file, basename);
@@ -169,9 +169,9 @@ void QProtobufGenerator::GenerateHeader(const FileDescriptor *file,
             const auto *field = message->field(i);
             if (field->type() == FieldDescriptor::TYPE_MESSAGE && !field->is_map()
                 && !field->is_repeated() && common::isQtType(field)) {
-                externalIncludes.insert(field->message_type()->file()->package()
-                                        + "/" + field->message_type()->name());
-                qtTypesSet.insert(field->message_type()->file()->package());
+                externalIncludes.insert(std::string(field->message_type()->file()->package())
+                                        + "/" + std::string(field->message_type()->name()));
+                qtTypesSet.insert(std::string(field->message_type()->file()->package()));
             }
 
             if (common::isOptionalField(field))
@@ -202,7 +202,7 @@ void QProtobufGenerator::GenerateHeader(const FileDescriptor *file,
             externalIncludes.insert("QtProtobufWellKnownTypes/qprotobufanysupport.h");
             continue;
         }
-        internalIncludes.insert(utils::removeFileSuffix(file->dependency(i)->name())
+        internalIncludes.insert(utils::removeFileSuffix(std::string(file->dependency(i)->name()))
                                 + CommonTemplates::ProtoFileSuffix()
                                 + CommonTemplates::HeaderSuffix());
     }
diff --git a/src/tools/qtprotoccommon/generatorbase.cpp b/src/tools/qtprotoccommon/generatorbase.cpp
index 880b5f80..d735b639 100644
--- a/src/tools/qtprotoccommon/generatorbase.cpp
+++ b/src/tools/qtprotoccommon/generatorbase.cpp
@@ -48,7 +48,7 @@ bool GeneratorBase::GenerateAll(const std::vector<const FileDescriptor *> &files
         std::set<std::string> extraNamespaceFiles;
         for (const FileDescriptor *file : files) {
             assert(file != nullptr);
-            extraNamespaceFiles.insert(file->name());
+            extraNamespaceFiles.insert(std::string(file->name()));
         }
         common::setExtraNamespacedFiles(extraNamespaceFiles);
     }
@@ -69,7 +69,7 @@ void GeneratorBase::OpenFileNamespaces(
     const bool hasQtNamespace = (Options::instance().extraNamespace() == "QT_NAMESPACE");
 
     const std::string scopeNamespaces
-        = common::getFullNamespace(file->package() + ".noop", "::", true);
+        = common::getFullNamespace(std::string(file->package()) + ".noop", "::", true);
 
     printer->Print("\n");
     if (hasQtNamespace || file->package() == "QtCore" || file->package() == "QtGui")
@@ -88,7 +88,7 @@ void GeneratorBase::CloseFileNamespaces(
     const bool hasQtNamespace = (Options::instance().extraNamespace() == "QT_NAMESPACE");
 
     const std::string scopeNamespaces
-        = common::getFullNamespace(file->package() + ".noop", "::", true);
+        = common::getFullNamespace(std::string(file->package()) + ".noop", "::", true);
     if (!scopeNamespaces.empty()) {
         printer->Print({ { "scope_namespaces", scopeNamespaces } },
                        CommonTemplates::NamespaceClosingTemplate());
diff --git a/src/tools/qtprotoccommon/generatorcommon.cpp b/src/tools/qtprotoccommon/generatorcommon.cpp
index f3bc6d98..4b1474aa 100644
--- a/src/tools/qtprotoccommon/generatorcommon.cpp
+++ b/src/tools/qtprotoccommon/generatorcommon.cpp
@@ -98,14 +98,14 @@ std::string common::buildExportMacro(bool addTrailingSpace)
 std::string common::getNestedNamespace(const Descriptor *type, std::string_view separator)
 {
     assert(type != nullptr);
-    std::string namespaces = type->file()->package();
+    std::string namespaces = std::string(type->file()->package());
 
     std::string nestingNamespaces;
     const Descriptor *containingType = type->containing_type();
     while (containingType) {
         nestingNamespaces.insert(0,
                                  std::string(separator)
-                                         + utils::capitalizeAsciiName(containingType->name())
+                                         + utils::capitalizeAsciiName(std::string(containingType->name()))
                                          + CommonTemplates::QtProtobufNestedNamespace());
         containingType = containingType->containing_type();
     }
@@ -151,7 +151,7 @@ TypeMap common::produceQtTypeMap(const Descriptor *type, const Descriptor *scope
     std::string scopeNamespaces = getScopeNamespace(type, scope);
     std::string qmlPackage = getFullNamespace(type, ".");
 
-    std::string name = type->name();
+    std::string name = std::string(type->name());
     std::string fullName = name;
     std::string scopeName = name;
 
@@ -176,7 +176,7 @@ TypeMap common::produceOverriddenTypeMap(const Descriptor *type, const Descripto
     std::string namespaces = getFullNamespace(type, "::");
     std::string qmlPackage = getFullNamespace(type, ".");
 
-    std::string name = type->name();
+    std::string name = std::string(type->name());
     std::string listName;
     if (type->full_name() == "google.protobuf.Any") {
         namespaces = "QtProtobuf";
@@ -215,7 +215,7 @@ TypeMap common::produceMessageTypeMap(const Descriptor *type, const Descriptor *
     if (qmlPackage.empty())
         qmlPackage = "QtProtobuf";
 
-    std::string name = utils::capitalizeAsciiName(type->name());
+    std::string name = utils::capitalizeAsciiName(std::string(type->name()));
     std::string fullName = namespaces.empty() ? name : (namespaces + "::" + name);
     std::string scopeName = scopeNamespaces.empty() ? name : (scopeNamespaces + "::" + name);
 
@@ -228,7 +228,7 @@ TypeMap common::produceMessageTypeMap(const Descriptor *type, const Descriptor *
     const std::string initializer = "nullptr";
     return { { "classname", name },
              { "dataclassname", name + CommonTemplates::DataClassName() },
-             { "classname_low_case", utils::deCapitalizeAsciiName(type->name()) },
+             { "classname_low_case", utils::deCapitalizeAsciiName(std::string(type->name())) },
              { "type", name },
              { "full_type", fullName },
              { "scope_type", scopeName },
@@ -250,14 +250,14 @@ TypeMap common::produceEnumTypeMap(const EnumDescriptor *type, const Descriptor
     EnumVisibility visibility = enumVisibility(type, scope);
     std::string namespaces = getFullNamespace(type, "::");
 
-    std::string name = utils::capitalizeAsciiName(type->name());
+    std::string name = utils::capitalizeAsciiName(std::string(type->name()));
     // qml package should consist only from proto package
     std::string qmlPackage = getFullNamespace(type, ".");
     if (qmlPackage.empty())
         qmlPackage = "QtProtobuf";
 
     std::string scopeNamespaces = getScopeNamespace(type, scope);
-    std::string enumGadget = scope != nullptr ? utils::capitalizeAsciiName(scope->name()) : "";
+    std::string enumGadget = scope != nullptr ? utils::capitalizeAsciiName(std::string(scope->name())) : "";
     if (visibility == GLOBAL_ENUM) {
         enumGadget = name + CommonTemplates::EnumClassSuffix();
         namespaces += "::";
@@ -277,7 +277,7 @@ TypeMap common::produceEnumTypeMap(const EnumDescriptor *type, const Descriptor
     std::string propertyType = visibility == LOCAL_ENUM ? name : fullName;
     std::string exportMacro =  common::buildExportMacro();
 
-    std::string initializer = scopeName + "::" + common::qualifiedCppName(type->value(0)->name());
+    std::string initializer = scopeName + "::" + common::qualifiedCppName(std::string(type->value(0)->name()));
     return { { "classname", name },
              { "classname_low_case", utils::deCapitalizeAsciiName(name) },
              { "type", name },
@@ -340,10 +340,10 @@ TypeMap common::produceSimpleTypeMap(FieldDescriptor::Type type)
 
 MethodMap common::produceMethodMap(const MethodDescriptor *method, const std::string &scope)
 {
-    std::string inputTypeName = method->input_type()->full_name();
-    std::string outputTypeName = method->output_type()->full_name();
-    std::string methodName = method->name();
-    std::string methodNameUpper = method->name();
+    std::string inputTypeName = std::string(method->input_type()->full_name());
+    std::string outputTypeName = std::string(method->output_type()->full_name());
+    std::string methodName = std::string(method->name());
+    std::string methodNameUpper = std::string(method->name());
     methodNameUpper[0] = static_cast<char>(utils::toAsciiUpper(methodNameUpper[0]));
     inputTypeName = utils::replace(inputTypeName, ".", "::");
     outputTypeName = utils::replace(outputTypeName, ".", "::");
@@ -351,7 +351,7 @@ MethodMap common::produceMethodMap(const MethodDescriptor *method, const std::st
     std::string senderName = methodNameUpper;
     senderName += "Sender";
 
-    std::string serviceName = method->service()->name();
+    std::string serviceName = std::string(method->service()->name());
 
     //Make sure that we don't clash the same stream names from different services
     std::string senderQmlName = serviceName;
@@ -391,7 +391,7 @@ TypeMap common::produceServiceTypeMap(const ServiceDescriptor *service, const De
 {
     const std::string name = "Service";
     const std::string fullName = "Service";
-    const std::string scopeName = service->name();
+    const std::string scopeName = std::string(service->name());
     static const std::string exportMacro = common::buildExportMacro();
 
     const std::string namespaces = getFullNamespace(service, "::");
@@ -411,14 +411,14 @@ TypeMap common::produceClientTypeMap(const ServiceDescriptor *service, const Des
 {
     const std::string name = "Client";
     const std::string fullName = "Client";
-    const std::string scopeName = service->name();
+    const std::string scopeName = std::string(service->name());
     static const std::string exportMacro = common::buildExportMacro();
 
     const std::string namespaces = getFullNamespace(service, "::");
     const std::string scopeNamespaces = getScopeNamespace(namespaces,
                                                           getFullNamespace(scope, "::"));
 
-    const std::string serviceName =  service->full_name();
+    const std::string serviceName =  std::string(service->full_name());
     return { { "classname", name },
              { "classname_low_case", utils::deCapitalizeAsciiName(name) },
              { "full_type", fullName },
@@ -433,7 +433,7 @@ TypeMap common::produceQmlClientTypeMap(const ServiceDescriptor *service, const
 {
     const std::string name = "QmlClient";
     const std::string fullName = "QmlClient";
-    const std::string serviceName = service->name();
+    const std::string serviceName = std::string(service->name());
     static const std::string exportMacro = common::buildExportMacro();
 
     const std::string namespaces = getFullNamespace(service, "::");
@@ -530,8 +530,8 @@ PropertyMap common::producePropertyMap(const OneofDescriptor *oneof, const Descr
     assert(oneof != nullptr);
 
     PropertyMap propertyMap;
-    propertyMap["optional_property_name"] = qualifiedCppName(qualifiedQmlName(oneof->name()));
-    propertyMap["optional_property_name_cap"] = utils::capitalizeAsciiName(oneof->name());
+    propertyMap["optional_property_name"] = qualifiedCppName(qualifiedQmlName(std::string(oneof->name())));
+    propertyMap["optional_property_name_cap"] = utils::capitalizeAsciiName(std::string(oneof->name()));
     auto scopeTypeMap = produceMessageTypeMap(scope, nullptr);
     propertyMap["classname"] = scope != nullptr ? scopeTypeMap["classname"] : "";
     propertyMap["dataclassname"] = propertyMap["classname"] + CommonTemplates::DataClassName();
@@ -557,7 +557,7 @@ PropertyMap common::producePropertyMap(const FieldDescriptor *field, const Descr
     }
 
     std::string propertyName = qualifiedCppName(
-            qualifiedQmlName(utils::deCapitalizeAsciiName(field->camelcase_name())));
+            qualifiedQmlName(utils::deCapitalizeAsciiName(std::string(field->camelcase_name()))));
     std::string propertyNameCap = utils::capitalizeAsciiName(propertyName);
 
     propertyMap["property_name"] = propertyName;
@@ -574,9 +574,9 @@ PropertyMap common::producePropertyMap(const FieldDescriptor *field, const Descr
 
     if (common::isOneofField(field)) {
         propertyMap["optional_property_name"] =
-                qualifiedCppName(qualifiedQmlName(field->containing_oneof()->name()));
+                qualifiedCppName(qualifiedQmlName(std::string(field->containing_oneof()->name())));
         propertyMap["optional_property_name_cap"] =
-                utils::capitalizeAsciiName(field->containing_oneof()->name());
+                utils::capitalizeAsciiName(std::string(field->containing_oneof()->name()));
     } else if (common::isOptionalField(field)) {
         propertyMap["optional_property_name"] = propertyName;
         propertyMap["optional_property_name_cap"] = propertyNameCap;
diff --git a/src/tools/qtprotoccommon/generatorcommon.h b/src/tools/qtprotoccommon/generatorcommon.h
index b9c73da9..e1310c87 100644
--- a/src/tools/qtprotoccommon/generatorcommon.h
+++ b/src/tools/qtprotoccommon/generatorcommon.h
@@ -59,12 +59,12 @@ struct common {
                 nestingNamespaces.insert(
                         0,
                         std::string(separator)
-                                + utils::capitalizeAsciiName(containingType->name()));
+                                + utils::capitalizeAsciiName(std::string(containingType->name())));
                 containingType = containingType->containing_type();
             }
         }
 
-        return getFullNamespace(type->file()->package() + nestingNamespaces + '.' + type->name(),
+        return getFullNamespace(std::string(type->file()->package()) + nestingNamespaces + '.' + std::string(type->name()),
                                 separator,
                                 common::isExtraNamespacedFile(std::string(type->file()->name())));
     }
@@ -93,7 +93,7 @@ struct common {
         bool first = true;
         while (containingType) {
             nestingNamespaces.insert(0,
-                                     utils::capitalizeAsciiName(containingType->name()) + suffix);
+                                     utils::capitalizeAsciiName(std::string(containingType->name())) + suffix);
             // Scope is detected as parent, it doesn't make sense to go deeper.
             if (containingType == scope)
                 break;
