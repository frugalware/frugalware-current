From 9fcb3845e4ec0aa065b97033e272888fe7325359 Mon Sep 17 00:00:00 2001
From: Damiano Galassi <damiog@gmail.com>
Date: Fri, 22 Nov 2024 16:45:26 +0100
Subject: [PATCH] contrib: update x265 to version 4.1

---
 ...o-not-set-thread-priority-on-Windows.patch |   8 +-
 contrib/x265/A02-Apple-Silicon-tuning.patch   |   8 +-
 ...ix-crash-when-SEI-length-is-variable.patch |  10 +-
 ...ment-ambient-viewing-environment-sei.patch |  37 +--
 ...x-Dolby-Vision-RPU-memory-management.patch |  56 ++++
 ...leaks-and-improve-rpu-memory-managem.patch | 299 ------------------
 ...A06-Simplify-macOS-cross-compilation.patch |  33 +-
 ...features-detection-code-from-SVT-AV1.patch | 158 ---------
 contrib/x265/module.defs                      |   6 +-
 contrib/x265_10bit/module.defs                |  13 +-
 contrib/x265_12bit/module.defs                |  13 +-
 contrib/x265_8bit/module.defs                 |  13 +-
 libhb/encx265.c                               |  30 +-
 13 files changed, 123 insertions(+), 561 deletions(-)
 create mode 100644 contrib/x265/A05-Fix-Dolby-Vision-RPU-memory-management.patch
 delete mode 100644 contrib/x265/A05-Fix-some-memory-leaks-and-improve-rpu-memory-managem.patch
 delete mode 100644 contrib/x265/A07-Port-ARM64-features-detection-code-from-SVT-AV1.patch

diff --git a/contrib/x265/A01-Do-not-set-thread-priority-on-Windows.patch b/contrib/x265/A01-Do-not-set-thread-priority-on-Windows.patch
index 46c88c7d2dc2..96c98f081365 100644
--- a/contrib/x265/A01-Do-not-set-thread-priority-on-Windows.patch
+++ b/contrib/x265/A01-Do-not-set-thread-priority-on-Windows.patch
@@ -1,14 +1,14 @@
-From c5ba94be92cc687ee36b321b7143d58393aca055 Mon Sep 17 00:00:00 2001
+From f069ed8e59da8d89b771e9f9fe7e7a39ae9d8f5b Mon Sep 17 00:00:00 2001
 From: Max Dmitrichenko <max.dmitrichenko@intel.com>
 Date: Thu, 22 Aug 2024 07:40:48 +0200
-Subject: [PATCH 1/6] Do not set thread priority on Windows
+Subject: [PATCH 1/5] Do not set thread priority on Windows
 
 ---
  source/common/threadpool.cpp | 6 ------
  1 file changed, 6 deletions(-)
 
 diff --git a/source/common/threadpool.cpp b/source/common/threadpool.cpp
-index 9c27be783..4d7918033 100644
+index b3505e5c0..1dec78b8d 100644
 --- a/source/common/threadpool.cpp
 +++ b/source/common/threadpool.cpp
 @@ -115,12 +115,6 @@ void WorkerThread::threadMain()
@@ -25,5 +25,5 @@ index 9c27be783..4d7918033 100644
  
      sleepbitmap_t idBit = (sleepbitmap_t)1 << m_id;
 -- 
-2.39.3 (Apple Git-146)
+2.39.5 (Apple Git-154)
 
diff --git a/contrib/x265/A02-Apple-Silicon-tuning.patch b/contrib/x265/A02-Apple-Silicon-tuning.patch
index 1fe7207e78a6..80452b8f462e 100644
--- a/contrib/x265/A02-Apple-Silicon-tuning.patch
+++ b/contrib/x265/A02-Apple-Silicon-tuning.patch
@@ -1,14 +1,14 @@
-From b6f8695658dc8f5e0d3759a65ae37a8efefef4e4 Mon Sep 17 00:00:00 2001
+From a7921f411ee52f1f77cbdfea20d982351483eb7e Mon Sep 17 00:00:00 2001
 From: Damiano Galassi <damiog@gmail.com>
 Date: Fri, 13 Sep 2024 16:08:25 +0200
-Subject: [PATCH 2/6] Apple Silicon tuning
+Subject: [PATCH 2/5] Apple Silicon tuning
 
 ---
  source/common/threadpool.cpp | 8 +++++++-
  1 file changed, 7 insertions(+), 1 deletion(-)
 
 diff --git a/source/common/threadpool.cpp b/source/common/threadpool.cpp
-index 4d7918033..7b53cb84e 100644
+index 1dec78b8d..2c28fceea 100644
 --- a/source/common/threadpool.cpp
 +++ b/source/common/threadpool.cpp
 @@ -661,10 +661,16 @@ void ThreadPool::getFrameThreadsCount(x265_param* p, int cpuCount)
@@ -30,5 +30,5 @@ index 4d7918033..7b53cb84e 100644
          p->frameNumThreads = 3;
  #endif
 -- 
-2.39.3 (Apple Git-146)
+2.39.5 (Apple Git-154)
 
diff --git a/contrib/x265/A03-fix-crash-when-SEI-length-is-variable.patch b/contrib/x265/A03-fix-crash-when-SEI-length-is-variable.patch
index e58b2f088037..7e80ecd2515d 100644
--- a/contrib/x265/A03-fix-crash-when-SEI-length-is-variable.patch
+++ b/contrib/x265/A03-fix-crash-when-SEI-length-is-variable.patch
@@ -1,17 +1,17 @@
-From 9711f557a2e9ab6e0511e18f03835f733a0bfcbc Mon Sep 17 00:00:00 2001
+From d0e5dc02fbf21b66abec2a7dd6302a522bcd468b Mon Sep 17 00:00:00 2001
 From: harlanc <hailiang8@staff.weibo.com>
 Date: Thu, 1 Dec 2022 07:46:13 +0000
-Subject: [PATCH 3/6] fix crash when SEI length is variable
+Subject: [PATCH 3/5] fix crash when SEI length is variable
 
 ---
  source/encoder/encoder.cpp | 6 ++++++
  1 file changed, 6 insertions(+)
 
 diff --git a/source/encoder/encoder.cpp b/source/encoder/encoder.cpp
-index 65c247aba..13d65655f 100644
+index 2e65cb1a9..6670c814d 100644
 --- a/source/encoder/encoder.cpp
 +++ b/source/encoder/encoder.cpp
-@@ -1113,6 +1113,12 @@ void Encoder::copyUserSEIMessages(Frame *frame, const x265_picture* pic_in)
+@@ -1102,6 +1102,12 @@ void Encoder::copyUserSEIMessages(Frame *frame, const x265_picture* pic_in)
              else
                  input = pic_in->userSEI.payloads[i];
  
@@ -25,5 +25,5 @@ index 65c247aba..13d65655f 100644
                  frame->m_userSEI.payloads[i].payload = new uint8_t[input.payloadSize];
              memcpy(frame->m_userSEI.payloads[i].payload, input.payload, input.payloadSize);
 -- 
-2.39.3 (Apple Git-146)
+2.39.5 (Apple Git-154)
 
diff --git a/contrib/x265/A04-implement-ambient-viewing-environment-sei.patch b/contrib/x265/A04-implement-ambient-viewing-environment-sei.patch
index f3184879a2c2..864d1a356882 100644
--- a/contrib/x265/A04-implement-ambient-viewing-environment-sei.patch
+++ b/contrib/x265/A04-implement-ambient-viewing-environment-sei.patch
@@ -1,8 +1,9 @@
-From 2d918078c803c774f828f7f070f0d345cd1a3e82 Mon Sep 17 00:00:00 2001
+From 39f1065dc6e6c85780c42123033391233f7104af Mon Sep 17 00:00:00 2001
 From: Damiano Galassi <damiog@gmail.com>
-Date: Thu, 22 Aug 2024 07:46:30 +0200
-Subject: [PATCH 4/6] implement ambient viewing environment sei
+Date: Fri, 22 Nov 2024 10:49:10 +0100
+Subject: [PATCH 4/5] Implement ambient viewing environment sei
 
+Defined in ISO/IEC 23008-2:2017, D.2.39.
 ---
  source/common/param.cpp    |  6 ++++++
  source/encoder/encoder.cpp |  9 +++++++++
@@ -11,10 +12,10 @@ Subject: [PATCH 4/6] implement ambient viewing environment sei
  4 files changed, 43 insertions(+)
 
 diff --git a/source/common/param.cpp b/source/common/param.cpp
-index d08bb604e..68f7f84fe 100755
+index a35b06339..92f70b6bf 100755
 --- a/source/common/param.cpp
 +++ b/source/common/param.cpp
-@@ -380,6 +380,7 @@ void x265_param_default(x265_param* param)
+@@ -408,6 +408,7 @@ void x265_param_default(x265_param* param)
      param->preferredTransferCharacteristics = -1;
      param->pictureStructure = -1;
      param->bEmitCLL = 1;
@@ -22,15 +23,15 @@ index d08bb604e..68f7f84fe 100755
  
      param->bEnableFrameDuplication = 0;
      param->dupThreshold = 70;
-@@ -1929,6 +1930,7 @@ int x265_check_params(x265_param* param)
+@@ -1963,6 +1964,7 @@ int x265_check_params(x265_param* param)
                       || param->bEmitIDRRecoverySEI
                     || !!param->interlaceMode
                       || param->preferredTransferCharacteristics > 1
 +                     || param->bEmitAmbientViewingEnvironment
-                      || param->toneMapFile
-                      || param->naluFile);
+                      || strlen(param->toneMapFile)
+                      || strlen(param->naluFile));
  
-@@ -2850,6 +2852,10 @@ void x265_copy_params(x265_param* dst, x265_param* src)
+@@ -2910,6 +2912,10 @@ void x265_copy_params(x265_param* dst, x265_param* src)
      dst->bEmitCLL = src->bEmitCLL;
      dst->maxCLL = src->maxCLL;
      dst->maxFALL = src->maxFALL;
@@ -42,10 +43,10 @@ index d08bb604e..68f7f84fe 100755
      dst->bEmitVUIHRDInfo = src->bEmitVUIHRDInfo;
      dst->bEmitVUITimingInfo = src->bEmitVUITimingInfo;
 diff --git a/source/encoder/encoder.cpp b/source/encoder/encoder.cpp
-index 13d65655f..e7dd30fa7 100644
+index 6670c814d..752e41a8a 100644
 --- a/source/encoder/encoder.cpp
 +++ b/source/encoder/encoder.cpp
-@@ -3429,6 +3429,15 @@ void Encoder::getStreamHeaders(NALList& list, Entropy& sbacCoder, Bitstream& bs)
+@@ -3367,6 +3367,15 @@ void Encoder::getStreamHeaders(NALList& list, Entropy& sbacCoder, Bitstream& bs)
          }
      }
  
@@ -62,10 +63,10 @@ index 13d65655f..e7dd30fa7 100644
      {
          char *opts = x265_param2string(m_param, m_sps.conformanceWindow.rightOffset, m_sps.conformanceWindow.bottomOffset);
 diff --git a/source/encoder/sei.h b/source/encoder/sei.h
-index e357a1bf5..ab6086a2c 100644
+index 3ed957058..9d3e74c63 100644
 --- a/source/encoder/sei.h
 +++ b/source/encoder/sei.h
-@@ -464,6 +464,25 @@ public:
+@@ -638,6 +638,25 @@ public:
      }
  };
  
@@ -92,10 +93,10 @@ index e357a1bf5..ab6086a2c 100644
  {
  public:
 diff --git a/source/x265.h b/source/x265.h
-index 08ccb4b74..f2981cea2 100644
+index 7241beda2..c9fd99984 100644
 --- a/source/x265.h
 +++ b/source/x265.h
-@@ -371,6 +371,7 @@ typedef enum
+@@ -376,6 +376,7 @@ typedef enum
      MASTERING_DISPLAY_INFO               = 137,
      CONTENT_LIGHT_LEVEL_INFO             = 144,
      ALTERNATIVE_TRANSFER_CHARACTERISTICS = 147,
@@ -103,7 +104,7 @@ index 08ccb4b74..f2981cea2 100644
      ALPHA_CHANNEL_INFO                   = 165,
      THREE_DIMENSIONAL_REFERENCE_DISPLAYS_INFO = 176,
      MULTIVIEW_SCENE_INFO                 = 178,
-@@ -1956,6 +1957,11 @@ typedef struct x265_param
+@@ -1962,6 +1963,11 @@ typedef struct x265_param
       * value to that value. */
      uint16_t maxLuma;
  
@@ -115,7 +116,7 @@ index 08ccb4b74..f2981cea2 100644
      /* Maximum of the picture order count */
      int log2MaxPocLsb;
  
-@@ -2167,6 +2173,9 @@ typedef struct x265_param
+@@ -2173,6 +2179,9 @@ typedef struct x265_param
      /*Emit content light level info SEI*/
      int         bEmitCLL;
  
@@ -126,5 +127,5 @@ index 08ccb4b74..f2981cea2 100644
      * Signals picture structure SEI timing message for every frame
      * picture structure 7 is signalled for frame doubling
 -- 
-2.39.3 (Apple Git-146)
+2.39.5 (Apple Git-154)
 
diff --git a/contrib/x265/A05-Fix-Dolby-Vision-RPU-memory-management.patch b/contrib/x265/A05-Fix-Dolby-Vision-RPU-memory-management.patch
new file mode 100644
index 000000000000..dbd7e60b534f
--- /dev/null
+++ b/contrib/x265/A05-Fix-Dolby-Vision-RPU-memory-management.patch
@@ -0,0 +1,56 @@
+From 3a71553731ce49117397ada92ffd858cc550195a Mon Sep 17 00:00:00 2001
+From: Damiano Galassi <damiog@gmail.com>
+Date: Fri, 22 Nov 2024 10:51:25 +0100
+Subject: [PATCH 5/5] Fix Dolby Vision RPU memory management
+
+---
+ source/common/frame.cpp    |  5 +++++
+ source/encoder/encoder.cpp | 13 +++++++++++--
+ 2 files changed, 16 insertions(+), 2 deletions(-)
+
+diff --git a/source/common/frame.cpp b/source/common/frame.cpp
+index 200717425..1244fdc24 100644
+--- a/source/common/frame.cpp
++++ b/source/common/frame.cpp
+@@ -370,6 +370,11 @@ void Frame::destroy()
+         delete[] m_userSEI.payloads;
+     }
+ 
++    if (m_rpu.payloadSize)
++    {
++        delete[] m_rpu.payload;
++    }
++
+     if (m_ctuInfo)
+     {
+         uint32_t widthInCU = (m_param->sourceWidth + m_param->maxCUSize - 1) >> m_param->maxLog2CUSize;
+diff --git a/source/encoder/encoder.cpp b/source/encoder/encoder.cpp
+index 752e41a8a..8117a90b2 100644
+--- a/source/encoder/encoder.cpp
++++ b/source/encoder/encoder.cpp
+@@ -1681,11 +1681,20 @@ int Encoder::encode(const x265_picture* pic_in, x265_picture* pic_out)
+         }
+         copyUserSEIMessages(inFrame[0], inputPic[0]);
+ 
+-        /*Copy Dolby Vision RPU from inputPic to frame*/
++        /* Copy Dolby Vision RPU from inputPic to frame. */
++        if (inFrame[0]->m_rpu.payload && inFrame[0]->m_rpu.payloadSize < inputPic[0]->rpu.payloadSize)
++        {
++            delete[] inFrame[0]->m_rpu.payload;
++            inFrame[0]->m_rpu.payload = NULL;
++        }
++
+         if (inputPic[0]->rpu.payloadSize)
+         {
++            if (inFrame[0]->m_rpu.payload == NULL)
++            {
++                inFrame[0]->m_rpu.payload = new uint8_t[inputPic[0]->rpu.payloadSize];
++            }
+             inFrame[0]->m_rpu.payloadSize = inputPic[0]->rpu.payloadSize;
+-            inFrame[0]->m_rpu.payload = new uint8_t[inputPic[0]->rpu.payloadSize];
+             memcpy(inFrame[0]->m_rpu.payload, inputPic[0]->rpu.payload, inputPic[0]->rpu.payloadSize);
+         }
+ 
+-- 
+2.39.5 (Apple Git-154)
+
diff --git a/contrib/x265/A05-Fix-some-memory-leaks-and-improve-rpu-memory-managem.patch b/contrib/x265/A05-Fix-some-memory-leaks-and-improve-rpu-memory-managem.patch
deleted file mode 100644
index b51e0248037f..000000000000
--- a/contrib/x265/A05-Fix-some-memory-leaks-and-improve-rpu-memory-managem.patch
+++ /dev/null
@@ -1,299 +0,0 @@
-From 762c8f336328463f55ef23ff1c14420fae4bcc96 Mon Sep 17 00:00:00 2001
-From: Damiano Galassi <damiog@gmail.com>
-Date: Thu, 22 Aug 2024 07:58:48 +0200
-Subject: [PATCH 5/6] Fix some memory leaks and improve rpu memory management
-
----
- source/common/frame.cpp        |  5 +++
- source/common/param.cpp        | 65 ++++++++++++++++++++--------------
- source/encoder/api.cpp         |  3 +-
- source/encoder/encoder.cpp     | 27 +++++++-------
- source/encoder/framefilter.cpp |  7 ++--
- source/encoder/slicetype.cpp   |  6 ++++
- 6 files changed, 66 insertions(+), 47 deletions(-)
-
-diff --git a/source/common/frame.cpp b/source/common/frame.cpp
-index 4c800e94e..2b9c6aab1 100644
---- a/source/common/frame.cpp
-+++ b/source/common/frame.cpp
-@@ -348,6 +348,11 @@ void Frame::destroy()
-         delete[] m_userSEI.payloads;
-     }
- 
-+    if (m_rpu.payloadSize)
-+    {
-+        delete[] m_rpu.payload;
-+    }
-+
-     if (m_ctuInfo)
-     {
-         uint32_t widthInCU = (m_param->sourceWidth + m_param->maxCUSize - 1) >> m_param->maxLog2CUSize;
-diff --git a/source/common/param.cpp b/source/common/param.cpp
-index 68f7f84fe..6a2b793a0 100755
---- a/source/common/param.cpp
-+++ b/source/common/param.cpp
-@@ -102,6 +102,19 @@ x265_param *x265_param_alloc()
- 
- void x265_param_free(x265_param* p)
- {
-+    /* release string arguments that were strdup'd */
-+    free((char*)p->rc.lambdaFileName);
-+    free((char*)p->rc.statFileName);
-+    free((char*)p->rc.sharedMemName);
-+    free((char*)p->analysisReuseFileName);
-+    free((char*)p->scalingLists);
-+    free((char*)p->csvfn);
-+    free((char*)p->numaPools);
-+    free((char*)p->masteringDisplayColorVolume);
-+    free((char*)p->toneMapFile);
-+    free((char*)p->analysisSave);
-+    free((char*)p->analysisLoad);
-+    free((char*)p->videoSignalTypePreset);
-     x265_zone_free(p);
- #ifdef SVT_HEVC
-      x265_free(p->svtHevcParam);
-@@ -2636,13 +2649,25 @@ bool parseMaskingStrength(x265_param* p, const char* value)
-     return bError;
- }
- 
-+void copy_str(const char **dst, const char *src)
-+{
-+    if (*dst)
-+    {
-+        free((void *)*dst);
-+        *dst = NULL;
-+    }
-+    if (src)
-+    {
-+        *dst = strdup(src);
-+    }
-+}
-+
- void x265_copy_params(x265_param* dst, x265_param* src)
- {
-     dst->mcstfFrameRange = src->mcstfFrameRange;
-     dst->cpuid = src->cpuid;
-     dst->frameNumThreads = src->frameNumThreads;
--    if (src->numaPools) dst->numaPools = strdup(src->numaPools);
--    else dst->numaPools = NULL;
-+    copy_str(&dst->numaPools, src->numaPools);
- 
-     dst->bEnableWavefront = src->bEnableWavefront;
-     dst->bDistributeModeAnalysis = src->bDistributeModeAnalysis;
-@@ -2652,8 +2677,7 @@ void x265_copy_params(x265_param* dst, x265_param* src)
-     dst->bEnableSsim = src->bEnableSsim;
-     dst->logLevel = src->logLevel;
-     dst->csvLogLevel = src->csvLogLevel;
--    if (src->csvfn) dst->csvfn = strdup(src->csvfn);
--    else dst->csvfn = NULL;
-+    copy_str(&dst->csvfn, src->csvfn);
-     dst->internalBitDepth = src->internalBitDepth;
-     dst->sourceBitDepth = src->sourceBitDepth;
-     dst->internalCsp = src->internalCsp;
-@@ -2703,8 +2727,7 @@ void x265_copy_params(x265_param* dst, x265_param* src)
-     dst->bEnableTransformSkip = src->bEnableTransformSkip;
-     dst->noiseReductionInter = src->noiseReductionInter;
-     dst->noiseReductionIntra = src->noiseReductionIntra;
--    if (src->scalingLists) dst->scalingLists = strdup(src->scalingLists);
--    else dst->scalingLists = NULL;
-+    copy_str(&dst->scalingLists, src->scalingLists);
-     dst->bEnableStrongIntraSmoothing = src->bEnableStrongIntraSmoothing;
-     dst->bEnableConstrainedIntra = src->bEnableConstrainedIntra;
-     dst->maxNumMergeCand = src->maxNumMergeCand;
-@@ -2746,8 +2769,7 @@ void x265_copy_params(x265_param* dst, x265_param* src)
-     dst->psyRdoq = src->psyRdoq;
-     dst->bEnableRdRefine = src->bEnableRdRefine;
-     dst->analysisReuseMode = src->analysisReuseMode;
--    if (src->analysisReuseFileName) dst->analysisReuseFileName=strdup(src->analysisReuseFileName);
--    else dst->analysisReuseFileName = NULL;
-+    copy_str(&dst->analysisReuseFileName, src->analysisReuseFileName);
-     dst->bLossless = src->bLossless;
-     dst->cbQpOffset = src->cbQpOffset;
-     dst->crQpOffset = src->crQpOffset;
-@@ -2776,10 +2798,8 @@ void x265_copy_params(x265_param* dst, x265_param* src)
-     dst->rc.bStatWrite = src->rc.bStatWrite;
-     dst->rc.bStatRead = src->rc.bStatRead;
-     dst->rc.dataShareMode = src->rc.dataShareMode;
--    if (src->rc.statFileName) dst->rc.statFileName=strdup(src->rc.statFileName);
--    else dst->rc.statFileName = NULL;
--    if (src->rc.sharedMemName) dst->rc.sharedMemName = strdup(src->rc.sharedMemName);
--    else dst->rc.sharedMemName = NULL;
-+    copy_str(&dst->rc.statFileName, src->rc.statFileName);
-+    copy_str(&dst->rc.sharedMemName, src->rc.sharedMemName);
-     dst->rc.qblur = src->rc.qblur;
-     dst->rc.complexityBlur = src->rc.complexityBlur;
-     dst->rc.bEnableSlowFirstPass = src->rc.bEnableSlowFirstPass;
-@@ -2813,8 +2833,7 @@ void x265_copy_params(x265_param* dst, x265_param* src)
-     else
-         dst->rc.zones = NULL;
- 
--    if (src->rc.lambdaFileName) dst->rc.lambdaFileName = strdup(src->rc.lambdaFileName);
--    else dst->rc.lambdaFileName = NULL;
-+    copy_str(&dst->rc.lambdaFileName, src->rc.lambdaFileName);
-     dst->rc.bStrictCbr = src->rc.bStrictCbr;
-     dst->rc.qgSize = src->rc.qgSize;
-     dst->rc.bEnableGrain = src->rc.bEnableGrain;
-@@ -2845,8 +2864,7 @@ void x265_copy_params(x265_param* dst, x265_param* src)
-     dst->vui.defDispWinRightOffset = src->vui.defDispWinRightOffset;
-     dst->vui.defDispWinTopOffset = src->vui.defDispWinTopOffset;
- 
--    if (src->masteringDisplayColorVolume) dst->masteringDisplayColorVolume=strdup( src->masteringDisplayColorVolume);
--    else dst->masteringDisplayColorVolume = NULL;
-+    copy_str(&dst->masteringDisplayColorVolume, src->masteringDisplayColorVolume);
-     dst->maxLuma = src->maxLuma;
-     dst->minLuma = src->minLuma;
-     dst->bEmitCLL = src->bEmitCLL;
-@@ -2879,8 +2897,7 @@ void x265_copy_params(x265_param* dst, x265_param* src)
-     dst->analysisSaveReuseLevel = src->analysisSaveReuseLevel;
-     dst->analysisLoadReuseLevel = src->analysisLoadReuseLevel;
-     dst->bLimitSAO = src->bLimitSAO;
--    if (src->toneMapFile) dst->toneMapFile = strdup(src->toneMapFile);
--    else dst->toneMapFile = NULL;
-+    copy_str(&dst->toneMapFile, src->toneMapFile);
-     dst->bDhdr10opt = src->bDhdr10opt;
-     dst->bCTUInfo = src->bCTUInfo;
-     dst->bUseRcStats = src->bUseRcStats;
-@@ -2902,10 +2919,8 @@ void x265_copy_params(x265_param* dst, x265_param* src)
-     dst->vbvEndFrameAdjust = src->vbvEndFrameAdjust;
-     dst->bAnalysisType = src->bAnalysisType;
-     dst->bCopyPicToFrame = src->bCopyPicToFrame;
--    if (src->analysisSave) dst->analysisSave=strdup(src->analysisSave);
--    else dst->analysisSave = NULL;
--    if (src->analysisLoad) dst->analysisLoad=strdup(src->analysisLoad);
--    else dst->analysisLoad = NULL;
-+    copy_str(&dst->analysisSave, src->analysisSave);
-+    copy_str(&dst->analysisLoad, src->analysisLoad);
-     dst->gopLookahead = src->gopLookahead;
-     dst->radl = src->radl;
-     dst->selectiveSAO = src->selectiveSAO;
-@@ -2915,8 +2930,7 @@ void x265_copy_params(x265_param* dst, x265_param* src)
-     dst->bSingleSeiNal = src->bSingleSeiNal;
-     dst->chunkStart = src->chunkStart;
-     dst->chunkEnd = src->chunkEnd;
--    if (src->naluFile) dst->naluFile=strdup(src->naluFile);
--    else dst->naluFile = NULL;
-+    copy_str(&dst->naluFile, src->naluFile);
-     dst->scaleFactor = src->scaleFactor;
-     dst->ctuDistortionRefine = src->ctuDistortionRefine;
-     dst->bEnableHRDConcatFlag = src->bEnableHRDConcatFlag;
-@@ -2954,8 +2968,7 @@ void x265_copy_params(x265_param* dst, x265_param* src)
-     dst->bEnableSCC = src->bEnableSCC;
- #endif
- 
--    if (src->videoSignalTypePreset) dst->videoSignalTypePreset = strdup(src->videoSignalTypePreset);
--    else dst->videoSignalTypePreset = NULL;
-+    copy_str(&dst->videoSignalTypePreset, src->videoSignalTypePreset);
- #ifdef SVT_HEVC
-     memcpy(dst->svtHevcParam, src->svtHevcParam, sizeof(EB_H265_ENC_CONFIGURATION));
- #endif
-diff --git a/source/encoder/api.cpp b/source/encoder/api.cpp
-index 2a96c2044..bb2dc6686 100644
---- a/source/encoder/api.cpp
-+++ b/source/encoder/api.cpp
-@@ -204,11 +204,12 @@ x265_encoder *x265_encoder_open(x265_param *p)
-         }
-     }
- 
--    memcpy(zoneParam, param, sizeof(x265_param));
-+    x265_copy_params(zoneParam, param);
-     for (int i = 0; i < param->rc.zonefileCount; i++)
-     {
-         encoder->configureZone(zoneParam, param->rc.zones[i].zoneParam);
-     }
-+    PARAM_NS::x265_param_free(zoneParam);
- 
-     /* Try to open CSV file handle */
-     if (encoder->m_param->csvfn)
-diff --git a/source/encoder/encoder.cpp b/source/encoder/encoder.cpp
-index e7dd30fa7..cab472614 100644
---- a/source/encoder/encoder.cpp
-+++ b/source/encoder/encoder.cpp
-@@ -982,18 +982,6 @@ void Encoder::destroy()
-         if (m_param->csvfpt)
-             fclose(m_param->csvfpt);
-         /* release string arguments that were strdup'd */
--        free((char*)m_param->rc.lambdaFileName);
--        free((char*)m_param->rc.statFileName);
--        free((char*)m_param->rc.sharedMemName);
--        free((char*)m_param->analysisReuseFileName);
--        free((char*)m_param->scalingLists);
--        free((char*)m_param->csvfn);
--        free((char*)m_param->numaPools);
--        free((char*)m_param->masteringDisplayColorVolume);
--        free((char*)m_param->toneMapFile);
--        free((char*)m_param->analysisSave);
--        free((char*)m_param->analysisLoad);
--        free((char*)m_param->videoSignalTypePreset);
-         PARAM_NS::x265_param_free(m_param);
-     }
- }
-@@ -1748,11 +1736,20 @@ int Encoder::encode(const x265_picture* pic_in, x265_picture** pic_out)
-         }
-         copyUserSEIMessages(inFrame[0], inputPic[0]);
- 
--        /*Copy Dolby Vision RPU from inputPic to frame*/
-+        /* Copy Dolby Vision RPU from inputPic to frame. */
-+        if (inFrame[0]->m_rpu.payload && inFrame[0]->m_rpu.payloadSize < inputPic[0]->rpu.payloadSize)
-+        {
-+            delete[] inFrame[0]->m_rpu.payload;
-+            inFrame[0]->m_rpu.payload = NULL;
-+        }
-+
-         if (inputPic[0]->rpu.payloadSize)
-         {
-+            if (inFrame[0]->m_rpu.payload == NULL)
-+            {
-+                inFrame[0]->m_rpu.payload = new uint8_t[inputPic[0]->rpu.payloadSize];
-+            }
-             inFrame[0]->m_rpu.payloadSize = inputPic[0]->rpu.payloadSize;
--            inFrame[0]->m_rpu.payload = new uint8_t[inputPic[0]->rpu.payloadSize];
-             memcpy(inFrame[0]->m_rpu.payload, inputPic[0]->rpu.payload, inputPic[0]->rpu.payloadSize);
-         }
- 
-@@ -3806,7 +3803,7 @@ void Encoder::configureZone(x265_param *p, x265_param *zone)
-         }
-         p->radl = zone->radl;
-     }
--    memcpy(zone, p, sizeof(x265_param));
-+    x265_copy_params(zone, p);
- }
- 
- void Encoder::configureDolbyVisionParams(x265_param* p)
-diff --git a/source/encoder/framefilter.cpp b/source/encoder/framefilter.cpp
-index 344ac738d..ce6e59ab6 100644
---- a/source/encoder/framefilter.cpp
-+++ b/source/encoder/framefilter.cpp
-@@ -162,11 +162,8 @@ void FrameFilter::destroy()
- 
-     if (m_parallelFilter)
-     {
--        if (m_useSao)
--        {
--            for(int row = 0; row < m_numRows; row++)
--                m_parallelFilter[row].m_sao.destroy((row == 0 ? 1 : 0));
--        }
-+        for(int row = 0; row < m_numRows; row++)
-+            m_parallelFilter[row].m_sao.destroy((row == 0 ? 1 : 0));
- 
-         delete[] m_parallelFilter;
-         m_parallelFilter = NULL;
-diff --git a/source/encoder/slicetype.cpp b/source/encoder/slicetype.cpp
-index 8bbac8244..046cf1596 100644
---- a/source/encoder/slicetype.cpp
-+++ b/source/encoder/slicetype.cpp
-@@ -1165,6 +1165,12 @@ void Lookahead::destroy()
-         delete curFrame;
-     }
- 
-+    X265_FREE(m_accHistDiffRunningAvgCb[0]);
-+    X265_FREE(m_accHistDiffRunningAvgCb);
-+    X265_FREE(m_accHistDiffRunningAvgCr[0]);
-+    X265_FREE(m_accHistDiffRunningAvgCr);
-+    X265_FREE(m_accHistDiffRunningAvg[0]);
-+    X265_FREE(m_accHistDiffRunningAvg);
-     X265_FREE(m_scratch);
-     delete [] m_tld;
-     if (m_param->lookaheadThreads > 0)
--- 
-2.39.3 (Apple Git-146)
-
diff --git a/contrib/x265/A06-Simplify-macOS-cross-compilation.patch b/contrib/x265/A06-Simplify-macOS-cross-compilation.patch
index 0f3ecb42a57b..2221da5b1d2e 100644
--- a/contrib/x265/A06-Simplify-macOS-cross-compilation.patch
+++ b/contrib/x265/A06-Simplify-macOS-cross-compilation.patch
@@ -1,29 +1,26 @@
-From 0d8bab0c3c5ec3b5676821f95b0e279a9713d4bf Mon Sep 17 00:00:00 2001
+From 4a56a4255cbbc008c1973eb74ab26bfbea204103 Mon Sep 17 00:00:00 2001
 From: Damiano Galassi <damiog@gmail.com>
-Date: Fri, 13 Sep 2024 16:10:16 +0200
-Subject: [PATCH 6/6] Simplify macOS cross-compilation
+Date: Fri, 22 Nov 2024 11:05:34 +0100
+Subject: [PATCH] Simplify macOS cross-compilation
 
 ---
- source/CMakeLists.txt | 6 +++++-
- 1 file changed, 5 insertions(+), 1 deletion(-)
+ source/CMakeLists.txt | 3 +++
+ 1 file changed, 3 insertions(+)
 
 diff --git a/source/CMakeLists.txt b/source/CMakeLists.txt
-index 37b83f959..f14fc0bd1 100755
+index 5c6dda9e8..a31cde199 100755
 --- a/source/CMakeLists.txt
 +++ b/source/CMakeLists.txt
-@@ -334,7 +334,11 @@ if(GCC)
-             set(ARM_ARGS -O3 -march=armv9-a+i8mm+sve2)
-             add_definitions(-DHAVE_SVE2=1)
-         endif()
--        set(ARM_ARGS ${ARM_ARGS} -fPIC)
+@@ -736,6 +736,9 @@ if((MSVC_IDE OR XCODE OR GCC) AND ENABLE_ASSEMBLY)
+    elseif(ARM64 OR CROSS_COMPILE_ARM64)
+     # compile ARM64 arch asm files here
+         enable_language(ASM)
 +        if(APPLE)
-+            set(ARM_ARGS ${ARM_ARGS} -fPIC -arch ${CMAKE_OSX_ARCHITECTURES})
-+        else()
-+            set(ARM_ARGS ${ARM_ARGS} -fPIC)
++            set(ARM_ARGS ${ARM_ARGS} -arch ${CMAKE_OSX_ARCHITECTURES})
 +        endif()
-         # Do not allow implicit vector type conversions in Clang builds (this
-         # is already the default in GCC builds).
-         check_cxx_compiler_flag(-flax-vector-conversions=none CC_HAS_FLAX_VEC_CONV_NONE)
+         foreach(ASM ${ARM_ASMS})
+             set(ASM_SRC ${CMAKE_CURRENT_SOURCE_DIR}/common/aarch64/${ASM})
+             list(APPEND ASM_SRCS ${ASM_SRC})
 -- 
-2.39.3 (Apple Git-146)
+2.39.5 (Apple Git-154)
 
diff --git a/contrib/x265/A07-Port-ARM64-features-detection-code-from-SVT-AV1.patch b/contrib/x265/A07-Port-ARM64-features-detection-code-from-SVT-AV1.patch
deleted file mode 100644
index b4bcae91c5f0..000000000000
--- a/contrib/x265/A07-Port-ARM64-features-detection-code-from-SVT-AV1.patch
+++ /dev/null
@@ -1,158 +0,0 @@
-From d51dd0f00f12d589093284a3689f1d2556f5be39 Mon Sep 17 00:00:00 2001
-From: Damiano Galassi <damiog@gmail.com>
-Date: Sat, 14 Sep 2024 09:40:42 +0200
-Subject: [PATCH] Port ARM64 features detection code from SVT-AV1
-
----
- source/common/cpu.cpp | 118 +++++++++++++++++++++++++++++++++++++++---
- 1 file changed, 112 insertions(+), 6 deletions(-)
-
-diff --git a/source/common/cpu.cpp b/source/common/cpu.cpp
-index 61cdaadfb..1b334eef9 100644
---- a/source/common/cpu.cpp
-+++ b/source/common/cpu.cpp
-@@ -391,29 +391,135 @@ uint32_t cpu_detect(bool benableavx512)
- 
- #elif X265_ARCH_ARM64
- 
--uint32_t cpu_detect(bool benableavx512)
-+#if defined(__linux__)
-+// For reading the HWCAP flags
-+#include <sys/auxv.h>
-+#elif defined(__APPLE__)
-+#include <stdbool.h>
-+#include <sys/sysctl.h>
-+#elif defined(_MSC_VER)
-+#include <windows.h>
-+#endif
-+
-+#if defined(__linux__)
-+
-+// Define hwcap values ourselves: building with an old auxv header where these
-+// hwcap values are not defined should not prevent features from being enabled.
-+#define X265_ARM64_HWCAP_CRC32 (1 << 7)
-+#define X265_ARM64_HWCAP_ASIMDDP (1 << 20)
-+#define X265_ARM64_HWCAP_SVE (1 << 22)
-+#define X265_ARM64_HWCAP2_SVE2 (1 << 1)
-+#define X265_ARM64_HWCAP2_I8MM (1 << 13)
-+
-+uint32_t cpu_detect(bool unused)
- {
-+#if HAVE_ARM_CRC32 || HAVE_NEON_DOTPROD || HAVE_SVE
-+    unsigned long hwcap = getauxval(AT_HWCAP);
-+#endif
-+#if HAVE_NEON_I8MM || HAVE_SVE2
-+    unsigned long hwcap2 = getauxval(AT_HWCAP2);
-+#endif
-+
-     int flags = 0;
- 
-     #if HAVE_NEON
--         flags |= X265_CPU_NEON;
-+         flags |= X265_CPU_NEON;  // Neon is mandatory in Armv8.0-A.
-     #endif
-     #if HAVE_NEON_DOTPROD
--         flags |= X265_CPU_NEON_DOTPROD;
-+         if (hwcap & X265_ARM64_HWCAP_ASIMDDP)
-+         {
-+             flags |= X265_CPU_NEON_DOTPROD;
-+         }
-     #endif
-     #if HAVE_NEON_I8MM
--         flags |= X265_CPU_NEON_I8MM;
-+         if (hwcap2 & X265_ARM64_HWCAP2_I8MM)
-+         {
-+             flags |= X265_CPU_NEON_I8MM;
-+         }
-     #endif
-     #if HAVE_SVE
--         flags |= X265_CPU_SVE;
-+         if (hwcap & X265_ARM64_HWCAP_SVE)
-+         {
-+             flags |= X265_CPU_SVE;
-+         }
-     #endif
-     #if HAVE_SVE2
--         flags |= X265_CPU_SVE2;
-+         if (hwcap2 & X265_ARM64_HWCAP2_SVE2)
-+         {
-+             flags |= X265_CPU_SVE2;
-+         }
-     #endif
- 
-     return flags;
- }
- 
-+#elif defined(__APPLE__) // end __linux__
-+
-+// sysctlbyname() parameter documentation for instruction set characteristics:
-+// https://developer.apple.com/documentation/kernel/1387446-sysctlbyname/determining_instruction_set_characteristics
-+#if HAVE_ARM_CRC32 || HAVE_NEON_DOTPROD || HAVE_NEON_I8MM
-+static bool have_feature(const char *feature)
-+{
-+    int64_t feature_present = 0;
-+    size_t size = sizeof(feature_present);
-+    if (sysctlbyname(feature, &feature_present, &size, NULL, 0) != 0)
-+    {
-+        return false;
-+    }
-+    return feature_present;
-+}
-+#endif
-+
-+uint32_t cpu_detect(bool unused)
-+{
-+    int flags = 0;
-+
-+    #if HAVE_NEON
-+        flags |= X265_CPU_NEON;  // Neon is mandatory in Armv8.0-A.
-+    #endif
-+    #if HAVE_NEON_DOTPROD
-+        if (have_feature("hw.optional.arm.FEAT_DotProd"))
-+        {
-+            flags |= X265_CPU_NEON_DOTPROD;
-+        }
-+    #endif
-+    #if HAVE_NEON_I8MM
-+        if (have_feature("hw.optional.arm.FEAT_I8MM"))
-+        {
-+            flags |= X265_CPU_NEON_I8MM;
-+        }
-+    #endif
-+
-+    return flags;
-+}
-+
-+#elif defined(_MSC_VER) || defined(__MINGW32__) // end __APPLE__
-+
-+uint32_t cpu_detect(bool unused)
-+{
-+    int flags = 0;
-+
-+    #if HAVE_NEON
-+        flags |= X265_CPU_NEON;  // Neon is mandatory in Armv8.0-A.
-+    #endif
-+
-+    #if HAVE_NEON_DOTPROD
-+    // Support for PF_ARM_V82_DP_INSTRUCTIONS_AVAILABLE was added in Windows SDK
-+    // 20348, supported by Windows 11 and Windows Server 2022.
-+        #if defined(PF_ARM_V82_DP_INSTRUCTIONS_AVAILABLE)
-+            if (IsProcessorFeaturePresent(PF_ARM_V82_DP_INSTRUCTIONS_AVAILABLE))
-+            {
-+                flags |= X265_CPU_NEON_DOTPROD;
-+            }
-+        #endif  // defined(PF_ARM_V82_DP_INSTRUCTIONS_AVAILABLE)
-+    #endif  // HAVE_NEON_DOTPROD
-+    // No I8MM or SVE feature detection available on Windows at time of writing.
-+
-+    return flags;
-+}
-+
-+#endif
-+
- #elif X265_ARCH_POWER8
- 
- uint32_t cpu_detect(bool benableavx512)
--- 
-2.39.3 (Apple Git-146)
-
diff --git a/contrib/x265/module.defs b/contrib/x265/module.defs
index a28ce72571bb..99d122f74377 100644
--- a/contrib/x265/module.defs
+++ b/contrib/x265/module.defs
@@ -2,9 +2,9 @@ __deps__ := X265_8 X265_10 X265_12
 $(eval $(call import.MODULE.defs,X265,x265,$(__deps__)))
 $(eval $(call import.CONTRIB.defs,X265))
 
-X265.FETCH.url     = https://github.com/HandBrake/HandBrake-contribs/releases/download/contribs2/x265_4.0.tar.gz
-X265.FETCH.url    += https://bitbucket.org/multicoreware/x265_git/downloads/x265_4.0.tar.gz
-X265.FETCH.sha256  = 75b4d05629e365913de3100b38a459b04e2a217a8f30efaa91b572d8e6d71282
+X265.FETCH.url     = https://github.com/HandBrake/HandBrake-contribs/releases/download/contribs2/x265_4.1.tar.gz
+#X265.FETCH.url    += https://bitbucket.org/multicoreware/x265_git/downloads/x265_4.1.tar.gz
+X265.FETCH.sha256  = ef05940bdbf8e2f24c93d799ae8c5d19f43cd235d01c17fa5acf3fa77b48c032
 
 # Silence "warning: overriding recipe for target" messages
 X265.FETCH.target =
diff --git a/contrib/x265_10bit/module.defs b/contrib/x265_10bit/module.defs
index 310b4553b31a..f4d646e0432d 100644
--- a/contrib/x265_10bit/module.defs
+++ b/contrib/x265_10bit/module.defs
@@ -2,9 +2,9 @@ __deps__ := X265_8
 $(eval $(call import.MODULE.defs,X265_10,x265_10,$(__deps__),x265))
 $(eval $(call import.CONTRIB.defs,X265_10))
 
-X265_10.FETCH.url     = https://github.com/HandBrake/HandBrake-contribs/releases/download/contribs2/x265_4.0.tar.gz
-X265_10.FETCH.url    += https://bitbucket.org/multicoreware/x265_git/downloads/x265_4.0.tar.gz
-X265_10.FETCH.sha256  = 75b4d05629e365913de3100b38a459b04e2a217a8f30efaa91b572d8e6d71282
+X265_10.FETCH.url     = https://github.com/HandBrake/HandBrake-contribs/releases/download/contribs2/x265_4.1.tar.gz
+#X265_10.FETCH.url    += https://bitbucket.org/multicoreware/x265_git/downloads/x265_4.1.tar.gz
+X265_10.FETCH.sha256  = ef05940bdbf8e2f24c93d799ae8c5d19f43cd235d01c17fa5acf3fa77b48c032
 
 # Silence "warning: overriding recipe for target" messages
 X265_10.FETCH.target =
@@ -57,14 +57,7 @@ ifeq (1,$(HOST.cross))
         X265_10.CONFIGURE.extra += -DCMAKE_RC_COMPILER=$(HOST.cross.prefix)windres
         X265_10.CONFIGURE.args.host  = -DCMAKE_HOST_SYSTEM="$(X265_10.CONFIGURE.host)"
     endif
-    ifeq (aarch64,$(HOST.machine:arm64=aarch64))
-        X265_10.CONFIGURE.extra += -DCROSS_COMPILE_ARM64=ON -DCROSS_COMPILE_NEON_DOTPROD=ON -DCROSS_COMPILE_NEON_I8MM=ON
-    endif
     X265_10.CONFIGURE.args.build = -DCMAKE_SYSTEM_PROCESSOR=$(HOST.machine)
-else
-    ifeq (arm64-darwin,$(HOST.machine)-$(HOST.system))
-        X265_10.CONFIGURE.extra += -DCPU_HAS_NEON_I8MM=ON
-    endif
 endif
 
 ## find CMakeLists.txt
diff --git a/contrib/x265_12bit/module.defs b/contrib/x265_12bit/module.defs
index c026b98e0a4c..792bf668cbe4 100644
--- a/contrib/x265_12bit/module.defs
+++ b/contrib/x265_12bit/module.defs
@@ -2,9 +2,9 @@ __deps__ := X265_8
 $(eval $(call import.MODULE.defs,X265_12,x265_12,$(__deps__),x265))
 $(eval $(call import.CONTRIB.defs,X265_12))
 
-X265_12.FETCH.url     = https://github.com/HandBrake/HandBrake-contribs/releases/download/contribs2/x265_4.0.tar.gz
-X265_12.FETCH.url    += https://bitbucket.org/multicoreware/x265_git/downloads/x265_4.0.tar.gz
-X265_12.FETCH.sha256  = 75b4d05629e365913de3100b38a459b04e2a217a8f30efaa91b572d8e6d71282
+X265_12.FETCH.url     = https://github.com/HandBrake/HandBrake-contribs/releases/download/contribs2/x265_4.1.tar.gz
+#X265_12.FETCH.url    += https://bitbucket.org/multicoreware/x265_git/downloads/x265_4.1.tar.gz
+X265_12.FETCH.sha256  = ef05940bdbf8e2f24c93d799ae8c5d19f43cd235d01c17fa5acf3fa77b48c032
 
 # Silence "warning: overriding recipe for target" messages
 X265_12.FETCH.target =
@@ -57,14 +57,7 @@ ifeq (1,$(HOST.cross))
         X265_12.CONFIGURE.extra += -DCMAKE_RC_COMPILER=$(HOST.cross.prefix)windres
         X265_12.CONFIGURE.args.host  = -DCMAKE_HOST_SYSTEM="$(X265_12.CONFIGURE.host)"
     endif
-    ifeq (aarch64,$(HOST.machine:arm64=aarch64))
-        X265_12.CONFIGURE.extra += -DCROSS_COMPILE_ARM64=ON -DCROSS_COMPILE_NEON_DOTPROD=ON -DCROSS_COMPILE_NEON_I8MM=ON
-    endif
     X265_12.CONFIGURE.args.build = -DCMAKE_SYSTEM_PROCESSOR=$(HOST.machine)
-else
-    ifeq (arm64-darwin,$(HOST.machine)-$(HOST.system))
-        X265_12.CONFIGURE.extra += -DCPU_HAS_NEON_I8MM=ON
-    endif
 endif
 
 ## find CMakeLists.txt
diff --git a/contrib/x265_8bit/module.defs b/contrib/x265_8bit/module.defs
index d1280eaa34e9..c18c2b3eedb0 100644
--- a/contrib/x265_8bit/module.defs
+++ b/contrib/x265_8bit/module.defs
@@ -2,9 +2,9 @@ __deps__ :=
 $(eval $(call import.MODULE.defs,X265_8,x265_8,$(__deps__),x265))
 $(eval $(call import.CONTRIB.defs,X265_8))
 
-X265_8.FETCH.url     = https://github.com/HandBrake/HandBrake-contribs/releases/download/contribs2/x265_4.0.tar.gz
-X265_8.FETCH.url    += https://bitbucket.org/multicoreware/x265_git/downloads/x265_4.0.tar.gz
-X265_8.FETCH.sha256  = 75b4d05629e365913de3100b38a459b04e2a217a8f30efaa91b572d8e6d71282
+X265_8.FETCH.url     = https://github.com/HandBrake/HandBrake-contribs/releases/download/contribs2/x265_4.1.tar.gz
+#X265_8.FETCH.url    += https://bitbucket.org/multicoreware/x265_git/downloads/x265_4.1.tar.gz
+X265_8.FETCH.sha256  = ef05940bdbf8e2f24c93d799ae8c5d19f43cd235d01c17fa5acf3fa77b48c032
 
 X265_8.build_dir             = 8bit
 X265_8.CONFIGURE.exe         = cmake
@@ -55,14 +55,7 @@ ifeq (1,$(HOST.cross))
         X265_8.CONFIGURE.extra += -DCMAKE_RC_COMPILER=$(HOST.cross.prefix)windres
         X265_8.CONFIGURE.args.host  = -DCMAKE_HOST_SYSTEM="$(X265_8.CONFIGURE.host)"
     endif
-    ifeq (aarch64,$(HOST.machine:arm64=aarch64))
-        X265_8.CONFIGURE.extra += -DCROSS_COMPILE_ARM64=ON -DCROSS_COMPILE_NEON_DOTPROD=ON -DCROSS_COMPILE_NEON_I8MM=ON
-    endif
     X265_8.CONFIGURE.args.build = -DCMAKE_SYSTEM_PROCESSOR=$(HOST.machine)
-else
-    ifeq (arm64-darwin,$(HOST.machine)-$(HOST.system))
-        X265_8.CONFIGURE.extra += -DCPU_HAS_NEON_I8MM=ON
-    endif
 endif
 
 ## find CMakeLists.txt
diff --git a/libhb/encx265.c b/libhb/encx265.c
index 11c3976d5ff2..c16f8ed4cae0 100644
--- a/libhb/encx265.c
+++ b/libhb/encx265.c
@@ -463,10 +463,10 @@ int encx265Init(hb_work_object_t *w, hb_job_t *job)
     /* statsfile (but not 2-pass) */
     if (param->logLevel >= X265_LOG_DEBUG)
     {
-        if (param->csvfn == NULL)
+        if (param->csvfn[0] == '\0')
         {
             pv->csvfn = hb_get_temporary_filename("x265.csv");
-            param->csvfn = strdup(pv->csvfn);
+            snprintf(param->csvfn, X265_MAX_STRING_SIZE, "%s", pv->csvfn);
         }
         else
         {
@@ -687,20 +687,12 @@ static hb_buffer_t* x265_encode(hb_work_object_t *w, hb_buffer_t *in)
 {
     hb_work_private_t *pv = w->private_data;
     hb_job_t *job         = pv->job;
-
-    x265_picture pic_in;
-    x265_picture  pic_layers_out[MAX_SCALABLE_LAYERS];
-    x265_picture *pic_lyrptr_out[MAX_SCALABLE_LAYERS];
+    x265_picture pic_in, pic_out;
 
     x265_nal *nal;
     uint32_t nnal;
     int ret;
 
-    for (int i = 0; i < MAX_SCALABLE_LAYERS; i++)
-    {
-        pic_lyrptr_out[i] = &pic_layers_out[i];
-    }
-
     pv->api->picture_init(pv->param, &pic_in);
 
     pic_in.stride[0] = in->plane[0].stride;
@@ -786,7 +778,7 @@ static hb_buffer_t* x265_encode(hb_work_object_t *w, hb_buffer_t *in)
     pv->last_stop = in->s.stop;
     save_frame_info(pv, in);
 
-    ret = pv->api->encoder_encode(pv->x265, &nal, &nnal, &pic_in, pic_lyrptr_out);
+    ret = pv->api->encoder_encode(pv->x265, &nal, &nnal, &pic_in, &pic_out);
 
     for (int i = 0; i < sei->numPayloads; i++)
     {
@@ -796,7 +788,7 @@ static hb_buffer_t* x265_encode(hb_work_object_t *w, hb_buffer_t *in)
 
     if (ret > 0)
     {
-        return nal_encode(w, pic_lyrptr_out[0], nal, nnal);
+        return nal_encode(w, &pic_out, nal, nnal);
     }
     return NULL;
 }
@@ -810,22 +802,16 @@ int encx265Work(hb_work_object_t *w, hb_buffer_t **buf_in, hb_buffer_t **buf_out
     {
         uint32_t nnal;
         x265_nal *nal;
-        x265_picture  pic_layers_out[MAX_SCALABLE_LAYERS];
-        x265_picture *pic_lyrptr_out[MAX_SCALABLE_LAYERS];
+        x265_picture pic_out;
         hb_buffer_list_t list;
 
         hb_buffer_list_clear(&list);
 
-        for (int i = 0; i < MAX_SCALABLE_LAYERS; i++)
-        {
-            pic_lyrptr_out[i] = &pic_layers_out[i];
-        }
-
         // flush delayed frames
         while (pv->api->encoder_encode(pv->x265, &nal,
-                                       &nnal, NULL, pic_lyrptr_out) > 0)
+                                       &nnal, NULL, &pic_out) > 0)
         {
-            hb_buffer_t *buf = nal_encode(w, pic_lyrptr_out[0], nal, nnal);
+            hb_buffer_t *buf = nal_encode(w, &pic_out, nal, nnal);
             hb_buffer_list_append(&list, buf);
         }
         // add the EOF to the end of the chain
