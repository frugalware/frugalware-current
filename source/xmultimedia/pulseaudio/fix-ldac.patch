diff -Naur pulseaudio-15.0/src/modules/bluetooth/a2dp-codec-ldac-gst.c pulseaudio-15.0.new/src/modules/bluetooth/a2dp-codec-ldac-gst.c
--- pulseaudio-15.0/src/modules/bluetooth/a2dp-codec-ldac-gst.c	2021-07-27 22:02:27.756868400 +0200
+++ pulseaudio-15.0.new/src/modules/bluetooth/a2dp-codec-ldac-gst.c	2022-03-04 12:26:37.961907910 +0100
@@ -46,13 +46,6 @@
     }
     gst_object_unref(element_factory);
 
-    element_factory = gst_element_factory_find("rtpldacpay");
-    if (element_factory == NULL) {
-        pa_log_info("LDAC RTP payloader element `rtpldacpay` not found");
-        return false;
-    }
-    gst_object_unref(element_factory);
-
     return true;
 }
 
@@ -206,7 +199,6 @@
 
 GstElement *gst_init_ldac(struct gst_info *info, pa_sample_spec *ss, bool for_encoding) {
     GstElement *bin;
-    GstElement *rtpldacpay;
     GstElement *enc;
     GstPad *pad;
 
@@ -270,28 +262,16 @@
             goto fail;
     }
 
-    rtpldacpay = gst_element_factory_make("rtpldacpay", "rtp_ldac_pay");
-    if (!rtpldacpay) {
-        pa_log_error("Could not create RTP LDAC payloader element");
-        goto fail;
-    }
-
     bin = gst_bin_new("ldac_enc_bin");
     pa_assert(bin);
 
-    gst_bin_add_many(GST_BIN(bin), enc, rtpldacpay, NULL);
-
-    if (!gst_element_link(enc, rtpldacpay)) {
-        pa_log_error("Failed to link LDAC encoder to LDAC RTP payloader");
-        gst_object_unref(bin);
-        return NULL;
-    }
+    gst_bin_add_many(GST_BIN(bin), enc, NULL);
 
     pad = gst_element_get_static_pad(enc, "sink");
     pa_assert_se(gst_element_add_pad(bin, gst_ghost_pad_new("sink", pad)));
     gst_object_unref(GST_OBJECT(pad));
 
-    pad = gst_element_get_static_pad(rtpldacpay, "src");
+    pad = gst_element_get_static_pad(enc, "src");
     pa_assert_se(gst_element_add_pad(bin, gst_ghost_pad_new("src", pad)));
     gst_object_unref(GST_OBJECT(pad));
 
@@ -421,12 +401,33 @@
 }
 
 static size_t encode_buffer(void *codec_info, uint32_t timestamp, const uint8_t *input_buffer, size_t input_size, uint8_t *output_buffer, size_t output_size, size_t *processed) {
+    struct gst_info *info = (struct gst_info *) codec_info;
+    struct rtp_header *header;
+    struct rtp_payload *payload;
     size_t written;
 
-    written = gst_transcode_buffer(codec_info, input_buffer, input_size, output_buffer, output_size, processed);
+    if (PA_UNLIKELY(output_size < sizeof(*header) + sizeof(*payload))) {
+        *processed = 0;
+        return 0;
+    }
+
+    written = gst_transcode_buffer(codec_info, input_buffer, input_size, output_buffer + sizeof(*header) + sizeof(*payload), output_size - sizeof(*header) - sizeof(*payload), processed);
     if (PA_UNLIKELY(*processed != input_size))
         pa_log_error("LDAC encoding error");
 
+    if (PA_LIKELY(written > 0)) {
+        header = (struct rtp_header *) output_buffer;
+        pa_zero(*header);
+        header->v = 2;
+        header->pt = 96;
+        header->sequence_number = htons(info->seq_num++);
+        header->timestamp = htonl(timestamp);
+        header->ssrc = htonl(1);
+        payload = (struct rtp_payload*) (output_buffer + sizeof(*header));
+        payload->frame_count = get_ldac_num_frames(codec_info, info->codec_type);
+        written += sizeof(*header) + sizeof(*payload);
+    }
+
     return written;
 }
 
diff -Naur pulseaudio-15.0/src/modules/bluetooth/a2dp-codec-sbc.c pulseaudio-15.0.new/src/modules/bluetooth/a2dp-codec-sbc.c
--- pulseaudio-15.0/src/modules/bluetooth/a2dp-codec-sbc.c	2021-07-27 22:02:27.756868400 +0200
+++ pulseaudio-15.0.new/src/modules/bluetooth/a2dp-codec-sbc.c	2022-03-04 12:26:37.961907910 +0100
@@ -704,7 +704,7 @@
 
 static size_t get_block_size(void *codec_info, size_t link_mtu) {
     struct sbc_info *sbc_info = (struct sbc_info *) codec_info;
-    size_t rtp_size = sizeof(struct rtp_header) + sizeof(struct rtp_sbc_payload);
+    size_t rtp_size = sizeof(struct rtp_header) + sizeof(struct rtp_payload);
     size_t frame_count = (link_mtu - rtp_size) / sbc_info->frame_length;
 
     /* frame_count is only 4 bit number */
@@ -716,7 +716,7 @@
 
 static size_t get_encoded_block_size(void *codec_info, size_t input_size) {
     struct sbc_info *sbc_info = (struct sbc_info *) codec_info;
-    size_t rtp_size = sizeof(struct rtp_header) + sizeof(struct rtp_sbc_payload);
+    size_t rtp_size = sizeof(struct rtp_header) + sizeof(struct rtp_payload);
 
     /* input size should be aligned to codec input block size */
     pa_assert_fp(input_size % sbc_info->codesize == 0);
@@ -753,14 +753,14 @@
 static size_t encode_buffer(void *codec_info, uint32_t timestamp, const uint8_t *input_buffer, size_t input_size, uint8_t *output_buffer, size_t output_size, size_t *processed) {
     struct sbc_info *sbc_info = (struct sbc_info *) codec_info;
     struct rtp_header *header;
-    struct rtp_sbc_payload *payload;
+    struct rtp_payload *payload;
     uint8_t *d;
     const uint8_t *p;
     size_t to_write, to_encode;
     uint8_t frame_count;
 
     header = (struct rtp_header*) output_buffer;
-    payload = (struct rtp_sbc_payload*) (output_buffer + sizeof(*header));
+    payload = (struct rtp_payload*) (output_buffer + sizeof(*header));
 
     frame_count = 0;
 
@@ -836,14 +836,14 @@
     struct sbc_info *sbc_info = (struct sbc_info *) codec_info;
 
     struct rtp_header *header;
-    struct rtp_sbc_payload *payload;
+    struct rtp_payload *payload;
     const uint8_t *p;
     uint8_t *d;
     size_t to_write, to_decode;
     uint8_t frame_count;
 
     header = (struct rtp_header *) input_buffer;
-    payload = (struct rtp_sbc_payload*) (input_buffer + sizeof(*header));
+    payload = (struct rtp_payload*) (input_buffer + sizeof(*header));
 
     frame_count = payload->frame_count;
 
diff -Naur pulseaudio-15.0/src/modules/bluetooth/rtp.h pulseaudio-15.0.new/src/modules/bluetooth/rtp.h
--- pulseaudio-15.0/src/modules/bluetooth/rtp.h	2021-07-27 22:02:27.758868500 +0200
+++ pulseaudio-15.0.new/src/modules/bluetooth/rtp.h	2022-03-04 12:26:37.961907910 +0100
@@ -41,7 +41,7 @@
 	uint32_t csrc[0];
 } __attribute__ ((packed));
 
-struct rtp_sbc_payload {
+struct rtp_payload {
 	uint8_t frame_count:4;
 	uint8_t rfa0:1;
 	uint8_t is_last_fragment:1;
@@ -67,7 +67,7 @@
 	uint32_t csrc[0];
 } __attribute__ ((packed));
 
-struct rtp_sbc_payload {
+struct rtp_payload {
 	uint8_t is_fragmented:1;
 	uint8_t is_first_fragment:1;
 	uint8_t is_last_fragment:1;
